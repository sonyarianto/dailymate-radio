(function(F){var g={};function B(I){if(g[I]){return g[I].exports}var Q=g[I]={i:I,l:false,exports:{}};F[I].call(Q.exports,Q,Q.exports,B);Q.l=true;return Q.exports}B.m=F;B.c=g;B.d=function(I,Q,F){if(!B.o(I,Q)){Object.defineProperty(I,Q,{enumerable:true,get:F})}};B.r=function(I){if(typeof Symbol!=="undefined"&&Symbol.toStringTag){Object.defineProperty(I,Symbol.toStringTag,{value:"Module"})}Object.defineProperty(I,"__esModule",{value:true})};B.t=function(Q,I){if(I&1)Q=B(Q);if(I&8)return Q;if(I&4&&typeof Q==="object"&&Q&&Q.__esModule)return Q;var F=Object.create(null);B.r(F);Object.defineProperty(F,"default",{enumerable:true,value:Q});if(I&2&&typeof Q!="string")for(var g in Q)B.d(F,g,function(I){return Q[I]}.bind(null,g));return F};B.n=function(Q){var I=Q&&Q.__esModule?function I(){return Q["default"]}:function I(){return Q};B.d(I,"a",I);return I};B.o=function(I,Q){return Object.prototype.hasOwnProperty.call(I,Q)};B.p="";return B(B.s=2)})([function(module,exports){eval("/**\n * Vue custom filters\n */\n\n// comma separate long numerical values\nVue.filter('toCommas', function (num, decimals) {\n  var o = { style: 'decimal', minimumFractionDigits: decimals, maximumFractionDigits: decimals };\n  return new Intl.NumberFormat('en-US', o).format(num);\n});\n\n// sanitize text data by only allowing alnums and some symbols\nVue.filter('toText', function (str, def) {\n  str = String(str || '').replace(/[^\\w\\`\\'\\-\\,\\.\\!\\?]+/g, ' ').replace(/\\s\\s+/g, ' ').trim();\n  return str || String(def || '');\n});\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvanMvZmlsdGVycy5qcz85OTI2Il0sIm5hbWVzIjpbIlZ1ZSIsImZpbHRlciIsIm51bSIsImRlY2ltYWxzIiwibyIsInN0eWxlIiwibWluaW11bUZyYWN0aW9uRGlnaXRzIiwibWF4aW11bUZyYWN0aW9uRGlnaXRzIiwiSW50bCIsIk51bWJlckZvcm1hdCIsImZvcm1hdCIsInN0ciIsImRlZiIsIlN0cmluZyIsInJlcGxhY2UiLCJ0cmltIl0sIm1hcHBpbmdzIjoiQUFBQTs7OztBQUlBO0FBQ0FBLElBQUlDLE1BQUosQ0FBWSxVQUFaLEVBQXdCLFVBQUVDLEdBQUYsRUFBT0MsUUFBUCxFQUFxQjtBQUMzQyxNQUFJQyxJQUFJLEVBQUVDLE9BQU8sU0FBVCxFQUFvQkMsdUJBQXVCSCxRQUEzQyxFQUFxREksdUJBQXVCSixRQUE1RSxFQUFSO0FBQ0EsU0FBTyxJQUFJSyxLQUFLQyxZQUFULENBQXVCLE9BQXZCLEVBQWdDTCxDQUFoQyxFQUFvQ00sTUFBcEMsQ0FBNENSLEdBQTVDLENBQVA7QUFDRCxDQUhEOztBQUtBO0FBQ0FGLElBQUlDLE1BQUosQ0FBWSxRQUFaLEVBQXNCLFVBQUVVLEdBQUYsRUFBT0MsR0FBUCxFQUFnQjtBQUNwQ0QsUUFBTUUsT0FBUUYsT0FBTyxFQUFmLEVBQW9CRyxPQUFwQixDQUE2Qix1QkFBN0IsRUFBc0QsR0FBdEQsRUFBNERBLE9BQTVELENBQXFFLFFBQXJFLEVBQStFLEdBQS9FLEVBQXFGQyxJQUFyRixFQUFOO0FBQ0EsU0FBT0osT0FBT0UsT0FBUUQsT0FBTyxFQUFmLENBQWQ7QUFDRCxDQUhEIiwiZmlsZSI6IjAuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIFZ1ZSBjdXN0b20gZmlsdGVyc1xuICovXG5cbi8vIGNvbW1hIHNlcGFyYXRlIGxvbmcgbnVtZXJpY2FsIHZhbHVlc1xuVnVlLmZpbHRlciggJ3RvQ29tbWFzJywgKCBudW0sIGRlY2ltYWxzICkgPT4ge1xuICBsZXQgbyA9IHsgc3R5bGU6ICdkZWNpbWFsJywgbWluaW11bUZyYWN0aW9uRGlnaXRzOiBkZWNpbWFscywgbWF4aW11bUZyYWN0aW9uRGlnaXRzOiBkZWNpbWFscyB9O1xuICByZXR1cm4gbmV3IEludGwuTnVtYmVyRm9ybWF0KCAnZW4tVVMnLCBvICkuZm9ybWF0KCBudW0gKTtcbn0pO1xuXG4vLyBzYW5pdGl6ZSB0ZXh0IGRhdGEgYnkgb25seSBhbGxvd2luZyBhbG51bXMgYW5kIHNvbWUgc3ltYm9sc1xuVnVlLmZpbHRlciggJ3RvVGV4dCcsICggc3RyLCBkZWYgKSA9PiB7XG4gIHN0ciA9IFN0cmluZyggc3RyIHx8ICcnICkucmVwbGFjZSggL1teXFx3XFxgXFwnXFwtXFwsXFwuXFwhXFw/XSsvZywgJyAnICkucmVwbGFjZSggL1xcc1xccysvZywgJyAnICkudHJpbSgpO1xuICByZXR1cm4gc3RyIHx8IFN0cmluZyggZGVmIHx8ICcnICk7XG59KTtcbiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///0\n")},function(module,exports){eval('/**\n * Vue component used to toggle channel favorite\n */\nVue.component(\'fav-btn\', {\n  props: {\n    id: { type: String, default: \'\', required: true },\n    active: { type: Boolean, default: false }\n  },\n  template: \'\\n    <button class="fav-btn" @click.stop="$emit( \\\'change\\\', id, !active )">\\n      <i v-if="active" class="fa fa-heart text-primary fx fx-drop-in" key="on"></i>\\n      <i v-else class="fa fa-heart-o fx fx-drop-in" key="off"></i>\\n    </button>\'\n});\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvanMvZmF2b3JpdGUuanM/ZmI3ZSJdLCJuYW1lcyI6WyJWdWUiLCJjb21wb25lbnQiLCJwcm9wcyIsImlkIiwidHlwZSIsIlN0cmluZyIsImRlZmF1bHQiLCJyZXF1aXJlZCIsImFjdGl2ZSIsIkJvb2xlYW4iLCJ0ZW1wbGF0ZSJdLCJtYXBwaW5ncyI6IkFBQUE7OztBQUdBQSxJQUFJQyxTQUFKLENBQWUsU0FBZixFQUEwQjtBQUN4QkMsU0FBTztBQUNMQyxRQUFJLEVBQUVDLE1BQU1DLE1BQVIsRUFBZ0JDLFNBQVMsRUFBekIsRUFBNkJDLFVBQVUsSUFBdkMsRUFEQztBQUVMQyxZQUFRLEVBQUVKLE1BQU1LLE9BQVIsRUFBaUJILFNBQVMsS0FBMUI7QUFGSCxHQURpQjtBQUt4Qkk7QUFMd0IsQ0FBMUIiLCJmaWxlIjoiMS5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogVnVlIGNvbXBvbmVudCB1c2VkIHRvIHRvZ2dsZSBjaGFubmVsIGZhdm9yaXRlXG4gKi9cblZ1ZS5jb21wb25lbnQoICdmYXYtYnRuJywge1xuICBwcm9wczoge1xuICAgIGlkOiB7IHR5cGU6IFN0cmluZywgZGVmYXVsdDogJycsIHJlcXVpcmVkOiB0cnVlIH0sXG4gICAgYWN0aXZlOiB7IHR5cGU6IEJvb2xlYW4sIGRlZmF1bHQ6IGZhbHNlIH0sXG4gIH0sXG4gIHRlbXBsYXRlOiBgXG4gICAgPGJ1dHRvbiBjbGFzcz1cImZhdi1idG5cIiBAY2xpY2suc3RvcD1cIiRlbWl0KCAnY2hhbmdlJywgaWQsICFhY3RpdmUgKVwiPlxuICAgICAgPGkgdi1pZj1cImFjdGl2ZVwiIGNsYXNzPVwiZmEgZmEtaGVhcnQgdGV4dC1wcmltYXJ5IGZ4IGZ4LWRyb3AtaW5cIiBrZXk9XCJvblwiPjwvaT5cbiAgICAgIDxpIHYtZWxzZSBjbGFzcz1cImZhIGZhLWhlYXJ0LW8gZnggZngtZHJvcC1pblwiIGtleT1cIm9mZlwiPjwvaT5cbiAgICA8L2J1dHRvbj5gLFxufSk7XG4iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///1\n')},function(module,__webpack_exports__,__webpack_require__){"use strict";eval('// ESM COMPAT FLAG\n__webpack_require__.r(__webpack_exports__);\n\n// EXTERNAL MODULE: ./src/scss/app.scss\nvar app = __webpack_require__(3);\n\n// EXTERNAL MODULE: ./src/js/filters.js\nvar filters = __webpack_require__(0);\n\n// EXTERNAL MODULE: ./src/js/favorite.js\nvar favorite = __webpack_require__(1);\n\n// CONCATENATED MODULE: ./src/js/station.js\n/**\n * Radio stations handler\n */\n/* harmony default export */ var station = ({\n\n  // get channels data from api\n  getChannels: function getChannels(callback) {\n    // const apiurl = \'https://somafm.com/channels.json\';\n    // const error  = \'There was a problem fetching the latest list of music channels from SomaFM.\';\n\n    var channels = { "channels": [\n      // {\n      //   "id": "ardan-radio-bandung",\n      //   "country": "id",\n      //   "country_display": "Indonesia",\n      //   "city_display": "Bandung",\n      //   "frequency": "105.9 FM",\n      //   "title": "Ardan Radio",\n      //   "stream_uri": "http://listento.ardanradio.com:1059/stream/1/",\n      //   "description": "Ardan is a favorite radio for young people in Bandung.",\n      //   "genre": "pop",\n      //   "largeimage": "/img/stations/3.jpg"\n      // },\n      // {\n      //   "id": "bens-radio-jakarta",\n      //   "country": "id",\n      //   "country_display": "Indonesia",\n      //   "city_display": "Jakarta",\n      //   "frequency": "106.2 FM",\n      //   "title": "Bens Radio",\n      //   "stream_uri": "http://175.103.58.72:8000/;stream.mp3",\n      //   "description": "The radio which has the tagline \'Betawi Punye Gaye Sele Aje Aje\' was created by the ideals of its founder to continue preserving the cultural traditions of the ancestors.",\n      //   "genre": "dangdut",\n      //   "largeimage": "/img/stations/4.jpg"\n      // },\n      {\n        "id": "thebeat-radio-plus-bali",\n        "country": "id",\n        "country_display": "Indonesia",\n        "city_display": "Denpasar, Bali",\n        "frequency": "98.5 FM",\n        "title": "The Beat Radio Plus",\n        "stream_uri": "https://streaming.radio.co/sf61c46912/listen",\n        "description": "Broadcasted from Bali with the finest electronic music and more.",\n        "genre": "pop",\n        "largeimage": "/img/stations/5.jpg"\n      }, {\n        "id": "brava-radio-jakarta",\n        "country": "id",\n        "country_display": "Indonesia",\n        "city_display": "Jakarta",\n        "frequency": "103.8 FM",\n        "title": "Brava Radio",\n        "stream_uri": "https://stream.radiojar.com/5k7t0rq3bnzuv",\n        "description": "Business radio station for business people and decision makers.",\n        "genre": "pop",\n        "largeimage": "/img/stations/2.jpg"\n      }, {\n        "id": "cosmopolitan-fm-jakarta",\n        "country": "id",\n        "country_display": "Indonesia",\n        "city_display": "Jakarta",\n        "frequency": "90.4 FM",\n        "title": "Cosmopolitan FM",\n        "stream_uri": "https://stream.radiojar.com/u7d8heq3bnzuv",\n        "description": "Aimed at active, dynamic, expressive, and broad-minded women.",\n        "genre": "pop",\n        "largeimage": "/img/stations/2.png"\n      },\n      // {\n      //   "id": "delta-fm-jakarta",\n      //   "country": "id",\n      //   "country_display": "Indonesia",\n      //   "city_display": "Jakarta",\n      //   "frequency": "99.1 FM",\n      //   "title": "Delta FM",\n      //   "stream_uri": "http://live.deltafm.net:9002/stream",\n      //   "description": "Delta FM is a radio station for young adults with a contemporary hot adult music format that plays the most delicious songs.",\n      //   "genre": "pop",\n      //   "largeimage": "/img/stations/3.png"\n      // },\n      {\n        "id": "hardrock-fm-jakarta",\n        "country": "id",\n        "country_display": "Indonesia",\n        "city_display": "Jakarta",\n        "frequency": "87.6 FM",\n        "title": "Hard Rock FM",\n        "stream_uri": "https://stream.radiojar.com/7csmg90fuqruv",\n        "description": "Plays music of all genres and provides information about lifestyle and entertainment.",\n        "genre": "pop",\n        "largeimage": "/img/stations/3.jpeg"\n      }, {\n        "id": "indika-fm-jakarta",\n        "country": "id",\n        "country_display": "Indonesia",\n        "city_display": "Jakarta",\n        "frequency": "91.6 FM",\n        "title": "Indika FM",\n        "stream_uri": "https://s2.radio.co/sf58a82d7d/listen",\n        "description": "Known as clubbing radio, their tagline is \\"Sounds of Jakarta\\".",\n        "genre": "pop|club",\n        "largeimage": "/img/stations/2.jpeg"\n      }, {\n        "id": "i-radio-jakarta",\n        "country": "id",\n        "country_display": "Indonesia",\n        "city_display": "Jakarta",\n        "frequency": "89.6 FM",\n        "title": "I-Radio",\n        "stream_uri": "https://stream.radiojar.com/4ywdgup3bnzuv",\n        "description": "Only plays 100 percent of Indonesian music with entertaining and inspirational content.",\n        "genre": "pop",\n        "largeimage": "/img/stations/1.jpeg"\n      }, {\n        "id": "prambors-jakarta",\n        "country": "id",\n        "country_display": "Indonesia",\n        "city_display": "Jakarta",\n        "frequency": "102.2 FM",\n        "title": "Prambors",\n        "stream_uri": "http://masima.rastream.com/masima-pramborsjakarta",\n        "description": "Indonesia No.1 Hit Music Station that play pop music for teenagers and young adults.",\n        "genre": "pop",\n        "largeimage": "/img/stations/1.png"\n      },\n      // {\n      //   "id": "suarasurabaya-surabaya",\n      //   "country": "id",\n      //   "country_display": "Indonesia",\n      //   "city_display": "Surabaya",\n      //   "frequency": "100 FM",\n      //   "title": "Suara Surabaya",\n      //   "stream_uri": "http://s9.viastreaming.net:7020/stream/1/",\n      //   "description": "Suara Surabaya FM is a radio that provides news about Surabaya and national news.",\n      //   "genre": "pop",\n      //   "largeimage": "/img/stations/4.jpeg"\n      // },\n      {\n        "id": "trax-fm-jakarta",\n        "country": "id",\n        "country_display": "Indonesia",\n        "city_display": "Jakarta",\n        "frequency": "101.4 FM",\n        "title": "Trax FM",\n        "stream_uri": "https://stream.radiojar.com/rrqf78p3bnzuv",\n        "description": "Youth radio station that carries the campaign \\"Hits What You Like\\"",\n        "genre": "pop",\n        "largeimage": "/img/stations/1.jpg"\n      }] };\n\n    var list = this._parseChannels(channels.channels);\n    if (!list.length) return callback(error, []);\n    return callback(null, list);\n\n    // axios.get( apiurl ).then( res => {\n    //   const list = this._parseChannels( res.data.channels );      \n    //   if ( !list.length ) return callback( error, [] );\n    //   return callback( null, list );\n    // })\n    // .catch( e => {\n    //   return callback( error + String( e.message || \'\' ), [] );\n    // });\n  },\n\n\n  // fetch songs for a channel\n  getSongs: function getSongs(channel, callback) {\n    // const apiurl = \'\';\n    // const title  = channel.title || \'...\';\n    // const error  = \'There was a problem loading the list of songs for channel \'+ title +\' from SomaFM.\';\n\n    // axios.get( apiurl ).then( res => {\n    //   if ( !res.data.songs ) return callback( error, [] );\n    //   return callback( null, res.data.songs );\n    // })\n    // .catch( e => {\n    //   return callback( error + String( e.message || \'\' ), [] );\n    // });\n  },\n\n\n  // parse channels list from api response\n  _parseChannels: function _parseChannels(channels) {\n    var output = [];\n    if (Array.isArray(channels)) {\n      var _iteratorNormalCompletion = true;\n      var _didIteratorError = false;\n      var _iteratorError = undefined;\n\n      try {\n        for (var _iterator = channels[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n          var c = _step.value;\n\n          // if ( !Array.isArray( c.playlists ) ) continue;\n          c.stream_uri = c.stream_uri;\n          // c.plsfile   = \'\';\n          // c.mp3file   = \'\';\n          // c.songsurl  = \'\';\n          // c.infourl   = \'\';\n          // c.twitter   = \'\';\n          c.route = \'/channel/\' + c.country + \'/\' + c.id;\n          // c.listeners = 0;\n          // c.updated   = 0;\n          // c.favorite  = false;\n          // c.active    = false;\n          output.push(c);\n        }\n      } catch (err) {\n        _didIteratorError = true;\n        _iteratorError = err;\n      } finally {\n        try {\n          if (!_iteratorNormalCompletion && _iterator.return) {\n            _iterator.return();\n          }\n        } finally {\n          if (_didIteratorError) {\n            throw _iteratorError;\n          }\n        }\n      }\n    }\n    return output;\n  }\n});\n// CONCATENATED MODULE: ./src/js/audio.js\n/**\n * Audio handler object\n */\n/* harmony default export */ var audio = ({\n  _audio: new Audio(),\n  _context: null,\n  _freq: new Uint8Array(),\n  _source: null,\n  _gain: null,\n  _analyser: null,\n  _error_status: 0,\n\n  // setup audio routing\n  setupAudio: function setupAudio() {\n    // this._audio.addEventListener( \'canplaythrough\', e => {\n    //   // this._audio.play();\n    // });\n    return this._audio;\n  },\n\n\n  // update and return analyser frequency data\n  getFreqData: function getFreqData() {\n    return this._freq;\n  },\n\n\n  // set audio volume\n  setVolume: function setVolume(volume) {\n    // if ( !this._gain ) return;\n    volume = parseFloat(volume) || 0.0;\n    volume = volume < 0 ? 0 : volume;\n    volume = volume > 1 ? 1 : volume;\n    this._audio.volume = volume;\n    // this._gain.gain.value = volume;\n  },\n\n\n  // play audio source url\n  playSource: function playSource(source) {\n    this.stopAudio();\n    // this._audio.src = String( source || \'\' ) + \'?x=\' + Date.now();\n    this._audio.src = String(source || \'\');\n    // this._audio.src = \'http://bogor.nagaswarafm.com:8088/stream\';\n    // this._audio.load();\n    this._audio.volume = 1;\n    this._audio.play();\n  },\n\n\n  // stop playing audio\n  stopAudio: function stopAudio() {\n    try {\n      this._audio.pause();\n    } catch (e) {}\n    try {\n      this._audio.stop();\n    } catch (e) {}\n    try {\n      this._audio.close();\n    } catch (e) {}\n  }\n});\n// CONCATENATED MODULE: ./src/js/light.js\n/**\n * ThreeJS scene light object\n */\n/* harmony default export */ var light = ({\n  color: null,\n  light: null,\n\n  // create and add light to scene\n  create: function create(box, scene) {\n    this.color = new THREE.Color();\n    this.color.setHSL(0, .5, .5);\n\n    this.light = new THREE.PointLight(0xffffff, 4, 400);\n    this.light.position.set(0, 0, 420);\n    this.light.castShadow = false;\n    this.light.target = scene;\n    this.light.color = this.color;\n\n    scene.add(this.light);\n  },\n\n\n  // animate light on frame loop\n  update: function update(box, mouse, freq) {\n    var dist = Math.floor(freq[1] | 0) / 255;\n    var color = Math.floor(freq[16] | 0) / 255;\n\n    this.light.distance = 360 + 140 * dist;\n    this.color.setHSL(color, .5, .5);\n  }\n});\n// CONCATENATED MODULE: ./src/js/sphere.js\n/**\n * ThreeJS scene sphere object\n */\n/* harmony default export */ var sphere = ({\n  group: null,\n  shapes: [],\n  move: new THREE.Vector3(0, 0, 0),\n  ease: 8,\n\n  // create and add sphere to scene\n  create: function create(box, scene) {\n    this.group = new THREE.Object3D();\n    var shape1 = new THREE.CircleGeometry(1, 10);\n    var shape2 = new THREE.CircleGeometry(2, 20);\n    var points = new THREE.SphereGeometry(100, 30, 14).vertices;\n    var material = new THREE.MeshLambertMaterial({ color: 0xffffff, opacity: 0, side: THREE.DoubleSide });\n    var center = new THREE.Vector3(0, 0, 0);\n    var radius = 12;\n\n    for (var i = 0; i < points.length; i++) {\n      var _points$i = points[i],\n          x = _points$i.x,\n          y = _points$i.y,\n          z = _points$i.z;\n\n      var home = { x: x, y: y, z: z };\n      var cycle = THREE.Math.randInt(0, 100);\n      var pace = THREE.Math.randInt(10, 30);\n      var shape = new THREE.Mesh(i % 2 ? shape1 : shape2, material);\n\n      shape.position.set(x, y, z);\n      shape.lookAt(center);\n      shape.userData = { radius: radius, cycle: cycle, pace: pace, home: home };\n      this.group.add(shape);\n    }\n    this.group.position.set(500, 0, 0);\n    this.group.rotation.x = Math.PI / 2 + .6;\n    scene.add(this.group);\n  },\n\n\n  // animate sphere on frame loop\n  update: function update(box, mouse, freq) {\n    var bass = Math.floor(freq[1] | 0) / 255;\n    var xoff = box.width < 1080 ? 0 : 60;\n    var zoff = box.width < 1080 ? -80 : 10;\n\n    this.move.x = xoff + -(mouse.x * 0.015);\n    this.group.position.x += (this.move.x - this.group.position.x) / this.ease;\n    this.group.position.y += (this.move.y - this.group.position.y) / this.ease;\n    this.group.position.z = zoff + bass * 80;\n    this.group.rotation.y -= 0.003;\n\n    for (var i = 0; i < this.group.children.length; i++) {\n      var shape = this.group.children[i];\n      var _shape$userData = shape.userData,\n          radius = _shape$userData.radius,\n          cycle = _shape$userData.cycle,\n          pace = _shape$userData.pace,\n          home = _shape$userData.home;\n\n\n      shape.position.set(home.x, home.y, home.z);\n      shape.translateZ(bass * Math.sin(cycle / pace) * radius);\n      shape.userData.cycle++;\n    }\n  }\n});\n// CONCATENATED MODULE: ./src/js/scene.js\n/**\n * ThreeJS scene handler\n */\n\n\n\n/* harmony default export */ var scene = ({\n  _wrap: null,\n  _canvas: null,\n  _renderer: null,\n  _scene: null,\n  _camera: null,\n  _box: null,\n  _mouse: { x: 0, y: 0 },\n  _objects: [],\n\n  // setup animation canvas\n  setupCanvas: function setupCanvas() {\n    this._wrap = document.querySelector(\'#player-wrap\');\n    this._canvas = document.querySelector(\'#player-canvas\');\n    this._box = this._wrap.getBoundingClientRect();\n\n    // setup scene and renderer\n    this._scene = new THREE.Scene();\n    this._renderer = new THREE.WebGLRenderer({ canvas: this._canvas, alpha: true, antialias: true, precision: \'lowp\' });\n    this._renderer.setClearColor(0x000000, 0);\n    this._renderer.setPixelRatio(window.devicePixelRatio);\n\n    // setup camera\n    this._camera = new THREE.PerspectiveCamera(60, this._box.width / this._box.height, 0.1, 20000);\n    this._camera.lookAt(this._scene.position);\n    this._camera.position.set(0, 0, 300);\n    this._camera.rotation.set(0, 0, 0);\n\n    // add and create objects\n    this._objects.push(light);\n    this._objects.push(sphere);\n    var _iteratorNormalCompletion = true;\n    var _didIteratorError = false;\n    var _iteratorError = undefined;\n\n    try {\n      for (var _iterator = this._objects[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n        var o = _step.value;\n        o.create(this._box, this._scene);\n      } // setup events\n    } catch (err) {\n      _didIteratorError = true;\n      _iteratorError = err;\n    } finally {\n      try {\n        if (!_iteratorNormalCompletion && _iterator.return) {\n          _iterator.return();\n        }\n      } finally {\n        if (_didIteratorError) {\n          throw _iteratorError;\n        }\n      }\n    }\n\n    window.addEventListener(\'mousemove\', this.updateMouse.bind(this));\n    window.addEventListener(\'resize\', this.updateSize.bind(this));\n    this.updateMouse();\n    this.updateSize();\n  },\n\n\n  // update custom objects in 3d scene\n  updateObjects: function updateObjects(freq) {\n    var _iteratorNormalCompletion2 = true;\n    var _didIteratorError2 = false;\n    var _iteratorError2 = undefined;\n\n    try {\n      for (var _iterator2 = this._objects[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {\n        var o = _step2.value;\n        o.update(this._box, this._mouse, freq);\n      }\n    } catch (err) {\n      _didIteratorError2 = true;\n      _iteratorError2 = err;\n    } finally {\n      try {\n        if (!_iteratorNormalCompletion2 && _iterator2.return) {\n          _iterator2.return();\n        }\n      } finally {\n        if (_didIteratorError2) {\n          throw _iteratorError2;\n        }\n      }\n    }\n\n    this._renderer.render(this._scene, this._camera);\n  },\n\n\n  // update canvas size\n  updateSize: function updateSize() {\n    if (!this._wrap || !this._canvas) return;\n    this._box = this._wrap.getBoundingClientRect();\n    this._canvas.width = this._box.width;\n    this._canvas.height = this._box.height;\n    this._camera.aspect = this._box.width / this._box.height;\n    this._camera.updateProjectionMatrix();\n    this._renderer.setSize(this._box.width, this._box.height);\n  },\n\n\n  // update mouse position from center of canvas\n  updateMouse: function updateMouse(e) {\n    if (!this._box) return;\n    var centerX = this._box.left + this._box.width / 2;\n    var centerY = this._box.top + this._box.height / 2;\n\n    if (e) {\n      this._mouse.x = Math.max(0, e.pageX || e.clientX || 0) - centerX;\n      this._mouse.y = Math.max(0, e.pageY || e.clientY || 0) - centerY;\n    } else {\n      this._mouse.x = centerX;\n      this._mouse.y = centerY;\n    }\n  }\n});\n// CONCATENATED MODULE: ./src/js/utils.js\n/**\n * Common utils\n */\n/* harmony default export */ var utils = ({\n\n  // get search results off a list for an obj key\n  search: function search(list, key, _search) {\n    var regxp = new RegExp(\'^(\' + _search + \')\', \'i\');\n    return list.filter(function (item) {\n      return regxp.test(item[key]);\n    });\n  },\n\n\n  // sort objects in an array by a key\n  sort: function sort(list, key, order, ignore) {\n    return list.sort(function (a, b) {\n      if (a.hasOwnProperty(key)) {\n\n        var _a = a[key];\n        var _b = b[key];\n\n        if (ignore) {\n          // sort strings using same case\n          _a = typeof _a === \'string\' ? _a.toUpperCase() : _a;\n          _b = typeof _b === \'string\' ? _b.toUpperCase() : _b;\n        }\n        if (order === \'asc\') {\n          if (_a < _b) return -1;\n          if (_a > _b) return 1;\n        }\n        if (order === \'desc\') {\n          if (_a > _b) return -1;\n          if (_a < _b) return 1;\n        }\n      }\n      return 0;\n    });\n  }\n});\n// CONCATENATED MODULE: ./src/js/store.js\n/**\n * Basic localStorage wrapper\n */\n/* harmony default export */ var store = ({\n\n  // save data\n  set: function set(key, data, ttl) {\n    if (!this._isStr(key)) return;\n    var time = Date.now();\n    var expire = Number(ttl) || 0;\n    var json = JSON.stringify({ time: time, expire: expire, data: data });\n    window.localStorage.setItem(key, json);\n  },\n\n\n  // get saved data\n  get: function get(key) {\n    if (!this._isStr(key)) return;\n    var json = window.localStorage.getItem(key) || \'{}\';\n    var parsed = JSON.parse(json) || {};\n    var time = parsed.time,\n        expire = parsed.expire,\n        data = parsed.data;\n\n    if (this._isExpired(time, expire)) this.delete(key);\n    return data;\n  },\n\n\n  // remove saved data\n  delete: function _delete(key) {\n    if (!this._isStr(key)) return;\n    window.localStorage.removeItem(key);\n  },\n\n\n  // check valid string\n  _isStr: function _isStr(str) {\n    return str && typeof str === \'string\';\n  },\n\n\n  // check if data saved has expired\n  _isExpired: function _isExpired(time, expire) {\n    if (!time || !expire) return false;\n    var now = Date.now();\n    var secs = (now - time) / 1000;\n    return secs >= expire ? true : false;\n  }\n});\n// CONCATENATED MODULE: ./src/app.js\n/**\n * Main app JS entry file.\n */\n\n\n\n// import _soma from \'./js/soma\';\n\n\n\n\n\n\n// main vue app\nnew Vue({\n  el: \'#app\',\n  data: {\n    // toggles\n    init: false,\n    visible: true,\n    playing: false,\n    loading: false,\n    sidebar: false,\n    // volume: 0.5,\n    volume: 1,\n    // channels stuff\n    channels: [],\n    channel: {},\n    songs: [],\n    track: {},\n    favorites: [],\n    errors: {},\n    // timer stuff\n    timeStart: 0,\n    timeDisplay: \'00:00:00\',\n    timeItv: null,\n    // sorting stuff\n    searchText: \'\',\n    sortParam: \'listeners\',\n    sortOrder: \'desc\',\n    // timer stuff\n    anf: null,\n    sto: null,\n    itv: null\n    // gesture_action: false,\n  },\n\n  // watch methods\n  watch: {\n\n    // watch playing status\n    playing: function playing() {\n      if (this.playing) {\n        this.startClock();\n      } else {\n        this.stopClock();\n      }\n    },\n\n\n    // update player volume\n    volume: function volume() {\n      audio.setVolume(this.volume);\n    }\n  },\n\n  // computed methods\n  computed: {\n\n    // filter channels list\n    channelsList: function channelsList() {\n      var _this = this;\n\n      var list = this.channels.slice();\n      var search = this.searchText.replace(/[^\\w\\s\\-]+/g, \'\').replace(/[\\r\\s\\t\\n]+/g, \' \').trim();\n\n      if (search && search.length > 1) {\n        list = utils.search(list, \'title\', search);\n      }\n      if (this.sortParam) {\n        list = utils.sort(list, this.sortParam, this.sortOrder, true);\n      }\n      if (this.channel.id) {\n        list = list.map(function (i) {\n          i.active = _this.channel.id === i.id ? true : false;\n          return i;\n        });\n      }\n      return list;\n    },\n\n\n    // filter songs list\n    songsList: function songsList() {\n      var list = this.songs.slice();\n      return list;\n    },\n\n\n    // sort-by label for buttons, etc\n    sortLabel: function sortLabel() {\n      switch (this.sortParam) {\n        case \'title\':\n          return \'Station Name\';\n        case \'listeners\':\n          return \'Listeners Count\';\n        case \'favorite\':\n          return \'Saved Favorites\';\n        case \'genre\':\n          return \'Music Genre\';\n      }\n    },\n\n\n    // check if audio can be played\n    canPlay: function canPlay() {\n      return this.channel.id && !this.loading ? true : false;\n    },\n\n\n    // check if a channel is selected\n    hasChannel: function hasChannel() {\n      return this.channel.id ? true : false;\n    },\n\n\n    // check if there are tracks loaded\n    hasSongs: function hasSongs() {\n      return this.songs.length ? true : false;\n    },\n\n\n    // check for errors that would affect playback\n    hasError: function hasError() {\n      if (this.errors.channels && !this.channels.length) return true;\n      if (this.errors.stream) return true;\n      return false;\n    }\n  },\n\n  // custom methods\n  methods: {\n\n    // run maintenance tasks on a timer\n    setupMaintenance: function setupMaintenance() {\n      var _this2 = this;\n\n      this.itv = setInterval(function () {\n        _this2.getChannels(); // update channels\n        // this.getSongs( this.channel ); // update channel tracks\n      }, 1000 * 30);\n    },\n\n\n    // set an error message\n    setError: function setError(key, err) {\n      var errors = Object.assign({}, this.errors);\n      errors[key] = String(err || \'\').trim();\n      if (err) console.warn(\'ERROR(\' + key + \'):\', err);\n      this.errors = errors;\n    },\n\n\n    // check if an error has been set for a key\n    checkError: function checkError(key) {\n      return key && this.errors.hasOwnProperty(key) && this.errors[key];\n    },\n\n\n    // clear all error messages\n    clearErrors: function clearErrors() {\n      var _this3 = this;\n\n      Object.keys(this.errors).forEach(function (key) {\n        _this3.errors[key] = \'\';\n      });\n    },\n\n\n    // show player when app is mounted\n    initPlayer: function initPlayer() {\n      var _this4 = this;\n\n      document.querySelector(\'#_spnr\').style.display = \'none\';\n      document.querySelector(\'#player-wrap\').style.opacity = \'1\';\n      document.addEventListener(\'visibilitychange\', function (e) {\n        _this4.visible = document.visibilityState === \'visible\';\n      });\n      window.addEventListener(\'hashchange\', function (e) {\n        return _this4.applyRoute(window.location.hash);\n      });\n      window.addEventListener(\'keydown\', this.onKeyboard);\n      // window.addEventListener(\'click\', e => { this.gesture_action = true; });\n      // document.onclick = e => { this.gesture_action = true; };\n      this.init = true;\n    },\n\n\n    // reset selected channel\n    resetPlayer: function resetPlayer() {\n      this.closeAudio();\n      this.clearErrors();\n      this.channel = {};\n      this.songs = [];\n    },\n\n\n    // try resuming stream problem if possible\n    tryAgain: function tryAgain() {\n      this.clearErrors();\n      this.playChannel(this.channel);\n    },\n\n\n    // show/hide the sidebar\n    toggleSidebar: function toggleSidebar(toggle) {\n      this.sidebar = typeof toggle === \'boolean\' ? toggle : false;\n    },\n\n\n    // show sidebar at startup if there are no errors\n    initSidebar: function initSidebar() {\n      if (this.hasError) return;\n      // this.toggleSidebar( true );\n    },\n\n\n    // toggle stream playback for current selected channel\n    togglePlay: function togglePlay() {\n      if (this.loading) return;\n      if (this.playing) return this.closeAudio();\n      return this.playChannel(this.channel);\n    },\n\n\n    // load last sort options from store\n    loadSortOptions: function loadSortOptions() {\n      var opts = store.get(\'sorting_data\');\n      if (opts && opts.param) this.sortParam = opts.param;\n      if (opts && opts.order) this.sortOrder = opts.order;\n    },\n\n\n    // toggle sort order\n    toggleSortOrder: function toggleSortOrder() {\n      this.sortOrder = this.sortOrder === \'asc\' ? \'desc\' : \'asc\';\n    },\n\n\n    // apply sorting and toggle order\n    sortBy: function sortBy(param, order) {\n      if (this.sortParam === param) {\n        this.toggleSortOrder();\n      } else {\n        this.sortOrder = order || \'asc\';\n      }\n      this.sortParam = param;\n      store.set(\'sorting_data\', { param: this.sortParam, order: this.sortOrder });\n    },\n    goToHome: function goToHome() {\n      this.setRoute(\'/\');\n    },\n\n\n    // load saved favs list from store\n    loadFavorites: function loadFavorites() {\n      var favs = store.get(\'favorites_data\');\n      if (!Array.isArray(favs)) return;\n      this.favorites = favs;\n    },\n\n\n    // save favs to a .m3u file\n    saveFavorites: function saveFavorites() {\n      // let data = \'#EXTM3U\';\n      // for ( let id of this.favorites ) {\n      //   const channel = this.channels.filter( c => ( c.id === id ) ).shift();\n      //   if ( !channel ) continue;\n      //   data += \'\\n\\n\';\n      //   data += `#EXTINF:0,${channel.title} [SomaFM]\\n`;\n      //   data += `${channel.mp3file}`;\n      // }\n      // const elm = document.createElement( \'a\' );\n      // elm.setAttribute( \'href\', \'data:audio/mpegurl;charset=utf-8,\'+ encodeURIComponent( data ) );\n      // elm.setAttribute( \'download\', \'somafm_favorites.m3u\' );\n      // elm.setAttribute( \'target\', \'_blank\' );\n      // document.body.appendChild( elm );\n      // setTimeout( () => elm.click(), 100 );\n      // setTimeout( () => elm.remove(), 1000 );\n    },\n\n\n    // toggle favorite channel by id\n    toggleFavorite: function toggleFavorite(id, toggle) {\n      // let favs = this.favorites.slice();\n      // favs = favs.filter( fid => ( fid !== id ) );\n      // if ( toggle ) favs.push( id );\n      // this.favorites = favs;\n      // this.updateCurrentChannel();\n      // _store.set( \'favorites_data\', favs );\n    },\n\n\n    // setup audio routing and stream events\n    setupAudio: function setupAudio() {\n      var _this5 = this;\n\n      var a = audio.setupAudio();\n\n      a.addEventListener(\'waiting\', function (e) {\n        _this5.playing = false;\n        _this5.loading = true;\n\n        var sl = document.getElementById(\'station-logo\');\n        if (sl.classList.contains(\'fx-spin-right-station-logo\')) {\n          sl.classList.remove(\'fx-spin-right-station-logo\');\n        }\n      });\n      a.addEventListener(\'playing\', function (e) {\n        _this5.setError(\'stream\', \'\');\n        _this5.playing = true;\n        _this5.loading = false;\n\n        var sl = document.getElementById(\'station-logo\');\n        sl.classList.remove(\'fx-drop-in\');\n        sl.classList.add(\'fx-spin-right-station-logo\');\n      });\n      a.addEventListener(\'pause\', function (e) {\n        _this5.playing = false;\n        _this5.loading = false;\n\n        var sl = document.getElementById(\'station-logo\');\n        sl.classList.remove(\'fx-spin-right-station-logo\');\n      });\n      a.addEventListener(\'ended\', function (e) {\n        _this5.playing = false;\n        _this5.loading = false;\n      });\n      a.addEventListener(\'error\', function (e) {\n        _this5.closeAudio();\n        _this5.setError(\'stream\', \'The selected stream (\' + _this5.channel.title + \') could not load, or has stopped loading due to a network problem.\');\n        _this5.playing = false;\n        _this5.loading = false;\n      });\n    },\n\n\n    // close active audio\n    closeAudio: function closeAudio() {\n      audio.stopAudio();\n      this.playing = false;\n    },\n\n\n    // setup animation canvas\n    setupCanvas: function setupCanvas() {\n      scene.setupCanvas();\n    },\n\n\n    // audio visualizer animation loop\n    updateCanvas: function updateCanvas() {\n      this.anf = requestAnimationFrame(this.updateCanvas);\n      if (!this.visible) return;\n      var freq = audio.getFreqData();\n      scene.updateObjects(freq);\n    },\n\n\n    // get channels data from api\n    getChannels: function getChannels(sidebar) {\n      var _this6 = this;\n\n      station.getChannels(function (err, channels) {\n        if (err) return _this6.setError(\'channels\', err);\n        // this makes sidebar appear on startup, then I disable it\n        // if ( sidebar ) this.toggleSidebar( true );\n        _this6.channels = channels;\n        _this6.setError(\'channels\', \'\');\n        _this6.updateCurrentChannel();\n        _this6.applyRoute(window.location.hash);\n      });\n    },\n\n\n    // get songs list for a channel from api\n    // getSongs( channel, cb ) {\n    //   if ( !channel || !channel.id || !channel.songsurl ) return;\n    //   if ( !this.isCurrentChannel( channel ) ) { this.songs = []; this.track = {}; }\n\n    //   _soma.getSongs( channel, ( err, songs ) => {\n    //     if ( err ) return this.setError( \'songs\', err );\n    //     if ( typeof cb === \'function\' ) cb( songs );\n    //     this.track = songs.shift();\n    //     this.songs = songs.slice( 0, 3 );\n    //     this.setError( \'songs\', \'\' );\n    //   });\n    // },\n\n    // checks is a channel is currently selected\n    isCurrentChannel: function isCurrentChannel(channel) {\n      if (!channel || !channel.id || !this.channel.id) return false;\n      if (this.channel.id !== channel.id) return false;\n      return true;\n    },\n\n\n    // update data for current selected channel\n    updateCurrentChannel: function updateCurrentChannel() {\n      var _iteratorNormalCompletion = true;\n      var _didIteratorError = false;\n      var _iteratorError = undefined;\n\n      try {\n        for (var _iterator = this.channels[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n          var c = _step.value;\n\n          // see if channel has been saved as a favorite\n          c.favorite = this.favorites.indexOf(c.id) >= 0;\n          // see if channel is currently selected\n          if (this.isCurrentChannel(c)) {\n            this.channel = Object.assign(this.channel, c);\n            c.active = true;\n          }\n        }\n      } catch (err) {\n        _didIteratorError = true;\n        _iteratorError = err;\n      } finally {\n        try {\n          if (!_iteratorNormalCompletion && _iterator.return) {\n            _iterator.return();\n          }\n        } finally {\n          if (_didIteratorError) {\n            throw _iteratorError;\n          }\n        }\n      }\n    },\n\n\n    // play audio stream for a channel\n    playChannel: function playChannel(channel) {\n      // if(this.gesture_action == false) { this.gesture_action = true; return; }\n      // if ( this.playing || !channel || !channel.mp3file ) return;\n      if (this.playing || !channel) return;\n      this.loading = true;\n      this.clearErrors();\n      audio.playSource(channel.stream_uri);\n      audio.setVolume(this.volume);\n    },\n\n\n    // select a channel to play\n    selectChannel: function selectChannel(channel) {\n      if (!channel || !channel.id) return;\n      if (this.isCurrentChannel(channel)) return;\n      this.closeAudio();\n      this.toggleSidebar(false);\n      // this.playChannel( channel );\n      // this.getSongs( channel );\n      this.channel = channel;\n    },\n\n\n    // set station route\n    setRoute: function setRoute(route) {\n      route = \'/\' + String(route || \'\').replace(/^[\\#\\/]+|[\\/]+$/g, \'\').trim();\n      window.location.hash = route;\n    },\n\n\n    // parse url hash route actions\n    applyRoute: function applyRoute(route) {\n      var data = String(route || \'\').replace(/^[\\#\\/]+|[\\/]+$/g, \'\').trim().split(\'/\');\n      var action = data.length ? data.shift() : \'\';\n      var country = data.length ? data.shift() : \'\';\n      var param = data.length ? data.shift() : \'\';\n\n      if (!action) {\n        this.closeAudio();\n        this.resetPlayer();\n        return;\n      }\n      if (action === \'channel\' && param) {\n        var channel = this.channels.filter(function (c) {\n          return c.id === param;\n        }).shift();\n        this.selectChannel(channel);\n        return;\n      }\n    },\n\n\n    // on keyboard events\n    onKeyboard: function onKeyboard(e) {\n      var k = e.key || \'\';\n      if (k === \' \' && this.channel.id) return this.togglePlay();\n      if (k === \'Enter\') return this.toggleSidebar(true);\n      if (k === \'Escape\') return this.toggleSidebar(false);\n    },\n\n\n    // start tracking playback time\n    startClock: function startClock() {\n      this.stopClock();\n      this.timeStart = Date.now();\n      this.timeItv = setInterval(this.updateClock, 1000);\n      this.updateClock();\n    },\n\n\n    // update tracking playback time\n    updateClock: function updateClock() {\n      var p = function p(n) {\n        return n < 10 ? \'0\' + n : \'\' + n;\n      };\n      var elapsed = (Date.now() - this.timeStart) / 1000;\n      var seconds = Math.floor(elapsed % 60);\n      var minutes = Math.floor(elapsed / 60 % 60);\n      var hours = Math.floor(elapsed / 3600);\n      this.timeDisplay = p(hours) + \':\' + p(minutes) + \':\' + p(seconds);\n    },\n\n\n    // stop tracking playback time\n    stopClock: function stopClock() {\n      if (this.timeItv) clearInterval(this.timeItv);\n      this.timeItv = null;\n    },\n\n\n    // clear timer refs\n    clearTimers: function clearTimers() {\n      if (this.sto) clearTimeout(this.sto);\n      if (this.itv) clearInterval(this.itv);\n      if (this.anf) cancelAnimationFrame(this.anf);\n    }\n  },\n\n  // on app mounted\n  mounted: function mounted() {\n    this.loadSortOptions();\n    this.loadFavorites();\n    this.getChannels(true);\n    this.setupAudio();\n    this.setupCanvas();\n    this.updateCanvas();\n    this.setupMaintenance();\n    this.initPlayer();\n  },\n\n\n  // on app destroyed\n  destroyed: function destroyed() {\n    this.closeAudio();\n    this.clearTimers();\n  }\n});\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvanMvc3RhdGlvbi5qcz9mMGRmIiwid2VicGFjazovLy8uL3NyYy9qcy9hdWRpby5qcz9iODQyIiwid2VicGFjazovLy8uL3NyYy9qcy9saWdodC5qcz8yYWZlIiwid2VicGFjazovLy8uL3NyYy9qcy9zcGhlcmUuanM/YTgzMSIsIndlYnBhY2s6Ly8vLi9zcmMvanMvc2NlbmUuanM/OWY5YSIsIndlYnBhY2s6Ly8vLi9zcmMvanMvdXRpbHMuanM/OTk0NCIsIndlYnBhY2s6Ly8vLi9zcmMvanMvc3RvcmUuanM/NmFiMSIsIndlYnBhY2s6Ly8vLi9zcmMvYXBwLmpzPzExMTIiXSwibmFtZXMiOlsiZ2V0Q2hhbm5lbHMiLCJjYWxsYmFjayIsImNoYW5uZWxzIiwibGlzdCIsIl9wYXJzZUNoYW5uZWxzIiwibGVuZ3RoIiwiZXJyb3IiLCJnZXRTb25ncyIsImNoYW5uZWwiLCJvdXRwdXQiLCJBcnJheSIsImlzQXJyYXkiLCJjIiwic3RyZWFtX3VyaSIsInJvdXRlIiwiY291bnRyeSIsImlkIiwicHVzaCIsIl9hdWRpbyIsIkF1ZGlvIiwiX2NvbnRleHQiLCJfZnJlcSIsIlVpbnQ4QXJyYXkiLCJfc291cmNlIiwiX2dhaW4iLCJfYW5hbHlzZXIiLCJfZXJyb3Jfc3RhdHVzIiwic2V0dXBBdWRpbyIsImdldEZyZXFEYXRhIiwic2V0Vm9sdW1lIiwidm9sdW1lIiwicGFyc2VGbG9hdCIsInBsYXlTb3VyY2UiLCJzb3VyY2UiLCJzdG9wQXVkaW8iLCJzcmMiLCJTdHJpbmciLCJwbGF5IiwicGF1c2UiLCJlIiwic3RvcCIsImNsb3NlIiwiY29sb3IiLCJsaWdodCIsImNyZWF0ZSIsImJveCIsInNjZW5lIiwiVEhSRUUiLCJDb2xvciIsInNldEhTTCIsIlBvaW50TGlnaHQiLCJwb3NpdGlvbiIsInNldCIsImNhc3RTaGFkb3ciLCJ0YXJnZXQiLCJhZGQiLCJ1cGRhdGUiLCJtb3VzZSIsImZyZXEiLCJkaXN0IiwiTWF0aCIsImZsb29yIiwiZGlzdGFuY2UiLCJncm91cCIsInNoYXBlcyIsIm1vdmUiLCJWZWN0b3IzIiwiZWFzZSIsIk9iamVjdDNEIiwic2hhcGUxIiwiQ2lyY2xlR2VvbWV0cnkiLCJzaGFwZTIiLCJwb2ludHMiLCJTcGhlcmVHZW9tZXRyeSIsInZlcnRpY2VzIiwibWF0ZXJpYWwiLCJNZXNoTGFtYmVydE1hdGVyaWFsIiwib3BhY2l0eSIsInNpZGUiLCJEb3VibGVTaWRlIiwiY2VudGVyIiwicmFkaXVzIiwiaSIsIngiLCJ5IiwieiIsImhvbWUiLCJjeWNsZSIsInJhbmRJbnQiLCJwYWNlIiwic2hhcGUiLCJNZXNoIiwibG9va0F0IiwidXNlckRhdGEiLCJyb3RhdGlvbiIsIlBJIiwiYmFzcyIsInhvZmYiLCJ3aWR0aCIsInpvZmYiLCJjaGlsZHJlbiIsInRyYW5zbGF0ZVoiLCJzaW4iLCJfd3JhcCIsIl9jYW52YXMiLCJfcmVuZGVyZXIiLCJfc2NlbmUiLCJfY2FtZXJhIiwiX2JveCIsIl9tb3VzZSIsIl9vYmplY3RzIiwic2V0dXBDYW52YXMiLCJkb2N1bWVudCIsInF1ZXJ5U2VsZWN0b3IiLCJnZXRCb3VuZGluZ0NsaWVudFJlY3QiLCJTY2VuZSIsIldlYkdMUmVuZGVyZXIiLCJjYW52YXMiLCJhbHBoYSIsImFudGlhbGlhcyIsInByZWNpc2lvbiIsInNldENsZWFyQ29sb3IiLCJzZXRQaXhlbFJhdGlvIiwid2luZG93IiwiZGV2aWNlUGl4ZWxSYXRpbyIsIlBlcnNwZWN0aXZlQ2FtZXJhIiwiaGVpZ2h0IiwiTGlnaHQiLCJTcGhlcmUiLCJvIiwiYWRkRXZlbnRMaXN0ZW5lciIsInVwZGF0ZU1vdXNlIiwiYmluZCIsInVwZGF0ZVNpemUiLCJ1cGRhdGVPYmplY3RzIiwicmVuZGVyIiwiYXNwZWN0IiwidXBkYXRlUHJvamVjdGlvbk1hdHJpeCIsInNldFNpemUiLCJjZW50ZXJYIiwibGVmdCIsImNlbnRlclkiLCJ0b3AiLCJtYXgiLCJwYWdlWCIsImNsaWVudFgiLCJwYWdlWSIsImNsaWVudFkiLCJzZWFyY2giLCJrZXkiLCJyZWd4cCIsIlJlZ0V4cCIsImZpbHRlciIsInRlc3QiLCJpdGVtIiwic29ydCIsIm9yZGVyIiwiaWdub3JlIiwiYSIsImIiLCJoYXNPd25Qcm9wZXJ0eSIsIl9hIiwiX2IiLCJ0b1VwcGVyQ2FzZSIsImRhdGEiLCJ0dGwiLCJfaXNTdHIiLCJ0aW1lIiwiRGF0ZSIsIm5vdyIsImV4cGlyZSIsIk51bWJlciIsImpzb24iLCJKU09OIiwic3RyaW5naWZ5IiwibG9jYWxTdG9yYWdlIiwic2V0SXRlbSIsImdldCIsImdldEl0ZW0iLCJwYXJzZWQiLCJwYXJzZSIsIl9pc0V4cGlyZWQiLCJkZWxldGUiLCJyZW1vdmVJdGVtIiwic3RyIiwic2VjcyIsIlZ1ZSIsImVsIiwiaW5pdCIsInZpc2libGUiLCJwbGF5aW5nIiwibG9hZGluZyIsInNpZGViYXIiLCJzb25ncyIsInRyYWNrIiwiZmF2b3JpdGVzIiwiZXJyb3JzIiwidGltZVN0YXJ0IiwidGltZURpc3BsYXkiLCJ0aW1lSXR2Iiwic2VhcmNoVGV4dCIsInNvcnRQYXJhbSIsInNvcnRPcmRlciIsImFuZiIsInN0byIsIml0diIsIndhdGNoIiwic3RhcnRDbG9jayIsInN0b3BDbG9jayIsImNvbXB1dGVkIiwiY2hhbm5lbHNMaXN0Iiwic2xpY2UiLCJyZXBsYWNlIiwidHJpbSIsIl91dGlscyIsIm1hcCIsImFjdGl2ZSIsInNvbmdzTGlzdCIsInNvcnRMYWJlbCIsImNhblBsYXkiLCJoYXNDaGFubmVsIiwiaGFzU29uZ3MiLCJoYXNFcnJvciIsInN0cmVhbSIsIm1ldGhvZHMiLCJzZXR1cE1haW50ZW5hbmNlIiwic2V0SW50ZXJ2YWwiLCJzZXRFcnJvciIsImVyciIsIk9iamVjdCIsImFzc2lnbiIsImNvbnNvbGUiLCJ3YXJuIiwiY2hlY2tFcnJvciIsImNsZWFyRXJyb3JzIiwia2V5cyIsImZvckVhY2giLCJpbml0UGxheWVyIiwic3R5bGUiLCJkaXNwbGF5IiwidmlzaWJpbGl0eVN0YXRlIiwiYXBwbHlSb3V0ZSIsImxvY2F0aW9uIiwiaGFzaCIsIm9uS2V5Ym9hcmQiLCJyZXNldFBsYXllciIsImNsb3NlQXVkaW8iLCJ0cnlBZ2FpbiIsInBsYXlDaGFubmVsIiwidG9nZ2xlU2lkZWJhciIsInRvZ2dsZSIsImluaXRTaWRlYmFyIiwidG9nZ2xlUGxheSIsImxvYWRTb3J0T3B0aW9ucyIsIm9wdHMiLCJfc3RvcmUiLCJwYXJhbSIsInRvZ2dsZVNvcnRPcmRlciIsInNvcnRCeSIsImdvVG9Ib21lIiwic2V0Um91dGUiLCJsb2FkRmF2b3JpdGVzIiwiZmF2cyIsInNhdmVGYXZvcml0ZXMiLCJ0b2dnbGVGYXZvcml0ZSIsInNsIiwiZ2V0RWxlbWVudEJ5SWQiLCJjbGFzc0xpc3QiLCJjb250YWlucyIsInJlbW92ZSIsInRpdGxlIiwidXBkYXRlQ2FudmFzIiwicmVxdWVzdEFuaW1hdGlvbkZyYW1lIiwiX3N0YXRpb24iLCJ1cGRhdGVDdXJyZW50Q2hhbm5lbCIsImlzQ3VycmVudENoYW5uZWwiLCJmYXZvcml0ZSIsImluZGV4T2YiLCJzZWxlY3RDaGFubmVsIiwic3BsaXQiLCJhY3Rpb24iLCJzaGlmdCIsImsiLCJ1cGRhdGVDbG9jayIsInAiLCJuIiwiZWxhcHNlZCIsInNlY29uZHMiLCJtaW51dGVzIiwiaG91cnMiLCJjbGVhckludGVydmFsIiwiY2xlYXJUaW1lcnMiLCJjbGVhclRpbWVvdXQiLCJjYW5jZWxBbmltYXRpb25GcmFtZSIsIm1vdW50ZWQiLCJkZXN0cm95ZWQiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7QUFBQTs7O0FBR2U7O0FBRWI7QUFDQUEsYUFIYSx1QkFHQUMsUUFIQSxFQUdXO0FBQ3RCO0FBQ0E7O0FBRUEsUUFBTUMsV0FBVyxFQUFDLFlBQVk7QUFDWjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNFLGNBQU0seUJBRFI7QUFFRSxtQkFBVyxJQUZiO0FB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O0FBQ0EsU0FBS1EsYUFBTDtBQUNBLFNBQUtyUSxXQUFMLENBQWtCLElBQWxCO0FBQ0EsU0FBSzJCLFVBQUw7QUFDQSxTQUFLb0YsV0FBTDtBQUNBLFNBQUtnSyxZQUFMO0FBQ0EsU0FBSzlDLGdCQUFMO0FBQ0EsU0FBS1ksVUFBTDtBQUNELEdBamNLOzs7QUFtY047QUFDQTBELFdBcGNNLHVCQW9jTTtBQUNWLFNBQUtqRCxVQUFMO0FBQ0EsU0FBSzZDLFdBQUw7QUFDRDtBQXZjSyxDQUFSIiwiZmlsZSI6IjIuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIFJhZGlvIHN0YXRpb25zIGhhbmRsZXJcbiAqL1xuZXhwb3J0IGRlZmF1bHQge1xuXG4gIC8vIGdldCBjaGFubmVscyBkYXRhIGZyb20gYXBpXG4gIGdldENoYW5uZWxzKCBjYWxsYmFjayApIHtcbiAgICAvLyBjb25zdCBhcGl1cmwgPSAnaHR0cHM6Ly9zb21hZm0uY29tL2NoYW5uZWxzLmpzb24nO1xuICAgIC8vIGNvbnN0IGVycm9yICA9ICdUaGVyZSB3YXMgYSBwcm9ibGVtIGZldGNoaW5nIHRoZSBsYXRlc3QgbGlzdCBvZiBtdXNpYyBjaGFubmVscyBmcm9tIFNvbWFGTS4nO1xuXG4gICAgY29uc3QgY2hhbm5lbHMgPSB7XCJjaGFubmVsc1wiOiBbXG4gICAgICAgICAgICAgICAgICAgICAgLy8ge1xuICAgICAgICAgICAgICAgICAgICAgIC8vICAgXCJpZFwiOiBcImFyZGFuLXJhZGlvLWJhbmR1bmdcIixcbiAgICAgICAgICAgICAgICAgICAgICAvLyAgIFwiY291bnRyeVwiOiBcImlkXCIsXG4gICAgICAgICAgICAgICAgICAgICAgLy8gICBcImNvdW50cnlfZGlzcGxheVwiOiBcIkluZG9uZXNpYVwiLFxuICAgICAgICAgICAgICAgICAgICAgIC8vICAgXCJjaXR5X2Rpc3BsYXlcIjogXCJCYW5kdW5nXCIsXG4gICAgICAgICAgICAgICAgICAgICAgLy8gICBcImZyZXF1ZW5jeVwiOiBcIjEwNS45IEZNXCIsXG4gICAgICAgICAgICAgICAgICAgICAgLy8gICBcInRpdGxlXCI6IFwiQXJkYW4gUmFkaW9cIixcbiAgICAgICAgICAgICAgICAgICAgICAvLyAgIFwic3RyZWFtX3VyaVwiOiBcImh0dHA6Ly9saXN0ZW50by5hcmRhbnJhZGlvLmNvbToxMDU5L3N0cmVhbS8xL1wiLFxuICAgICAgICAgICAgICAgICAgICAgIC8vICAgXCJkZXNjcmlwdGlvblwiOiBcIkFyZGFuIGlzIGEgZmF2b3JpdGUgcmFkaW8gZm9yIHlvdW5nIHBlb3BsZSBpbiBCYW5kdW5nLlwiLFxuICAgICAgICAgICAgICAgICAgICAgIC8vICAgXCJnZW5yZVwiOiBcInBvcFwiLFxuICAgICAgICAgICAgICAgICAgICAgIC8vICAgXCJsYXJnZWltYWdlXCI6IFwiL2ltZy9zdGF0aW9ucy8zLmpwZ1wiXG4gICAgICAgICAgICAgICAgICAgICAgLy8gfSxcbiAgICAgICAgICAgICAgICAgICAgICAvLyB7XG4gICAgICAgICAgICAgICAgICAgICAgLy8gICBcImlkXCI6IFwiYmVucy1yYWRpby1qYWthcnRhXCIsXG4gICAgICAgICAgICAgICAgICAgICAgLy8gICBcImNvdW50cnlcIjogXCJpZFwiLFxuICAgICAgICAgICAgICAgICAgICAgIC8vICAgXCJjb3VudHJ5X2Rpc3BsYXlcIjogXCJJbmRvbmVzaWFcIixcbiAgICAgICAgICAgICAgICAgICAgICAvLyAgIFwiY2l0eV9kaXNwbGF5XCI6IFwiSmFrYXJ0YVwiLFxuICAgICAgICAgICAgICAgICAgICAgIC8vICAgXCJmcmVxdWVuY3lcIjogXCIxMDYuMiBGTVwiLFxuICAgICAgICAgICAgICAgICAgICAgIC8vICAgXCJ0aXRsZVwiOiBcIkJlbnMgUmFkaW9cIixcbiAgICAgICAgICAgICAgICAgICAgICAvLyAgIFwic3RyZWFtX3VyaVwiOiBcImh0dHA6Ly8xNzUuMTAzLjU4LjcyOjgwMDAvO3N0cmVhbS5tcDNcIixcbiAgICAgICAgICAgICAgICAgICAgICAvLyAgIFwiZGVzY3JpcHRpb25cIjogXCJUaGUgcmFkaW8gd2hpY2ggaGFzIHRoZSB0YWdsaW5lICdCZXRhd2kgUHVueWUgR2F5ZSBTZWxlIEFqZSBBamUnIHdhcyBjcmVhdGVkIGJ5IHRoZSBpZGVhbHMgb2YgaXRzIGZvdW5kZXIgdG8gY29udGludWUgcHJlc2VydmluZyB0aGUgY3VsdHVyYWwgdHJhZGl0aW9ucyBvZiB0aGUgYW5jZXN0b3JzLlwiLFxuICAgICAgICAgICAgICAgICAgICAgIC8vICAgXCJnZW5yZVwiOiBcImRhbmdkdXRcIixcbiAgICAgICAgICAgICAgICAgICAgICAvLyAgIFwibGFyZ2VpbWFnZVwiOiBcIi9pbWcvc3RhdGlvbnMvNC5qcGdcIlxuICAgICAgICAgICAgICAgICAgICAgIC8vIH0sXG4gICAgICAgICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICAgICAgXCJpZFwiOiBcInRoZWJlYXQtcmFkaW8tcGx1cy1iYWxpXCIsXG4gICAgICAgICAgICAgICAgICAgICAgICBcImNvdW50cnlcIjogXCJpZFwiLFxuICAgICAgICAgICAgICAgICAgICAgICAgXCJjb3VudHJ5X2Rpc3BsYXlcIjogXCJJbmRvbmVzaWFcIixcbiAgICAgICAgICAgICAgICAgICAgICAgIFwiY2l0eV9kaXNwbGF5XCI6IFwiRGVucGFzYXIsIEJhbGlcIixcbiAgICAgICAgICAgICAgICAgICAgICAgIFwiZnJlcXVlbmN5XCI6IFwiOTguNSBGTVwiLFxuICAgICAgICAgICAgICAgICAgICAgICAgXCJ0aXRsZVwiOiBcIlRoZSBCZWF0IFJhZGlvIFBsdXNcIixcbiAgICAgICAgICAgICAgICAgICAgICAgIFwic3RyZWFtX3VyaVwiOiBcImh0dHBzOi8vc3RyZWFtaW5nLnJhZGlvLmNvL3NmNjFjNDY5MTIvbGlzdGVuXCIsXG4gICAgICAgICAgICAgICAgICAgICAgICBcImRlc2NyaXB0aW9uXCI6IFwiQnJvYWRjYXN0ZWQgZnJvbSBCYWxpIHdpdGggdGhlIGZpbmVzdCBlbGVjdHJvbmljIG11c2ljIGFuZCBtb3JlLlwiLFxuICAgICAgICAgICAgICAgICAgICAgICAgXCJnZW5yZVwiOiBcInBvcFwiLFxuICAgICAgICAgICAgICAgICAgICAgICAgXCJsYXJnZWltYWdlXCI6IFwiL2ltZy9zdGF0aW9ucy81LmpwZ1wiXG4gICAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgICAgICBcImlkXCI6IFwiYnJhdmEtcmFkaW8tamFrYXJ0YVwiLFxuICAgICAgICAgICAgICAgICAgICAgICAgXCJjb3VudHJ5XCI6IFwiaWRcIixcbiAgICAgICAgICAgICAgICAgICAgICAgIFwiY291bnRyeV9kaXNwbGF5XCI6IFwiSW5kb25lc2lhXCIsXG4gICAgICAgICAgICAgICAgICAgICAgICBcImNpdHlfZGlzcGxheVwiOiBcIkpha2FydGFcIixcbiAgICAgICAgICAgICAgICAgICAgICAgIFwiZnJlcXVlbmN5XCI6IFwiMTAzLjggRk1cIixcbiAgICAgICAgICAgICAgICAgICAgICAgIFwidGl0bGVcIjogXCJCcmF2YSBSYWRpb1wiLFxuICAgICAgICAgICAgICAgICAgICAgICAgXCJzdHJlYW1fdXJpXCI6IFwiaHR0cHM6Ly9zdHJlYW0ucmFkaW9qYXIuY29tLzVrN3QwcnEzYm56dXZcIixcbiAgICAgICAgICAgICAgICAgICAgICAgIFwiZGVzY3JpcHRpb25cIjogXCJCdXNpbmVzcyByYWRpbyBzdGF0aW9uIGZvciBidXNpbmVzcyBwZW9wbGUgYW5kIGRlY2lzaW9uIG1ha2Vycy5cIixcbiAgICAgICAgICAgICAgICAgICAgICAgIFwiZ2VucmVcIjogXCJwb3BcIixcbiAgICAgICAgICAgICAgICAgICAgICAgIFwibGFyZ2VpbWFnZVwiOiBcIi9pbWcvc3RhdGlvbnMvMi5qcGdcIlxuICAgICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICAgICAgXCJpZFwiOiBcImNvc21vcG9saXRhbi1mbS1qYWthcnRhXCIsXG4gICAgICAgICAgICAgICAgICAgICAgICBcImNvdW50cnlcIjogXCJpZFwiLFxuICAgICAgICAgICAgICAgICAgICAgICAgXCJjb3VudHJ5X2Rpc3BsYXlcIjogXCJJbmRvbmVzaWFcIixcbiAgICAgICAgICAgICAgICAgICAgICAgIFwiY2l0eV9kaXNwbGF5XCI6IFwiSmFrYXJ0YVwiLFxuICAgICAgICAgICAgICAgICAgICAgICAgXCJmcmVxdWVuY3lcIjogXCI5MC40IEZNXCIsXG4gICAgICAgICAgICAgICAgICAgICAgICBcInRpdGxlXCI6IFwiQ29zbW9wb2xpdGFuIEZNXCIsXG4gICAgICAgICAgICAgICAgICAgICAgICBcInN0cmVhbV91cmlcIjogXCJodHRwczovL3N0cmVhbS5yYWRpb2phci5jb20vdTdkOGhlcTNibnp1dlwiLFxuICAgICAgICAgICAgICAgICAgICAgICAgXCJkZXNjcmlwdGlvblwiOiBcIkFpbWVkIGF0IGFjdGl2ZSwgZHluYW1pYywgZXhwcmVzc2l2ZSwgYW5kIGJyb2FkLW1pbmRlZCB3b21lbi5cIixcbiAgICAgICAgICAgICAgICAgICAgICAgIFwiZ2VucmVcIjogXCJwb3BcIixcbiAgICAgICAgICAgICAgICAgICAgICAgIFwibGFyZ2VpbWFnZVwiOiBcIi9pbWcvc3RhdGlvbnMvMi5wbmdcIlxuICAgICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgICAgLy8ge1xuICAgICAgICAgICAgICAgICAgICAgIC8vICAgXCJpZFwiOiBcImRlbHRhLWZtLWpha2FydGFcIixcbiAgICAgICAgICAgICAgICAgICAgICAvLyAgIFwiY291bnRyeVwiOiBcImlkXCIsXG4gICAgICAgICAgICAgICAgICAgICAgLy8gICBcImNvdW50cnlfZGlzcGxheVwiOiBcIkluZG9uZXNpYVwiLFxuICAgICAgICAgICAgICAgICAgICAgIC8vICAgXCJjaXR5X2Rpc3BsYXlcIjogXCJKYWthcnRhXCIsXG4gICAgICAgICAgICAgICAgICAgICAgLy8gICBcImZyZXF1ZW5jeVwiOiBcIjk5LjEgRk1cIixcbiAgICAgICAgICAgICAgICAgICAgICAvLyAgIFwidGl0bGVcIjogXCJEZWx0YSBGTVwiLFxuICAgICAgICAgICAgICAgICAgICAgIC8vICAgXCJzdHJlYW1fdXJpXCI6IFwiaHR0cDovL2xpdmUuZGVsdGFmbS5uZXQ6OTAwMi9zdHJlYW1cIixcbiAgICAgICAgICAgICAgICAgICAgICAvLyAgIFwiZGVzY3JpcHRpb25cIjogXCJEZWx0YSBGTSBpcyBhIHJhZGlvIHN0YXRpb24gZm9yIHlvdW5nIGFkdWx0cyB3aXRoIGEgY29udGVtcG9yYXJ5IGhvdCBhZHVsdCBtdXNpYyBmb3JtYXQgdGhhdCBwbGF5cyB0aGUgbW9zdCBkZWxpY2lvdXMgc29uZ3MuXCIsXG4gICAgICAgICAgICAgICAgICAgICAgLy8gICBcImdlbnJlXCI6IFwicG9wXCIsXG4gICAgICAgICAgICAgICAgICAgICAgLy8gICBcImxhcmdlaW1hZ2VcIjogXCIvaW1nL3N0YXRpb25zLzMucG5nXCJcbiAgICAgICAgICAgICAgICAgICAgICAvLyB9LFxuICAgICAgICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIFwiaWRcIjogXCJoYXJkcm9jay1mbS1qYWthcnRhXCIsXG4gICAgICAgICAgICAgICAgICAgICAgICBcImNvdW50cnlcIjogXCJpZFwiLFxuICAgICAgICAgICAgICAgICAgICAgICAgXCJjb3VudHJ5X2Rpc3BsYXlcIjogXCJJbmRvbmVzaWFcIixcbiAgICAgICAgICAgICAgICAgICAgICAgIFwiY2l0eV9kaXNwbGF5XCI6IFwiSmFrYXJ0YVwiLFxuICAgICAgICAgICAgICAgICAgICAgICAgXCJmcmVxdWVuY3lcIjogXCI4Ny42IEZNXCIsXG4gICAgICAgICAgICAgICAgICAgICAgICBcInRpdGxlXCI6IFwiSGFyZCBSb2NrIEZNXCIsXG4gICAgICAgICAgICAgICAgICAgICAgICBcInN0cmVhbV91cmlcIjogXCJodHRwczovL3N0cmVhbS5yYWRpb2phci5jb20vN2NzbWc5MGZ1cXJ1dlwiLFxuICAgICAgICAgICAgICAgICAgICAgICAgXCJkZXNjcmlwdGlvblwiOiBcIlBsYXlzIG11c2ljIG9mIGFsbCBnZW5yZXMgYW5kIHByb3ZpZGVzIGluZm9ybWF0aW9uIGFib3V0IGxpZmVzdHlsZSBhbmQgZW50ZXJ0YWlubWVudC5cIixcbiAgICAgICAgICAgICAgICAgICAgICAgIFwiZ2VucmVcIjogXCJwb3BcIixcbiAgICAgICAgICAgICAgICAgICAgICAgIFwibGFyZ2VpbWFnZVwiOiBcIi9pbWcvc3RhdGlvbnMvMy5qcGVnXCJcbiAgICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIFwiaWRcIjogXCJpbmRpa2EtZm0tamFrYXJ0YVwiLFxuICAgICAgICAgICAgICAgICAgICAgICAgXCJjb3VudHJ5XCI6IFwiaWRcIixcbiAgICAgICAgICAgICAgICAgICAgICAgIFwiY291bnRyeV9kaXNwbGF5XCI6IFwiSW5kb25lc2lhXCIsXG4gICAgICAgICAgICAgICAgICAgICAgICBcImNpdHlfZGlzcGxheVwiOiBcIkpha2FydGFcIixcbiAgICAgICAgICAgICAgICAgICAgICAgIFwiZnJlcXVlbmN5XCI6IFwiOTEuNiBGTVwiLFxuICAgICAgICAgICAgICAgICAgICAgICAgXCJ0aXRsZVwiOiBcIkluZGlrYSBGTVwiLFxuICAgICAgICAgICAgICAgICAgICAgICAgXCJzdHJlYW1fdXJpXCI6IFwiaHR0cHM6Ly9zMi5yYWRpby5jby9zZjU4YTgyZDdkL2xpc3RlblwiLFxuICAgICAgICAgICAgICAgICAgICAgICAgXCJkZXNjcmlwdGlvblwiOiBcIktub3duIGFzIGNsdWJiaW5nIHJhZGlvLCB0aGVpciB0YWdsaW5lIGlzIFxcXCJTb3VuZHMgb2YgSmFrYXJ0YVxcXCIuXCIsXG4gICAgICAgICAgICAgICAgICAgICAgICBcImdlbnJlXCI6IFwicG9wfGNsdWJcIixcbiAgICAgICAgICAgICAgICAgICAgICAgIFwibGFyZ2VpbWFnZVwiOiBcIi9pbWcvc3RhdGlvbnMvMi5qcGVnXCJcbiAgICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIFwiaWRcIjogXCJpLXJhZGlvLWpha2FydGFcIixcbiAgICAgICAgICAgICAgICAgICAgICAgIFwiY291bnRyeVwiOiBcImlkXCIsXG4gICAgICAgICAgICAgICAgICAgICAgICBcImNvdW50cnlfZGlzcGxheVwiOiBcIkluZG9uZXNpYVwiLFxuICAgICAgICAgICAgICAgICAgICAgICAgXCJjaXR5X2Rpc3BsYXlcIjogXCJKYWthcnRhXCIsXG4gICAgICAgICAgICAgICAgICAgICAgICBcImZyZXF1ZW5jeVwiOiBcIjg5LjYgRk1cIixcbiAgICAgICAgICAgICAgICAgICAgICAgIFwidGl0bGVcIjogXCJJLVJhZGlvXCIsXG4gICAgICAgICAgICAgICAgICAgICAgICBcInN0cmVhbV91cmlcIjogXCJodHRwczovL3N0cmVhbS5yYWRpb2phci5jb20vNHl3ZGd1cDNibnp1dlwiLFxuICAgICAgICAgICAgICAgICAgICAgICAgXCJkZXNjcmlwdGlvblwiOiBcIk9ubHkgcGxheXMgMTAwIHBlcmNlbnQgb2YgSW5kb25lc2lhbiBtdXNpYyB3aXRoIGVudGVydGFpbmluZyBhbmQgaW5zcGlyYXRpb25hbCBjb250ZW50LlwiLFxuICAgICAgICAgICAgICAgICAgICAgICAgXCJnZW5yZVwiOiBcInBvcFwiLFxuICAgICAgICAgICAgICAgICAgICAgICAgXCJsYXJnZWltYWdlXCI6IFwiL2ltZy9zdGF0aW9ucy8xLmpwZWdcIlxuICAgICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICAgICAgXCJpZFwiOiBcInByYW1ib3JzLWpha2FydGFcIixcbiAgICAgICAgICAgICAgICAgICAgICAgIFwiY291bnRyeVwiOiBcImlkXCIsXG4gICAgICAgICAgICAgICAgICAgICAgICBcImNvdW50cnlfZGlzcGxheVwiOiBcIkluZG9uZXNpYVwiLFxuICAgICAgICAgICAgICAgICAgICAgICAgXCJjaXR5X2Rpc3BsYXlcIjogXCJKYWthcnRhXCIsXG4gICAgICAgICAgICAgICAgICAgICAgICBcImZyZXF1ZW5jeVwiOiBcIjEwMi4yIEZNXCIsXG4gICAgICAgICAgICAgICAgICAgICAgICBcInRpdGxlXCI6IFwiUHJhbWJvcnNcIixcbiAgICAgICAgICAgICAgICAgICAgICAgIFwic3RyZWFtX3VyaVwiOiBcImh0dHA6Ly9tYXNpbWEucmFzdHJlYW0uY29tL21hc2ltYS1wcmFtYm9yc2pha2FydGFcIixcbiAgICAgICAgICAgICAgICAgICAgICAgIFwiZGVzY3JpcHRpb25cIjogXCJJbmRvbmVzaWEgTm8uMSBIaXQgTXVzaWMgU3RhdGlvbiB0aGF0IHBsYXkgcG9wIG11c2ljIGZvciB0ZWVuYWdlcnMgYW5kIHlvdW5nIGFkdWx0cy5cIixcbiAgICAgICAgICAgICAgICAgICAgICAgIFwiZ2VucmVcIjogXCJwb3BcIixcbiAgICAgICAgICAgICAgICAgICAgICAgIFwibGFyZ2VpbWFnZVwiOiBcIi9pbWcvc3RhdGlvbnMvMS5wbmdcIlxuICAgICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgICAgLy8ge1xuICAgICAgICAgICAgICAgICAgICAgIC8vICAgXCJpZFwiOiBcInN1YXJhc3VyYWJheWEtc3VyYWJheWFcIixcbiAgICAgICAgICAgICAgICAgICAgICAvLyAgIFwiY291bnRyeVwiOiBcImlkXCIsXG4gICAgICAgICAgICAgICAgICAgICAgLy8gICBcImNvdW50cnlfZGlzcGxheVwiOiBcIkluZG9uZXNpYVwiLFxuICAgICAgICAgICAgICAgICAgICAgIC8vICAgXCJjaXR5X2Rpc3BsYXlcIjogXCJTdXJhYmF5YVwiLFxuICAgICAgICAgICAgICAgICAgICAgIC8vICAgXCJmcmVxdWVuY3lcIjogXCIxMDAgRk1cIixcbiAgICAgICAgICAgICAgICAgICAgICAvLyAgIFwidGl0bGVcIjogXCJTdWFyYSBTdXJhYmF5YVwiLFxuICAgICAgICAgICAgICAgICAgICAgIC8vICAgXCJzdHJlYW1fdXJpXCI6IFwiaHR0cDovL3M5LnZpYXN0cmVhbWluZy5uZXQ6NzAyMC9zdHJlYW0vMS9cIixcbiAgICAgICAgICAgICAgICAgICAgICAvLyAgIFwiZGVzY3JpcHRpb25cIjogXCJTdWFyYSBTdXJhYmF5YSBGTSBpcyBhIHJhZGlvIHRoYXQgcHJvdmlkZXMgbmV3cyBhYm91dCBTdXJhYmF5YSBhbmQgbmF0aW9uYWwgbmV3cy5cIixcbiAgICAgICAgICAgICAgICAgICAgICAvLyAgIFwiZ2VucmVcIjogXCJwb3BcIixcbiAgICAgICAgICAgICAgICAgICAgICAvLyAgIFwibGFyZ2VpbWFnZVwiOiBcIi9pbWcvc3RhdGlvbnMvNC5qcGVnXCJcbiAgICAgICAgICAgICAgICAgICAgICAvLyB9LFxuICAgICAgICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIFwiaWRcIjogXCJ0cmF4LWZtLWpha2FydGFcIixcbiAgICAgICAgICAgICAgICAgICAgICAgIFwiY291bnRyeVwiOiBcImlkXCIsXG4gICAgICAgICAgICAgICAgICAgICAgICBcImNvdW50cnlfZGlzcGxheVwiOiBcIkluZG9uZXNpYVwiLFxuICAgICAgICAgICAgICAgICAgICAgICAgXCJjaXR5X2Rpc3BsYXlcIjogXCJKYWthcnRhXCIsXG4gICAgICAgICAgICAgICAgICAgICAgICBcImZyZXF1ZW5jeVwiOiBcIjEwMS40IEZNXCIsXG4gICAgICAgICAgICAgICAgICAgICAgICBcInRpdGxlXCI6IFwiVHJheCBGTVwiLFxuICAgICAgICAgICAgICAgICAgICAgICAgXCJzdHJlYW1fdXJpXCI6IFwiaHR0cHM6Ly9zdHJlYW0ucmFkaW9qYXIuY29tL3JycWY3OHAzYm56dXZcIixcbiAgICAgICAgICAgICAgICAgICAgICAgIFwiZGVzY3JpcHRpb25cIjogXCJZb3V0aCByYWRpbyBzdGF0aW9uIHRoYXQgY2FycmllcyB0aGUgY2FtcGFpZ24gXFxcIkhpdHMgV2hhdCBZb3UgTGlrZVxcXCJcIixcbiAgICAgICAgICAgICAgICAgICAgICAgIFwiZ2VucmVcIjogXCJwb3BcIixcbiAgICAgICAgICAgICAgICAgICAgICAgIFwibGFyZ2VpbWFnZVwiOiBcIi9pbWcvc3RhdGlvbnMvMS5qcGdcIlxuICAgICAgICAgICAgICAgICAgICAgIH0gICAgICAgICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgICAgIF19O1xuXG4gICAgY29uc3QgbGlzdCA9IHRoaXMuX3BhcnNlQ2hhbm5lbHMoIGNoYW5uZWxzLmNoYW5uZWxzICk7XG4gICAgaWYgKCAhbGlzdC5sZW5ndGggKSByZXR1cm4gY2FsbGJhY2soIGVycm9yLCBbXSApO1xuICAgIHJldHVybiBjYWxsYmFjayggbnVsbCwgbGlzdCApO1xuXG4gICAgLy8gYXhpb3MuZ2V0KCBhcGl1cmwgKS50aGVuKCByZXMgPT4ge1xuICAgIC8vICAgY29uc3QgbGlzdCA9IHRoaXMuX3BhcnNlQ2hhbm5lbHMoIHJlcy5kYXRhLmNoYW5uZWxzICk7ICAgICAgXG4gICAgLy8gICBpZiAoICFsaXN0Lmxlbmd0aCApIHJldHVybiBjYWxsYmFjayggZXJyb3IsIFtdICk7XG4gICAgLy8gICByZXR1cm4gY2FsbGJhY2soIG51bGwsIGxpc3QgKTtcbiAgICAvLyB9KVxuICAgIC8vIC5jYXRjaCggZSA9PiB7XG4gICAgLy8gICByZXR1cm4gY2FsbGJhY2soIGVycm9yICsgU3RyaW5nKCBlLm1lc3NhZ2UgfHwgJycgKSwgW10gKTtcbiAgICAvLyB9KTtcbiAgfSxcblxuICAvLyBmZXRjaCBzb25ncyBmb3IgYSBjaGFubmVsXG4gIGdldFNvbmdzKCBjaGFubmVsLCBjYWxsYmFjayApIHtcbiAgICAvLyBjb25zdCBhcGl1cmwgPSAnJztcbiAgICAvLyBjb25zdCB0aXRsZSAgPSBjaGFubmVsLnRpdGxlIHx8ICcuLi4nO1xuICAgIC8vIGNvbnN0IGVycm9yICA9ICdUaGVyZSB3YXMgYSBwcm9ibGVtIGxvYWRpbmcgdGhlIGxpc3Qgb2Ygc29uZ3MgZm9yIGNoYW5uZWwgJysgdGl0bGUgKycgZnJvbSBTb21hRk0uJztcblxuICAgIC8vIGF4aW9zLmdldCggYXBpdXJsICkudGhlbiggcmVzID0+IHtcbiAgICAvLyAgIGlmICggIXJlcy5kYXRhLnNvbmdzICkgcmV0dXJuIGNhbGxiYWNrKCBlcnJvciwgW10gKTtcbiAgICAvLyAgIHJldHVybiBjYWxsYmFjayggbnVsbCwgcmVzLmRhdGEuc29uZ3MgKTtcbiAgICAvLyB9KVxuICAgIC8vIC5jYXRjaCggZSA9PiB7XG4gICAgLy8gICByZXR1cm4gY2FsbGJhY2soIGVycm9yICsgU3RyaW5nKCBlLm1lc3NhZ2UgfHwgJycgKSwgW10gKTtcbiAgICAvLyB9KTtcbiAgfSxcblxuICAvLyBwYXJzZSBjaGFubmVscyBsaXN0IGZyb20gYXBpIHJlc3BvbnNlXG4gIF9wYXJzZUNoYW5uZWxzKCBjaGFubmVscyApIHtcbiAgICBsZXQgb3V0cHV0ID0gW107XG4gICAgaWYgKCBBcnJheS5pc0FycmF5KCBjaGFubmVscyApICkge1xuICAgICAgZm9yICggbGV0IGMgb2YgY2hhbm5lbHMgKSB7XG4gICAgICAgIC8vIGlmICggIUFycmF5LmlzQXJyYXkoIGMucGxheWxpc3RzICkgKSBjb250aW51ZTtcbiAgICAgICAgYy5zdHJlYW1fdXJpID0gYy5zdHJlYW1fdXJpO1xuICAgICAgICAvLyBjLnBsc2ZpbGUgICA9ICcnO1xuICAgICAgICAvLyBjLm1wM2ZpbGUgICA9ICcnO1xuICAgICAgICAvLyBjLnNvbmdzdXJsICA9ICcnO1xuICAgICAgICAvLyBjLmluZm91cmwgICA9ICcnO1xuICAgICAgICAvLyBjLnR3aXR0ZXIgICA9ICcnO1xuICAgICAgICBjLnJvdXRlICAgICA9ICcvY2hhbm5lbC8nICsgYy5jb3VudHJ5ICsgJy8nICsgYy5pZDtcbiAgICAgICAgLy8gYy5saXN0ZW5lcnMgPSAwO1xuICAgICAgICAvLyBjLnVwZGF0ZWQgICA9IDA7XG4gICAgICAgIC8vIGMuZmF2b3JpdGUgID0gZmFsc2U7XG4gICAgICAgIC8vIGMuYWN0aXZlICAgID0gZmFsc2U7XG4gICAgICAgIG91dHB1dC5wdXNoKCBjICk7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiBvdXRwdXQ7XG4gIH1cbn1cbiIsIi8qKlxuICogQXVkaW8gaGFuZGxlciBvYmplY3RcbiAqL1xuZXhwb3J0IGRlZmF1bHQge1xuICBfYXVkaW86IG5ldyBBdWRpbygpLFxuICBfY29udGV4dDogbnVsbCxcbiAgX2ZyZXE6IG5ldyBVaW50OEFycmF5KCksXG4gIF9zb3VyY2U6IG51bGwsXG4gIF9nYWluOiBudWxsLFxuICBfYW5hbHlzZXI6IG51bGwsXG4gIF9lcnJvcl9zdGF0dXM6IDAsXG5cbiAgLy8gc2V0dXAgYXVkaW8gcm91dGluZ1xuICBzZXR1cEF1ZGlvKCkge1xuICAgIC8vIHRoaXMuX2F1ZGlvLmFkZEV2ZW50TGlzdGVuZXIoICdjYW5wbGF5dGhyb3VnaCcsIGUgPT4ge1xuICAgIC8vICAgLy8gdGhpcy5fYXVkaW8ucGxheSgpO1xuICAgIC8vIH0pO1xuICAgIHJldHVybiB0aGlzLl9hdWRpbztcbiAgfSxcblxuICAvLyB1cGRhdGUgYW5kIHJldHVybiBhbmFseXNlciBmcmVxdWVuY3kgZGF0YVxuICBnZXRGcmVxRGF0YSgpIHtcbiAgICByZXR1cm4gdGhpcy5fZnJlcTtcbiAgfSxcblxuICAvLyBzZXQgYXVkaW8gdm9sdW1lXG4gIHNldFZvbHVtZSggdm9sdW1lICkge1xuICAgIC8vIGlmICggIXRoaXMuX2dhaW4gKSByZXR1cm47XG4gICAgdm9sdW1lID0gcGFyc2VGbG9hdCggdm9sdW1lICkgfHwgMC4wO1xuICAgIHZvbHVtZSA9ICggdm9sdW1lIDwgMCApID8gMCA6IHZvbHVtZTtcbiAgICB2b2x1bWUgPSAoIHZvbHVtZSA+IDEgKSA/IDEgOiB2b2x1bWU7XG4gICAgdGhpcy5fYXVkaW8udm9sdW1lID0gdm9sdW1lO1xuICAgIC8vIHRoaXMuX2dhaW4uZ2Fpbi52YWx1ZSA9IHZvbHVtZTtcbiAgfSxcblxuICAvLyBwbGF5IGF1ZGlvIHNvdXJjZSB1cmxcbiAgcGxheVNvdXJjZSggc291cmNlICkge1xuICAgIHRoaXMuc3RvcEF1ZGlvKCk7XG4gICAgLy8gdGhpcy5fYXVkaW8uc3JjID0gU3RyaW5nKCBzb3VyY2UgfHwgJycgKSArICc/eD0nICsgRGF0ZS5ub3coKTtcbiAgICB0aGlzLl9hdWRpby5zcmMgPSBTdHJpbmcoIHNvdXJjZSB8fCAnJyApO1xuICAgIC8vIHRoaXMuX2F1ZGlvLnNyYyA9ICdodHRwOi8vYm9nb3IubmFnYXN3YXJhZm0uY29tOjgwODgvc3RyZWFtJztcbiAgICAvLyB0aGlzLl9hdWRpby5sb2FkKCk7XG4gICAgdGhpcy5fYXVkaW8udm9sdW1lID0gMTtcbiAgICB0aGlzLl9hdWRpby5wbGF5KCk7XG4gIH0sXG5cbiAgLy8gc3RvcCBwbGF5aW5nIGF1ZGlvXG4gIHN0b3BBdWRpbygpIHtcbiAgICB0cnkgeyB0aGlzLl9hdWRpby5wYXVzZSgpOyB9IGNhdGNoICggZSApIHt9XG4gICAgdHJ5IHsgdGhpcy5fYXVkaW8uc3RvcCgpOyB9IGNhdGNoICggZSApIHt9XG4gICAgdHJ5IHsgdGhpcy5fYXVkaW8uY2xvc2UoKTsgfSBjYXRjaCAoIGUgKSB7fVxuICB9LFxufVxuIiwiLyoqXG4gKiBUaHJlZUpTIHNjZW5lIGxpZ2h0IG9iamVjdFxuICovXG5leHBvcnQgZGVmYXVsdCB7XG4gIGNvbG9yOiBudWxsLFxuICBsaWdodDogbnVsbCxcblxuICAvLyBjcmVhdGUgYW5kIGFkZCBsaWdodCB0byBzY2VuZVxuICBjcmVhdGUoIGJveCwgc2NlbmUgKSB7XG4gICAgdGhpcy5jb2xvciA9IG5ldyBUSFJFRS5Db2xvcigpO1xuICAgIHRoaXMuY29sb3Iuc2V0SFNMKCAwLCAuNSwgLjUgKTtcblxuICAgIHRoaXMubGlnaHQgPSBuZXcgVEhSRUUuUG9pbnRMaWdodCggMHhmZmZmZmYsIDQsIDQwMCApO1xuICAgIHRoaXMubGlnaHQucG9zaXRpb24uc2V0KCAwLCAwLCA0MjAgKTtcbiAgICB0aGlzLmxpZ2h0LmNhc3RTaGFkb3cgPSBmYWxzZTtcbiAgICB0aGlzLmxpZ2h0LnRhcmdldCA9IHNjZW5lO1xuICAgIHRoaXMubGlnaHQuY29sb3IgPSB0aGlzLmNvbG9yO1xuXG4gICAgc2NlbmUuYWRkKCB0aGlzLmxpZ2h0ICk7XG4gIH0sXG5cbiAgLy8gYW5pbWF0ZSBsaWdodCBvbiBmcmFtZSBsb29wXG4gIHVwZGF0ZSggYm94LCBtb3VzZSwgZnJlcSApIHtcbiAgICBsZXQgZGlzdCAgPSBNYXRoLmZsb29yKCBmcmVxWyAxIF0gfCAwICkgLyAyNTU7XG4gICAgbGV0IGNvbG9yID0gTWF0aC5mbG9vciggZnJlcVsgMTYgXSB8IDAgKSAvIDI1NTtcblxuICAgIHRoaXMubGlnaHQuZGlzdGFuY2UgPSAzNjAgKyAoIDE0MCAqIGRpc3QgKTtcbiAgICB0aGlzLmNvbG9yLnNldEhTTCggY29sb3IsIC41LCAuNSApO1xuICB9LFxufVxuIiwiLyoqXG4gKiBUaHJlZUpTIHNjZW5lIHNwaGVyZSBvYmplY3RcbiAqL1xuZXhwb3J0IGRlZmF1bHQge1xuICBncm91cDogbnVsbCxcbiAgc2hhcGVzOiBbXSxcbiAgbW92ZTogbmV3IFRIUkVFLlZlY3RvcjMoIDAsIDAsIDAgKSxcbiAgZWFzZTogOCxcblxuICAvLyBjcmVhdGUgYW5kIGFkZCBzcGhlcmUgdG8gc2NlbmVcbiAgY3JlYXRlKCBib3gsIHNjZW5lICkge1xuICAgIHRoaXMuZ3JvdXAgICA9IG5ldyBUSFJFRS5PYmplY3QzRCgpO1xuICAgIGxldCBzaGFwZTEgICA9IG5ldyBUSFJFRS5DaXJjbGVHZW9tZXRyeSggMSwgMTAgKTtcbiAgICBsZXQgc2hhcGUyICAgPSBuZXcgVEhSRUUuQ2lyY2xlR2VvbWV0cnkoIDIsIDIwICk7XG4gICAgbGV0IHBvaW50cyAgID0gbmV3IFRIUkVFLlNwaGVyZUdlb21ldHJ5KCAxMDAsIDMwLCAxNCApLnZlcnRpY2VzO1xuICAgIGxldCBtYXRlcmlhbCA9IG5ldyBUSFJFRS5NZXNoTGFtYmVydE1hdGVyaWFsKCB7IGNvbG9yOiAweGZmZmZmZiwgb3BhY2l0eTogMCwgc2lkZTogVEhSRUUuRG91YmxlU2lkZSB9ICk7XG4gICAgbGV0IGNlbnRlciAgID0gbmV3IFRIUkVFLlZlY3RvcjMoIDAsIDAsIDAgKTtcbiAgICBsZXQgcmFkaXVzICAgPSAxMjtcblxuICAgIGZvciAoIGxldCBpID0gMDsgaSA8IHBvaW50cy5sZW5ndGg7IGkrKyApIHtcbiAgICAgIGxldCB7IHgsIHksIHogfSA9IHBvaW50c1sgaSBdO1xuICAgICAgbGV0IGhvbWUgID0geyB4LCB5LCB6IH07XG4gICAgICBsZXQgY3ljbGUgPSBUSFJFRS5NYXRoLnJhbmRJbnQoIDAsIDEwMCApO1xuICAgICAgbGV0IHBhY2UgID0gVEhSRUUuTWF0aC5yYW5kSW50KCAxMCwgMzAgKTtcbiAgICAgIGxldCBzaGFwZSA9IG5ldyBUSFJFRS5NZXNoKCAoIGkgJSAyICkgPyBzaGFwZTEgOiBzaGFwZTIsIG1hdGVyaWFsICk7XG5cbiAgICAgIHNoYXBlLnBvc2l0aW9uLnNldCggeCwgeSwgeiApO1xuICAgICAgc2hhcGUubG9va0F0KCBjZW50ZXIgKTtcbiAgICAgIHNoYXBlLnVzZXJEYXRhID0geyByYWRpdXMsIGN5Y2xlLCBwYWNlLCBob21lIH07XG4gICAgICB0aGlzLmdyb3VwLmFkZCggc2hhcGUgKTtcbiAgICB9XG4gICAgdGhpcy5ncm91cC5wb3NpdGlvbi5zZXQoIDUwMCwgMCwgMCApO1xuICAgIHRoaXMuZ3JvdXAucm90YXRpb24ueCA9ICggTWF0aC5QSSAvIDIgKSArIC42O1xuICAgIHNjZW5lLmFkZCggdGhpcy5ncm91cCApO1xuICB9LFxuXG4gIC8vIGFuaW1hdGUgc3BoZXJlIG9uIGZyYW1lIGxvb3BcbiAgdXBkYXRlKCBib3gsIG1vdXNlLCBmcmVxICkge1xuICAgIGxldCBiYXNzID0gKCBNYXRoLmZsb29yKCBmcmVxWyAxIF0gfCAwICkgLyAyNTUgKTtcbiAgICBsZXQgeG9mZiA9ICggYm94LndpZHRoIDwgMTA4MCApID8gMCA6IDYwO1xuICAgIGxldCB6b2ZmID0gKCBib3gud2lkdGggPCAxMDgwICkgPyAtODAgOiAxMDtcblxuICAgIHRoaXMubW92ZS54ID0geG9mZiArIC0oIG1vdXNlLnggKiAwLjAxNSApO1xuICAgIHRoaXMuZ3JvdXAucG9zaXRpb24ueCArPSAoIHRoaXMubW92ZS54IC0gdGhpcy5ncm91cC5wb3NpdGlvbi54ICkgLyB0aGlzLmVhc2U7XG4gICAgdGhpcy5ncm91cC5wb3NpdGlvbi55ICs9ICggdGhpcy5tb3ZlLnkgLSB0aGlzLmdyb3VwLnBvc2l0aW9uLnkgKSAvIHRoaXMuZWFzZTtcbiAgICB0aGlzLmdyb3VwLnBvc2l0aW9uLnogPSB6b2ZmICsgKCBiYXNzICogODAgKTtcbiAgICB0aGlzLmdyb3VwLnJvdGF0aW9uLnkgLT0gMC4wMDM7XG5cbiAgICBmb3IgKCBsZXQgaSA9IDA7IGkgPCB0aGlzLmdyb3VwLmNoaWxkcmVuLmxlbmd0aDsgaSsrICkge1xuICAgICAgbGV0IHNoYXBlID0gdGhpcy5ncm91cC5jaGlsZHJlblsgaSBdO1xuICAgICAgbGV0IHsgcmFkaXVzLCBjeWNsZSwgcGFjZSwgaG9tZSB9ID0gc2hhcGUudXNlckRhdGE7XG5cbiAgICAgIHNoYXBlLnBvc2l0aW9uLnNldCggaG9tZS54LCBob21lLnksIGhvbWUueiApO1xuICAgICAgc2hhcGUudHJhbnNsYXRlWiggYmFzcyAqIE1hdGguc2luKCBjeWNsZSAvIHBhY2UgKSAqIHJhZGl1cyApO1xuICAgICAgc2hhcGUudXNlckRhdGEuY3ljbGUrKztcbiAgICB9XG4gIH0sXG59XG4iLCIvKipcbiAqIFRocmVlSlMgc2NlbmUgaGFuZGxlclxuICovXG5pbXBvcnQgTGlnaHQgZnJvbSAnLi9saWdodCc7XG5pbXBvcnQgU3BoZXJlIGZyb20gJy4vc3BoZXJlJztcblxuZXhwb3J0IGRlZmF1bHQge1xuICBfd3JhcDogbnVsbCxcbiAgX2NhbnZhczogbnVsbCxcbiAgX3JlbmRlcmVyOiBudWxsLFxuICBfc2NlbmU6IG51bGwsXG4gIF9jYW1lcmE6IG51bGwsXG4gIF9ib3g6IG51bGwsXG4gIF9tb3VzZTogeyB4OiAwLCB5OiAwIH0sXG4gIF9vYmplY3RzOiBbXSxcblxuICAvLyBzZXR1cCBhbmltYXRpb24gY2FudmFzXG4gIHNldHVwQ2FudmFzKCkge1xuICAgIHRoaXMuX3dyYXAgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCAnI3BsYXllci13cmFwJyApO1xuICAgIHRoaXMuX2NhbnZhcyA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoICcjcGxheWVyLWNhbnZhcycgKTtcbiAgICB0aGlzLl9ib3ggPSB0aGlzLl93cmFwLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpO1xuXG4gICAgLy8gc2V0dXAgc2NlbmUgYW5kIHJlbmRlcmVyXG4gICAgdGhpcy5fc2NlbmUgPSBuZXcgVEhSRUUuU2NlbmUoKTtcbiAgICB0aGlzLl9yZW5kZXJlciA9IG5ldyBUSFJFRS5XZWJHTFJlbmRlcmVyKCB7IGNhbnZhczogdGhpcy5fY2FudmFzLCBhbHBoYTogdHJ1ZSwgYW50aWFsaWFzOiB0cnVlLCBwcmVjaXNpb246ICdsb3dwJyB9ICk7XG4gICAgdGhpcy5fcmVuZGVyZXIuc2V0Q2xlYXJDb2xvciggMHgwMDAwMDAsIDAgKTtcbiAgICB0aGlzLl9yZW5kZXJlci5zZXRQaXhlbFJhdGlvKCB3aW5kb3cuZGV2aWNlUGl4ZWxSYXRpbyApO1xuXG4gICAgLy8gc2V0dXAgY2FtZXJhXG4gICAgdGhpcy5fY2FtZXJhID0gbmV3IFRIUkVFLlBlcnNwZWN0aXZlQ2FtZXJhKCA2MCwgKCB0aGlzLl9ib3gud2lkdGggLyB0aGlzLl9ib3guaGVpZ2h0ICksIDAuMSwgMjAwMDAgKTtcbiAgICB0aGlzLl9jYW1lcmEubG9va0F0KCB0aGlzLl9zY2VuZS5wb3NpdGlvbiApO1xuICAgIHRoaXMuX2NhbWVyYS5wb3NpdGlvbi5zZXQoIDAsIDAsIDMwMCApO1xuICAgIHRoaXMuX2NhbWVyYS5yb3RhdGlvbi5zZXQoIDAsIDAsIDAgKTtcblxuICAgIC8vIGFkZCBhbmQgY3JlYXRlIG9iamVjdHNcbiAgICB0aGlzLl9vYmplY3RzLnB1c2goIExpZ2h0ICk7XG4gICAgdGhpcy5fb2JqZWN0cy5wdXNoKCBTcGhlcmUgKTtcbiAgICBmb3IgKCBsZXQgbyBvZiB0aGlzLl9vYmplY3RzICkgby5jcmVhdGUoIHRoaXMuX2JveCwgdGhpcy5fc2NlbmUgKTtcblxuICAgIC8vIHNldHVwIGV2ZW50c1xuICAgIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKCAnbW91c2Vtb3ZlJywgdGhpcy51cGRhdGVNb3VzZS5iaW5kKCB0aGlzICkgKTtcbiAgICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lciggJ3Jlc2l6ZScsIHRoaXMudXBkYXRlU2l6ZS5iaW5kKCB0aGlzICkgKTtcbiAgICB0aGlzLnVwZGF0ZU1vdXNlKCk7XG4gICAgdGhpcy51cGRhdGVTaXplKCk7XG4gIH0sXG5cbiAgLy8gdXBkYXRlIGN1c3RvbSBvYmplY3RzIGluIDNkIHNjZW5lXG4gIHVwZGF0ZU9iamVjdHMoIGZyZXEgKSB7XG4gICAgZm9yICggbGV0IG8gb2YgdGhpcy5fb2JqZWN0cyApIG8udXBkYXRlKCB0aGlzLl9ib3gsIHRoaXMuX21vdXNlLCBmcmVxICk7XG4gICAgdGhpcy5fcmVuZGVyZXIucmVuZGVyKCB0aGlzLl9zY2VuZSwgdGhpcy5fY2FtZXJhICk7XG4gIH0sXG5cbiAgLy8gdXBkYXRlIGNhbnZhcyBzaXplXG4gIHVwZGF0ZVNpemUoKSB7XG4gICAgaWYgKCAhdGhpcy5fd3JhcCB8fCAhdGhpcy5fY2FudmFzICkgcmV0dXJuO1xuICAgIHRoaXMuX2JveCA9IHRoaXMuX3dyYXAuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCk7XG4gICAgdGhpcy5fY2FudmFzLndpZHRoID0gdGhpcy5fYm94LndpZHRoO1xuICAgIHRoaXMuX2NhbnZhcy5oZWlnaHQgPSB0aGlzLl9ib3guaGVpZ2h0O1xuICAgIHRoaXMuX2NhbWVyYS5hc3BlY3QgPSAoIHRoaXMuX2JveC53aWR0aCAvIHRoaXMuX2JveC5oZWlnaHQgKTtcbiAgICB0aGlzLl9jYW1lcmEudXBkYXRlUHJvamVjdGlvbk1hdHJpeCgpO1xuICAgIHRoaXMuX3JlbmRlcmVyLnNldFNpemUoIHRoaXMuX2JveC53aWR0aCwgdGhpcy5fYm94LmhlaWdodCApO1xuICB9LFxuXG4gIC8vIHVwZGF0ZSBtb3VzZSBwb3NpdGlvbiBmcm9tIGNlbnRlciBvZiBjYW52YXNcbiAgdXBkYXRlTW91c2UoIGUgKSB7XG4gICAgaWYgKCAhdGhpcy5fYm94ICkgcmV0dXJuO1xuICAgIGNvbnN0IGNlbnRlclggPSB0aGlzLl9ib3gubGVmdCArICggdGhpcy5fYm94LndpZHRoIC8gMiApO1xuICAgIGNvbnN0IGNlbnRlclkgPSB0aGlzLl9ib3gudG9wICsgKCB0aGlzLl9ib3guaGVpZ2h0IC8gMiApO1xuXG4gICAgaWYgKCBlICkge1xuICAgICAgdGhpcy5fbW91c2UueCA9IE1hdGgubWF4KCAwLCBlLnBhZ2VYIHx8IGUuY2xpZW50WCB8fCAwICkgLSBjZW50ZXJYO1xuICAgICAgdGhpcy5fbW91c2UueSA9IE1hdGgubWF4KCAwLCBlLnBhZ2VZIHx8IGUuY2xpZW50WSB8fCAwICkgLSBjZW50ZXJZO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLl9tb3VzZS54ID0gY2VudGVyWDtcbiAgICAgIHRoaXMuX21vdXNlLnkgPSBjZW50ZXJZO1xuICAgIH1cbiAgfSxcbn1cbiIsIi8qKlxuICogQ29tbW9uIHV0aWxzXG4gKi9cbmV4cG9ydCBkZWZhdWx0IHtcblxuICAvLyBnZXQgc2VhcmNoIHJlc3VsdHMgb2ZmIGEgbGlzdCBmb3IgYW4gb2JqIGtleVxuICBzZWFyY2goIGxpc3QsIGtleSwgc2VhcmNoICkge1xuICAgIGNvbnN0IHJlZ3hwID0gbmV3IFJlZ0V4cCggJ14oJysgc2VhcmNoICsnKScsICdpJyApO1xuICAgIHJldHVybiBsaXN0LmZpbHRlciggaXRlbSA9PiByZWd4cC50ZXN0KCBpdGVtWyBrZXkgXSApICk7XG4gIH0sXG5cbiAgLy8gc29ydCBvYmplY3RzIGluIGFuIGFycmF5IGJ5IGEga2V5XG4gIHNvcnQoIGxpc3QsIGtleSwgb3JkZXIsIGlnbm9yZSApIHtcbiAgICByZXR1cm4gbGlzdC5zb3J0KCAoIGEsIGIgKSA9PiB7XG4gICAgICBpZiAoIGEuaGFzT3duUHJvcGVydHkoIGtleSApICkge1xuXG4gICAgICAgIGxldCBfYSA9IGFbIGtleSBdO1xuICAgICAgICBsZXQgX2IgPSBiWyBrZXkgXTtcblxuICAgICAgICBpZiAoIGlnbm9yZSApIHsgLy8gc29ydCBzdHJpbmdzIHVzaW5nIHNhbWUgY2FzZVxuICAgICAgICAgIF9hID0gKCB0eXBlb2YgX2EgPT09ICdzdHJpbmcnICkgPyBfYS50b1VwcGVyQ2FzZSgpIDogX2E7XG4gICAgICAgICAgX2IgPSAoIHR5cGVvZiBfYiA9PT0gJ3N0cmluZycgKSA/IF9iLnRvVXBwZXJDYXNlKCkgOiBfYjtcbiAgICAgICAgfVxuICAgICAgICBpZiAoIG9yZGVyID09PSAnYXNjJyApIHtcbiAgICAgICAgICBpZiAoIF9hIDwgX2IgKSByZXR1cm4gLTE7XG4gICAgICAgICAgaWYgKCBfYSA+IF9iICkgcmV0dXJuIDE7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKCBvcmRlciA9PT0gJ2Rlc2MnICkge1xuICAgICAgICAgIGlmICggX2EgPiBfYiApIHJldHVybiAtMTtcbiAgICAgICAgICBpZiAoIF9hIDwgX2IgKSByZXR1cm4gMTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgcmV0dXJuIDA7XG4gICAgfSk7XG4gIH0sXG5cbn1cbiIsIi8qKlxuICogQmFzaWMgbG9jYWxTdG9yYWdlIHdyYXBwZXJcbiAqL1xuZXhwb3J0IGRlZmF1bHQge1xuXG4gIC8vIHNhdmUgZGF0YVxuICBzZXQoIGtleSwgZGF0YSwgdHRsICkge1xuICAgIGlmICggIXRoaXMuX2lzU3RyKCBrZXkgKSApIHJldHVybjtcbiAgICBjb25zdCB0aW1lID0gRGF0ZS5ub3coKTtcbiAgICBjb25zdCBleHBpcmUgPSBOdW1iZXIoIHR0bCApIHx8IDA7XG4gICAgY29uc3QganNvbiA9IEpTT04uc3RyaW5naWZ5KCB7IHRpbWUsIGV4cGlyZSwgZGF0YSB9ICk7XG4gICAgd2luZG93LmxvY2FsU3RvcmFnZS5zZXRJdGVtKCBrZXksIGpzb24gKTtcbiAgfSxcblxuICAvLyBnZXQgc2F2ZWQgZGF0YVxuICBnZXQoIGtleSApIHtcbiAgICBpZiAoICF0aGlzLl9pc1N0cigga2V5ICkgKSByZXR1cm47XG4gICAgY29uc3QganNvbiA9IHdpbmRvdy5sb2NhbFN0b3JhZ2UuZ2V0SXRlbSgga2V5ICkgfHwgJ3t9JztcbiAgICBjb25zdCBwYXJzZWQgPSBKU09OLnBhcnNlKCBqc29uICkgfHwge307XG4gICAgY29uc3QgeyB0aW1lLCBleHBpcmUsIGRhdGEgfSA9IHBhcnNlZDtcbiAgICBpZiAoIHRoaXMuX2lzRXhwaXJlZCggdGltZSwgZXhwaXJlICkgKSB0aGlzLmRlbGV0ZSgga2V5ICk7XG4gICAgcmV0dXJuIGRhdGE7XG4gIH0sXG5cbiAgLy8gcmVtb3ZlIHNhdmVkIGRhdGFcbiAgZGVsZXRlKCBrZXkgKSB7XG4gICAgaWYgKCAhdGhpcy5faXNTdHIoIGtleSApICkgcmV0dXJuO1xuICAgIHdpbmRvdy5sb2NhbFN0b3JhZ2UucmVtb3ZlSXRlbSgga2V5ICk7XG4gIH0sXG5cbiAgLy8gY2hlY2sgdmFsaWQgc3RyaW5nXG4gIF9pc1N0ciggc3RyICkge1xuICAgIHJldHVybiAoIHN0ciAmJiB0eXBlb2Ygc3RyID09PSAnc3RyaW5nJyApO1xuICB9LFxuXG4gIC8vIGNoZWNrIGlmIGRhdGEgc2F2ZWQgaGFzIGV4cGlyZWRcbiAgX2lzRXhwaXJlZCggdGltZSwgZXhwaXJlICkge1xuICAgIGlmICggIXRpbWUgfHwgIWV4cGlyZSApIHJldHVybiBmYWxzZTtcbiAgICBjb25zdCBub3cgPSBEYXRlLm5vdygpO1xuICAgIGNvbnN0IHNlY3MgPSAoIG5vdyAtIHRpbWUgKSAvIDEwMDA7XG4gICAgcmV0dXJuICggc2VjcyA+PSBleHBpcmUgKSA/IHRydWUgOiBmYWxzZTtcbiAgfVxufVxuIiwiLyoqXG4gKiBNYWluIGFwcCBKUyBlbnRyeSBmaWxlLlxuICovXG5pbXBvcnQgJy4vc2Nzcy9hcHAuc2Nzcyc7XG5pbXBvcnQgJy4vanMvZmlsdGVycyc7XG5pbXBvcnQgJy4vanMvZmF2b3JpdGUnO1xuLy8gaW1wb3J0IF9zb21hIGZyb20gJy4vanMvc29tYSc7XG5pbXBvcnQgX3N0YXRpb24gZnJvbSAnLi9qcy9zdGF0aW9uJztcbmltcG9ydCBfYXVkaW8gZnJvbSAnLi9qcy9hdWRpbyc7XG5pbXBvcnQgX3NjZW5lIGZyb20gJy4vanMvc2NlbmUnO1xuaW1wb3J0IF91dGlscyBmcm9tICcuL2pzL3V0aWxzJztcbmltcG9ydCBfc3RvcmUgZnJvbSAnLi9qcy9zdG9yZSc7XG5cbi8vIG1haW4gdnVlIGFwcFxubmV3IFZ1ZSh7XG4gIGVsOiAnI2FwcCcsXG4gIGRhdGE6IHtcbiAgICAvLyB0b2dnbGVzXG4gICAgaW5pdDogZmFsc2UsXG4gICAgdmlzaWJsZTogdHJ1ZSxcbiAgICBwbGF5aW5nOiBmYWxzZSxcbiAgICBsb2FkaW5nOiBmYWxzZSxcbiAgICBzaWRlYmFyOiBmYWxzZSxcbiAgICAvLyB2b2x1bWU6IDAuNSxcbiAgICB2b2x1bWU6IDEsXG4gICAgLy8gY2hhbm5lbHMgc3R1ZmZcbiAgICBjaGFubmVsczogW10sXG4gICAgY2hhbm5lbDoge30sXG4gICAgc29uZ3M6IFtdLFxuICAgIHRyYWNrOiB7fSxcbiAgICBmYXZvcml0ZXM6IFtdLFxuICAgIGVycm9yczoge30sXG4gICAgLy8gdGltZXIgc3R1ZmZcbiAgICB0aW1lU3RhcnQ6IDAsXG4gICAgdGltZURpc3BsYXk6ICcwMDowMDowMCcsXG4gICAgdGltZUl0djogbnVsbCxcbiAgICAvLyBzb3J0aW5nIHN0dWZmXG4gICAgc2VhcmNoVGV4dDogJycsXG4gICAgc29ydFBhcmFtOiAnbGlzdGVuZXJzJyxcbiAgICBzb3J0T3JkZXI6ICdkZXNjJyxcbiAgICAvLyB0aW1lciBzdHVmZlxuICAgIGFuZjogbnVsbCxcbiAgICBzdG86IG51bGwsXG4gICAgaXR2OiBudWxsLFxuICAgIC8vIGdlc3R1cmVfYWN0aW9uOiBmYWxzZSxcbiAgfSxcblxuICAvLyB3YXRjaCBtZXRob2RzXG4gIHdhdGNoOiB7XG5cbiAgICAvLyB3YXRjaCBwbGF5aW5nIHN0YXR1c1xuICAgIHBsYXlpbmcoKSB7XG4gICAgICBpZiAoIHRoaXMucGxheWluZyApIHsgdGhpcy5zdGFydENsb2NrKCk7IH1cbiAgICAgIGVsc2UgeyB0aGlzLnN0b3BDbG9jaygpOyB9XG4gICAgfSxcblxuICAgIC8vIHVwZGF0ZSBwbGF5ZXIgdm9sdW1lXG4gICAgdm9sdW1lKCkge1xuICAgICAgX2F1ZGlvLnNldFZvbHVtZSggdGhpcy52b2x1bWUgKTtcbiAgICB9XG4gIH0sXG5cbiAgLy8gY29tcHV0ZWQgbWV0aG9kc1xuICBjb21wdXRlZDoge1xuXG4gICAgLy8gZmlsdGVyIGNoYW5uZWxzIGxpc3RcbiAgICBjaGFubmVsc0xpc3QoKSB7XG4gICAgICBsZXQgbGlzdCA9IHRoaXMuY2hhbm5lbHMuc2xpY2UoKTtcbiAgICAgIGxldCBzZWFyY2ggPSB0aGlzLnNlYXJjaFRleHQucmVwbGFjZSggL1teXFx3XFxzXFwtXSsvZywgJycgKS5yZXBsYWNlKCAvW1xcclxcc1xcdFxcbl0rL2csICcgJyApLnRyaW0oKTtcblxuICAgICAgaWYgKCBzZWFyY2ggJiYgc2VhcmNoLmxlbmd0aCA+IDEgKSB7XG4gICAgICAgIGxpc3QgPSBfdXRpbHMuc2VhcmNoKCBsaXN0LCAndGl0bGUnLCBzZWFyY2ggKTtcbiAgICAgIH1cbiAgICAgIGlmICggdGhpcy5zb3J0UGFyYW0gKSB7XG4gICAgICAgIGxpc3QgPSBfdXRpbHMuc29ydCggbGlzdCwgdGhpcy5zb3J0UGFyYW0sIHRoaXMuc29ydE9yZGVyLCB0cnVlICk7XG4gICAgICB9XG4gICAgICBpZiAoIHRoaXMuY2hhbm5lbC5pZCApIHtcbiAgICAgICAgbGlzdCA9IGxpc3QubWFwKCBpID0+IHtcbiAgICAgICAgICBpLmFjdGl2ZSA9ICggdGhpcy5jaGFubmVsLmlkID09PSBpLmlkICkgPyB0cnVlIDogZmFsc2U7XG4gICAgICAgICAgcmV0dXJuIGk7XG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGxpc3Q7XG4gICAgfSxcblxuICAgIC8vIGZpbHRlciBzb25ncyBsaXN0XG4gICAgc29uZ3NMaXN0KCkge1xuICAgICAgbGV0IGxpc3QgPSB0aGlzLnNvbmdzLnNsaWNlKCk7XG4gICAgICByZXR1cm4gbGlzdDtcbiAgICB9LFxuXG4gICAgLy8gc29ydC1ieSBsYWJlbCBmb3IgYnV0dG9ucywgZXRjXG4gICAgc29ydExhYmVsKCkge1xuICAgICAgc3dpdGNoICggdGhpcy5zb3J0UGFyYW0gKSB7XG4gICAgICAgIGNhc2UgJ3RpdGxlJyAgICAgOiByZXR1cm4gJ1N0YXRpb24gTmFtZSc7XG4gICAgICAgIGNhc2UgJ2xpc3RlbmVycycgOiByZXR1cm4gJ0xpc3RlbmVycyBDb3VudCc7XG4gICAgICAgIGNhc2UgJ2Zhdm9yaXRlJyAgOiByZXR1cm4gJ1NhdmVkIEZhdm9yaXRlcyc7XG4gICAgICAgIGNhc2UgJ2dlbnJlJyAgICAgOiByZXR1cm4gJ011c2ljIEdlbnJlJztcbiAgICAgIH1cbiAgICB9LFxuXG4gICAgLy8gY2hlY2sgaWYgYXVkaW8gY2FuIGJlIHBsYXllZFxuICAgIGNhblBsYXkoKSB7XG4gICAgICByZXR1cm4gKCB0aGlzLmNoYW5uZWwuaWQgJiYgIXRoaXMubG9hZGluZyApID8gdHJ1ZSA6IGZhbHNlO1xuICAgIH0sXG5cbiAgICAvLyBjaGVjayBpZiBhIGNoYW5uZWwgaXMgc2VsZWN0ZWRcbiAgICBoYXNDaGFubmVsKCkge1xuICAgICAgcmV0dXJuIHRoaXMuY2hhbm5lbC5pZCA/IHRydWUgOiBmYWxzZTtcbiAgICB9LFxuXG4gICAgLy8gY2hlY2sgaWYgdGhlcmUgYXJlIHRyYWNrcyBsb2FkZWRcbiAgICBoYXNTb25ncygpIHtcbiAgICAgIHJldHVybiB0aGlzLnNvbmdzLmxlbmd0aCA/IHRydWUgOiBmYWxzZTtcbiAgICB9LFxuXG4gICAgLy8gY2hlY2sgZm9yIGVycm9ycyB0aGF0IHdvdWxkIGFmZmVjdCBwbGF5YmFja1xuICAgIGhhc0Vycm9yKCkge1xuICAgICAgaWYgKCB0aGlzLmVycm9ycy5jaGFubmVscyAmJiAhdGhpcy5jaGFubmVscy5sZW5ndGggKSByZXR1cm4gdHJ1ZTtcbiAgICAgIGlmICggdGhpcy5lcnJvcnMuc3RyZWFtICkgcmV0dXJuIHRydWU7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfSxcbiAgfSxcblxuICAvLyBjdXN0b20gbWV0aG9kc1xuICBtZXRob2RzOiB7XG5cbiAgICAvLyBydW4gbWFpbnRlbmFuY2UgdGFza3Mgb24gYSB0aW1lclxuICAgIHNldHVwTWFpbnRlbmFuY2UoKSB7XG4gICAgICB0aGlzLml0diA9IHNldEludGVydmFsKCAoKSA9PiB7XG4gICAgICAgIHRoaXMuZ2V0Q2hhbm5lbHMoKTsgLy8gdXBkYXRlIGNoYW5uZWxzXG4gICAgICAgIC8vIHRoaXMuZ2V0U29uZ3MoIHRoaXMuY2hhbm5lbCApOyAvLyB1cGRhdGUgY2hhbm5lbCB0cmFja3NcbiAgICAgIH0sIDEwMDAgKiAzMCApO1xuICAgIH0sXG5cbiAgICAvLyBzZXQgYW4gZXJyb3IgbWVzc2FnZVxuICAgIHNldEVycm9yKCBrZXksIGVyciApIHtcbiAgICAgIGxldCBlcnJvcnMgPSBPYmplY3QuYXNzaWduKCB7fSwgdGhpcy5lcnJvcnMgKTtcbiAgICAgIGVycm9yc1sga2V5IF0gPSBTdHJpbmcoIGVyciB8fCAnJyApLnRyaW0oKTtcbiAgICAgIGlmICggZXJyICkgY29uc29sZS53YXJuKCAnRVJST1IoJysga2V5ICsnKTonLCBlcnIgKTtcbiAgICAgIHRoaXMuZXJyb3JzID0gZXJyb3JzO1xuICAgIH0sXG5cbiAgICAvLyBjaGVjayBpZiBhbiBlcnJvciBoYXMgYmVlbiBzZXQgZm9yIGEga2V5XG4gICAgY2hlY2tFcnJvcigga2V5ICkge1xuICAgICAgcmV0dXJuICgga2V5ICYmIHRoaXMuZXJyb3JzLmhhc093blByb3BlcnR5KCBrZXkgKSAmJiB0aGlzLmVycm9yc1sga2V5IF0gKTtcbiAgICB9LFxuXG4gICAgLy8gY2xlYXIgYWxsIGVycm9yIG1lc3NhZ2VzXG4gICAgY2xlYXJFcnJvcnMoKSB7XG4gICAgICBPYmplY3Qua2V5cyggdGhpcy5lcnJvcnMgKS5mb3JFYWNoKCBrZXkgPT4ge1xuICAgICAgICB0aGlzLmVycm9yc1sga2V5IF0gPSAnJztcbiAgICAgIH0pO1xuICAgIH0sXG5cbiAgICAvLyBzaG93IHBsYXllciB3aGVuIGFwcCBpcyBtb3VudGVkXG4gICAgaW5pdFBsYXllcigpIHtcbiAgICAgIGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoICcjX3NwbnInICkuc3R5bGUuZGlzcGxheSA9ICdub25lJztcbiAgICAgIGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoICcjcGxheWVyLXdyYXAnICkuc3R5bGUub3BhY2l0eSA9ICcxJztcbiAgICAgIGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoICd2aXNpYmlsaXR5Y2hhbmdlJywgZSA9PiB7IHRoaXMudmlzaWJsZSA9ICggZG9jdW1lbnQudmlzaWJpbGl0eVN0YXRlID09PSAndmlzaWJsZScgKSB9ICk7XG4gICAgICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lciggJ2hhc2hjaGFuZ2UnLCBlID0+IHRoaXMuYXBwbHlSb3V0ZSggd2luZG93LmxvY2F0aW9uLmhhc2ggKSApO1xuICAgICAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoICdrZXlkb3duJywgdGhpcy5vbktleWJvYXJkICk7XG4gICAgICAvLyB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCBlID0+IHsgdGhpcy5nZXN0dXJlX2FjdGlvbiA9IHRydWU7IH0pO1xuICAgICAgLy8gZG9jdW1lbnQub25jbGljayA9IGUgPT4geyB0aGlzLmdlc3R1cmVfYWN0aW9uID0gdHJ1ZTsgfTtcbiAgICAgIHRoaXMuaW5pdCA9IHRydWU7XG4gICAgfSxcblxuICAgIC8vIHJlc2V0IHNlbGVjdGVkIGNoYW5uZWxcbiAgICByZXNldFBsYXllcigpIHtcbiAgICAgIHRoaXMuY2xvc2VBdWRpbygpO1xuICAgICAgdGhpcy5jbGVhckVycm9ycygpO1xuICAgICAgdGhpcy5jaGFubmVsID0ge307XG4gICAgICB0aGlzLnNvbmdzID0gW107XG4gICAgfSxcblxuICAgIC8vIHRyeSByZXN1bWluZyBzdHJlYW0gcHJvYmxlbSBpZiBwb3NzaWJsZVxuICAgIHRyeUFnYWluKCkge1xuICAgICAgdGhpcy5jbGVhckVycm9ycygpO1xuICAgICAgdGhpcy5wbGF5Q2hhbm5lbCggdGhpcy5jaGFubmVsICk7XG4gICAgfSxcblxuICAgIC8vIHNob3cvaGlkZSB0aGUgc2lkZWJhclxuICAgIHRvZ2dsZVNpZGViYXIoIHRvZ2dsZSApIHtcbiAgICAgIHRoaXMuc2lkZWJhciA9ICggdHlwZW9mIHRvZ2dsZSA9PT0gJ2Jvb2xlYW4nICkgPyB0b2dnbGUgOiBmYWxzZTtcbiAgICB9LFxuXG4gICAgLy8gc2hvdyBzaWRlYmFyIGF0IHN0YXJ0dXAgaWYgdGhlcmUgYXJlIG5vIGVycm9yc1xuICAgIGluaXRTaWRlYmFyKCkge1xuICAgICAgaWYgKCB0aGlzLmhhc0Vycm9yICkgcmV0dXJuO1xuICAgICAgLy8gdGhpcy50b2dnbGVTaWRlYmFyKCB0cnVlICk7XG4gICAgfSxcblxuICAgIC8vIHRvZ2dsZSBzdHJlYW0gcGxheWJhY2sgZm9yIGN1cnJlbnQgc2VsZWN0ZWQgY2hhbm5lbFxuICAgIHRvZ2dsZVBsYXkoKSB7XG4gICAgICBpZiAoIHRoaXMubG9hZGluZyApIHJldHVybjtcbiAgICAgIGlmICggdGhpcy5wbGF5aW5nICkgcmV0dXJuIHRoaXMuY2xvc2VBdWRpbygpO1xuICAgICAgcmV0dXJuIHRoaXMucGxheUNoYW5uZWwoIHRoaXMuY2hhbm5lbCApO1xuICAgIH0sXG5cbiAgICAvLyBsb2FkIGxhc3Qgc29ydCBvcHRpb25zIGZyb20gc3RvcmVcbiAgICBsb2FkU29ydE9wdGlvbnMoKSB7XG4gICAgICBjb25zdCBvcHRzID0gX3N0b3JlLmdldCggJ3NvcnRpbmdfZGF0YScgKTtcbiAgICAgIGlmICggb3B0cyAmJiBvcHRzLnBhcmFtICkgdGhpcy5zb3J0UGFyYW0gPSBvcHRzLnBhcmFtO1xuICAgICAgaWYgKCBvcHRzICYmIG9wdHMub3JkZXIgKSB0aGlzLnNvcnRPcmRlciA9IG9wdHMub3JkZXI7XG4gICAgfSxcblxuICAgIC8vIHRvZ2dsZSBzb3J0IG9yZGVyXG4gICAgdG9nZ2xlU29ydE9yZGVyKCkge1xuICAgICAgdGhpcy5zb3J0T3JkZXIgPSAoIHRoaXMuc29ydE9yZGVyID09PSAnYXNjJyApID8gJ2Rlc2MnIDogJ2FzYyc7XG4gICAgfSxcblxuICAgIC8vIGFwcGx5IHNvcnRpbmcgYW5kIHRvZ2dsZSBvcmRlclxuICAgIHNvcnRCeSggcGFyYW0sIG9yZGVyICkge1xuICAgICAgaWYgKCB0aGlzLnNvcnRQYXJhbSA9PT0gcGFyYW0gKSB7IHRoaXMudG9nZ2xlU29ydE9yZGVyKCk7IH1cbiAgICAgIGVsc2UgeyB0aGlzLnNvcnRPcmRlciA9IG9yZGVyIHx8ICdhc2MnOyB9XG4gICAgICB0aGlzLnNvcnRQYXJhbSA9IHBhcmFtO1xuICAgICAgX3N0b3JlLnNldCggJ3NvcnRpbmdfZGF0YScsIHsgcGFyYW06IHRoaXMuc29ydFBhcmFtLCBvcmRlcjogdGhpcy5zb3J0T3JkZXIgfSApO1xuICAgIH0sXG5cbiAgICBnb1RvSG9tZSgpIHtcbiAgICAgIHRoaXMuc2V0Um91dGUoJy8nKTtcbiAgICB9LFxuXG4gICAgLy8gbG9hZCBzYXZlZCBmYXZzIGxpc3QgZnJvbSBzdG9yZVxuICAgIGxvYWRGYXZvcml0ZXMoKSB7XG4gICAgICBjb25zdCBmYXZzID0gX3N0b3JlLmdldCggJ2Zhdm9yaXRlc19kYXRhJyApO1xuICAgICAgaWYgKCAhQXJyYXkuaXNBcnJheSggZmF2cyApICkgcmV0dXJuO1xuICAgICAgdGhpcy5mYXZvcml0ZXMgPSBmYXZzO1xuICAgIH0sXG5cbiAgICAvLyBzYXZlIGZhdnMgdG8gYSAubTN1IGZpbGVcbiAgICBzYXZlRmF2b3JpdGVzKCkge1xuICAgICAgLy8gbGV0IGRhdGEgPSAnI0VYVE0zVSc7XG4gICAgICAvLyBmb3IgKCBsZXQgaWQgb2YgdGhpcy5mYXZvcml0ZXMgKSB7XG4gICAgICAvLyAgIGNvbnN0IGNoYW5uZWwgPSB0aGlzLmNoYW5uZWxzLmZpbHRlciggYyA9PiAoIGMuaWQgPT09IGlkICkgKS5zaGlmdCgpO1xuICAgICAgLy8gICBpZiAoICFjaGFubmVsICkgY29udGludWU7XG4gICAgICAvLyAgIGRhdGEgKz0gJ1xcblxcbic7XG4gICAgICAvLyAgIGRhdGEgKz0gYCNFWFRJTkY6MCwke2NoYW5uZWwudGl0bGV9IFtTb21hRk1dXFxuYDtcbiAgICAgIC8vICAgZGF0YSArPSBgJHtjaGFubmVsLm1wM2ZpbGV9YDtcbiAgICAgIC8vIH1cbiAgICAgIC8vIGNvbnN0IGVsbSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoICdhJyApO1xuICAgICAgLy8gZWxtLnNldEF0dHJpYnV0ZSggJ2hyZWYnLCAnZGF0YTphdWRpby9tcGVndXJsO2NoYXJzZXQ9dXRmLTgsJysgZW5jb2RlVVJJQ29tcG9uZW50KCBkYXRhICkgKTtcbiAgICAgIC8vIGVsbS5zZXRBdHRyaWJ1dGUoICdkb3dubG9hZCcsICdzb21hZm1fZmF2b3JpdGVzLm0zdScgKTtcbiAgICAgIC8vIGVsbS5zZXRBdHRyaWJ1dGUoICd0YXJnZXQnLCAnX2JsYW5rJyApO1xuICAgICAgLy8gZG9jdW1lbnQuYm9keS5hcHBlbmRDaGlsZCggZWxtICk7XG4gICAgICAvLyBzZXRUaW1lb3V0KCAoKSA9PiBlbG0uY2xpY2soKSwgMTAwICk7XG4gICAgICAvLyBzZXRUaW1lb3V0KCAoKSA9PiBlbG0ucmVtb3ZlKCksIDEwMDAgKTtcbiAgICB9LFxuXG4gICAgLy8gdG9nZ2xlIGZhdm9yaXRlIGNoYW5uZWwgYnkgaWRcbiAgICB0b2dnbGVGYXZvcml0ZSggaWQsIHRvZ2dsZSApIHtcbiAgICAgIC8vIGxldCBmYXZzID0gdGhpcy5mYXZvcml0ZXMuc2xpY2UoKTtcbiAgICAgIC8vIGZhdnMgPSBmYXZzLmZpbHRlciggZmlkID0+ICggZmlkICE9PSBpZCApICk7XG4gICAgICAvLyBpZiAoIHRvZ2dsZSApIGZhdnMucHVzaCggaWQgKTtcbiAgICAgIC8vIHRoaXMuZmF2b3JpdGVzID0gZmF2cztcbiAgICAgIC8vIHRoaXMudXBkYXRlQ3VycmVudENoYW5uZWwoKTtcbiAgICAgIC8vIF9zdG9yZS5zZXQoICdmYXZvcml0ZXNfZGF0YScsIGZhdnMgKTtcbiAgICB9LFxuXG4gICAgLy8gc2V0dXAgYXVkaW8gcm91dGluZyBhbmQgc3RyZWFtIGV2ZW50c1xuICAgIHNldHVwQXVkaW8oKSB7XG4gICAgICBjb25zdCBhID0gX2F1ZGlvLnNldHVwQXVkaW8oKTtcblxuICAgICAgYS5hZGRFdmVudExpc3RlbmVyKCAnd2FpdGluZycsIGUgPT4ge1xuICAgICAgICB0aGlzLnBsYXlpbmcgPSBmYWxzZTtcbiAgICAgICAgdGhpcy5sb2FkaW5nID0gdHJ1ZTtcblxuICAgICAgICBjb25zdCBzbCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdzdGF0aW9uLWxvZ28nKTtcbiAgICAgICAgaWYoc2wuY2xhc3NMaXN0LmNvbnRhaW5zKCdmeC1zcGluLXJpZ2h0LXN0YXRpb24tbG9nbycpKSB7XG4gICAgICAgICAgc2wuY2xhc3NMaXN0LnJlbW92ZSgnZngtc3Bpbi1yaWdodC1zdGF0aW9uLWxvZ28nKTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgICBhLmFkZEV2ZW50TGlzdGVuZXIoICdwbGF5aW5nJywgZSA9PiB7XG4gICAgICAgIHRoaXMuc2V0RXJyb3IoICdzdHJlYW0nLCAnJyApO1xuICAgICAgICB0aGlzLnBsYXlpbmcgPSB0cnVlO1xuICAgICAgICB0aGlzLmxvYWRpbmcgPSBmYWxzZTtcblxuICAgICAgICBjb25zdCBzbCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdzdGF0aW9uLWxvZ28nKTtcbiAgICAgICAgc2wuY2xhc3NMaXN0LnJlbW92ZSgnZngtZHJvcC1pbicpO1xuICAgICAgICBzbC5jbGFzc0xpc3QuYWRkKCdmeC1zcGluLXJpZ2h0LXN0YXRpb24tbG9nbycpO1xuICAgICAgfSk7XG4gICAgICBhLmFkZEV2ZW50TGlzdGVuZXIoICdwYXVzZScsIGUgPT4ge1xuICAgICAgICB0aGlzLnBsYXlpbmcgPSBmYWxzZTtcbiAgICAgICAgdGhpcy5sb2FkaW5nID0gZmFsc2U7XG4gICAgICAgIFxuICAgICAgICBjb25zdCBzbCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdzdGF0aW9uLWxvZ28nKTtcbiAgICAgICAgc2wuY2xhc3NMaXN0LnJlbW92ZSgnZngtc3Bpbi1yaWdodC1zdGF0aW9uLWxvZ28nKTtcbiAgICAgIH0pO1xuICAgICAgYS5hZGRFdmVudExpc3RlbmVyKCAnZW5kZWQnLCBlID0+IHtcbiAgICAgICAgdGhpcy5wbGF5aW5nID0gZmFsc2U7XG4gICAgICAgIHRoaXMubG9hZGluZyA9IGZhbHNlO1xuICAgICAgfSk7XG4gICAgICBhLmFkZEV2ZW50TGlzdGVuZXIoICdlcnJvcicsIGUgPT4ge1xuICAgICAgICB0aGlzLmNsb3NlQXVkaW8oKTtcbiAgICAgICAgdGhpcy5zZXRFcnJvciggJ3N0cmVhbScsIGBUaGUgc2VsZWN0ZWQgc3RyZWFtICgke3RoaXMuY2hhbm5lbC50aXRsZX0pIGNvdWxkIG5vdCBsb2FkLCBvciBoYXMgc3RvcHBlZCBsb2FkaW5nIGR1ZSB0byBhIG5ldHdvcmsgcHJvYmxlbS5gICk7XG4gICAgICAgIHRoaXMucGxheWluZyA9IGZhbHNlO1xuICAgICAgICB0aGlzLmxvYWRpbmcgPSBmYWxzZTtcbiAgICAgIH0pO1xuICAgIH0sXG5cbiAgICAvLyBjbG9zZSBhY3RpdmUgYXVkaW9cbiAgICBjbG9zZUF1ZGlvKCkge1xuICAgICAgX2F1ZGlvLnN0b3BBdWRpbygpO1xuICAgICAgdGhpcy5wbGF5aW5nID0gZmFsc2U7XG4gICAgfSxcblxuICAgIC8vIHNldHVwIGFuaW1hdGlvbiBjYW52YXNcbiAgICBzZXR1cENhbnZhcygpIHtcbiAgICAgIF9zY2VuZS5zZXR1cENhbnZhcygpO1xuICAgIH0sXG5cbiAgICAvLyBhdWRpbyB2aXN1YWxpemVyIGFuaW1hdGlvbiBsb29wXG4gICAgdXBkYXRlQ2FudmFzKCkge1xuICAgICAgdGhpcy5hbmYgPSByZXF1ZXN0QW5pbWF0aW9uRnJhbWUoIHRoaXMudXBkYXRlQ2FudmFzICk7XG4gICAgICBpZiAoICF0aGlzLnZpc2libGUgKSByZXR1cm47XG4gICAgICBjb25zdCBmcmVxID0gX2F1ZGlvLmdldEZyZXFEYXRhKCk7XG4gICAgICBfc2NlbmUudXBkYXRlT2JqZWN0cyggZnJlcSApO1xuICAgIH0sXG5cbiAgICAvLyBnZXQgY2hhbm5lbHMgZGF0YSBmcm9tIGFwaVxuICAgIGdldENoYW5uZWxzKCBzaWRlYmFyICkge1xuICAgICAgX3N0YXRpb24uZ2V0Q2hhbm5lbHMoICggZXJyLCBjaGFubmVscyApID0+IHtcbiAgICAgICAgaWYgKCBlcnIgKSByZXR1cm4gdGhpcy5zZXRFcnJvciggJ2NoYW5uZWxzJywgZXJyICk7XG4gICAgICAgIC8vIHRoaXMgbWFrZXMgc2lkZWJhciBhcHBlYXIgb24gc3RhcnR1cCwgdGhlbiBJIGRpc2FibGUgaXRcbiAgICAgICAgLy8gaWYgKCBzaWRlYmFyICkgdGhpcy50b2dnbGVTaWRlYmFyKCB0cnVlICk7XG4gICAgICAgIHRoaXMuY2hhbm5lbHMgPSBjaGFubmVscztcbiAgICAgICAgdGhpcy5zZXRFcnJvciggJ2NoYW5uZWxzJywgJycgKTtcbiAgICAgICAgdGhpcy51cGRhdGVDdXJyZW50Q2hhbm5lbCgpO1xuICAgICAgICB0aGlzLmFwcGx5Um91dGUoIHdpbmRvdy5sb2NhdGlvbi5oYXNoICk7XG4gICAgICB9KTtcbiAgICB9LFxuXG4gICAgLy8gZ2V0IHNvbmdzIGxpc3QgZm9yIGEgY2hhbm5lbCBmcm9tIGFwaVxuICAgIC8vIGdldFNvbmdzKCBjaGFubmVsLCBjYiApIHtcbiAgICAvLyAgIGlmICggIWNoYW5uZWwgfHwgIWNoYW5uZWwuaWQgfHwgIWNoYW5uZWwuc29uZ3N1cmwgKSByZXR1cm47XG4gICAgLy8gICBpZiAoICF0aGlzLmlzQ3VycmVudENoYW5uZWwoIGNoYW5uZWwgKSApIHsgdGhpcy5zb25ncyA9IFtdOyB0aGlzLnRyYWNrID0ge307IH1cblxuICAgIC8vICAgX3NvbWEuZ2V0U29uZ3MoIGNoYW5uZWwsICggZXJyLCBzb25ncyApID0+IHtcbiAgICAvLyAgICAgaWYgKCBlcnIgKSByZXR1cm4gdGhpcy5zZXRFcnJvciggJ3NvbmdzJywgZXJyICk7XG4gICAgLy8gICAgIGlmICggdHlwZW9mIGNiID09PSAnZnVuY3Rpb24nICkgY2IoIHNvbmdzICk7XG4gICAgLy8gICAgIHRoaXMudHJhY2sgPSBzb25ncy5zaGlmdCgpO1xuICAgIC8vICAgICB0aGlzLnNvbmdzID0gc29uZ3Muc2xpY2UoIDAsIDMgKTtcbiAgICAvLyAgICAgdGhpcy5zZXRFcnJvciggJ3NvbmdzJywgJycgKTtcbiAgICAvLyAgIH0pO1xuICAgIC8vIH0sXG5cbiAgICAvLyBjaGVja3MgaXMgYSBjaGFubmVsIGlzIGN1cnJlbnRseSBzZWxlY3RlZFxuICAgIGlzQ3VycmVudENoYW5uZWwoIGNoYW5uZWwgKSB7XG4gICAgICBpZiAoICFjaGFubmVsIHx8ICFjaGFubmVsLmlkIHx8ICF0aGlzLmNoYW5uZWwuaWQgKSByZXR1cm4gZmFsc2U7XG4gICAgICBpZiAoIHRoaXMuY2hhbm5lbC5pZCAhPT0gY2hhbm5lbC5pZCApIHJldHVybiBmYWxzZTtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH0sXG5cbiAgICAvLyB1cGRhdGUgZGF0YSBmb3IgY3VycmVudCBzZWxlY3RlZCBjaGFubmVsXG4gICAgdXBkYXRlQ3VycmVudENoYW5uZWwoKSB7XG4gICAgICBmb3IgKCBsZXQgYyBvZiB0aGlzLmNoYW5uZWxzICkge1xuICAgICAgICAvLyBzZWUgaWYgY2hhbm5lbCBoYXMgYmVlbiBzYXZlZCBhcyBhIGZhdm9yaXRlXG4gICAgICAgIGMuZmF2b3JpdGUgPSAoIHRoaXMuZmF2b3JpdGVzLmluZGV4T2YoIGMuaWQgKSA+PSAwICk7XG4gICAgICAgIC8vIHNlZSBpZiBjaGFubmVsIGlzIGN1cnJlbnRseSBzZWxlY3RlZFxuICAgICAgICBpZiAoIHRoaXMuaXNDdXJyZW50Q2hhbm5lbCggYyApICkge1xuICAgICAgICAgIHRoaXMuY2hhbm5lbCA9IE9iamVjdC5hc3NpZ24oIHRoaXMuY2hhbm5lbCwgYyApO1xuICAgICAgICAgIGMuYWN0aXZlID0gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0sXG5cbiAgICAvLyBwbGF5IGF1ZGlvIHN0cmVhbSBmb3IgYSBjaGFubmVsXG4gICAgcGxheUNoYW5uZWwoIGNoYW5uZWwgKSB7XG4gICAgICAvLyBpZih0aGlzLmdlc3R1cmVfYWN0aW9uID09IGZhbHNlKSB7IHRoaXMuZ2VzdHVyZV9hY3Rpb24gPSB0cnVlOyByZXR1cm47IH1cbiAgICAgIC8vIGlmICggdGhpcy5wbGF5aW5nIHx8ICFjaGFubmVsIHx8ICFjaGFubmVsLm1wM2ZpbGUgKSByZXR1cm47XG4gICAgICBpZiAoIHRoaXMucGxheWluZyB8fCAhY2hhbm5lbCApIHJldHVybjtcbiAgICAgIHRoaXMubG9hZGluZyA9IHRydWU7XG4gICAgICB0aGlzLmNsZWFyRXJyb3JzKCk7XG4gICAgICBfYXVkaW8ucGxheVNvdXJjZSggY2hhbm5lbC5zdHJlYW1fdXJpICk7XG4gICAgICBfYXVkaW8uc2V0Vm9sdW1lKCB0aGlzLnZvbHVtZSApO1xuICAgIH0sXG5cbiAgICAvLyBzZWxlY3QgYSBjaGFubmVsIHRvIHBsYXlcbiAgICBzZWxlY3RDaGFubmVsKCBjaGFubmVsICkge1xuICAgICAgaWYgKCAhY2hhbm5lbCB8fCAhY2hhbm5lbC5pZCApIHJldHVybjtcbiAgICAgIGlmICggdGhpcy5pc0N1cnJlbnRDaGFubmVsKCBjaGFubmVsICkgKSByZXR1cm47XG4gICAgICB0aGlzLmNsb3NlQXVkaW8oKTtcbiAgICAgIHRoaXMudG9nZ2xlU2lkZWJhciggZmFsc2UgKTtcbiAgICAgIC8vIHRoaXMucGxheUNoYW5uZWwoIGNoYW5uZWwgKTtcbiAgICAgIC8vIHRoaXMuZ2V0U29uZ3MoIGNoYW5uZWwgKTtcbiAgICAgIHRoaXMuY2hhbm5lbCA9IGNoYW5uZWw7XG4gICAgfSxcblxuICAgIC8vIHNldCBzdGF0aW9uIHJvdXRlXG4gICAgc2V0Um91dGUoIHJvdXRlICkge1xuICAgICAgcm91dGUgPSAnLycrIFN0cmluZyggcm91dGUgfHwgJycgKS5yZXBsYWNlKCAvXltcXCNcXC9dK3xbXFwvXSskL2csICcnICkudHJpbSgpO1xuICAgICAgd2luZG93LmxvY2F0aW9uLmhhc2ggPSByb3V0ZTtcbiAgICB9LFxuXG4gICAgLy8gcGFyc2UgdXJsIGhhc2ggcm91dGUgYWN0aW9uc1xuICAgIGFwcGx5Um91dGUoIHJvdXRlICkge1xuICAgICAgY29uc3QgZGF0YSAgID0gU3RyaW5nKCByb3V0ZSB8fCAnJyApLnJlcGxhY2UoIC9eW1xcI1xcL10rfFtcXC9dKyQvZywgJycgKS50cmltKCkuc3BsaXQoICcvJyApO1xuICAgICAgY29uc3QgYWN0aW9uID0gZGF0YS5sZW5ndGggPyBkYXRhLnNoaWZ0KCkgOiAnJztcbiAgICAgIGNvbnN0IGNvdW50cnkgPSBkYXRhLmxlbmd0aCA/IGRhdGEuc2hpZnQoKSA6ICcnO1xuICAgICAgY29uc3QgcGFyYW0gID0gZGF0YS5sZW5ndGggPyBkYXRhLnNoaWZ0KCkgOiAnJztcblxuICAgICAgaWYgKCAhYWN0aW9uICkge1xuICAgICAgICB0aGlzLmNsb3NlQXVkaW8oKTtcbiAgICAgICAgdGhpcy5yZXNldFBsYXllcigpO1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgICBpZiAoIGFjdGlvbiA9PT0gJ2NoYW5uZWwnICYmIHBhcmFtICkge1xuICAgICAgICBjb25zdCBjaGFubmVsID0gdGhpcy5jaGFubmVscy5maWx0ZXIoIGMgPT4gKCBjLmlkID09PSBwYXJhbSApICkuc2hpZnQoKTtcbiAgICAgICAgdGhpcy5zZWxlY3RDaGFubmVsKCBjaGFubmVsICk7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICB9LFxuXG4gICAgLy8gb24ga2V5Ym9hcmQgZXZlbnRzXG4gICAgb25LZXlib2FyZCggZSApIHtcbiAgICAgIGNvbnN0IGsgPSBlLmtleSB8fCAnJztcbiAgICAgIGlmICggayA9PT0gJyAnICYmIHRoaXMuY2hhbm5lbC5pZCApIHJldHVybiB0aGlzLnRvZ2dsZVBsYXkoKTtcbiAgICAgIGlmICggayA9PT0gJ0VudGVyJyApIHJldHVybiB0aGlzLnRvZ2dsZVNpZGViYXIoIHRydWUgKTtcbiAgICAgIGlmICggayA9PT0gJ0VzY2FwZScgKSByZXR1cm4gdGhpcy50b2dnbGVTaWRlYmFyKCBmYWxzZSApO1xuICAgIH0sXG5cbiAgICAvLyBzdGFydCB0cmFja2luZyBwbGF5YmFjayB0aW1lXG4gICAgc3RhcnRDbG9jaygpIHtcbiAgICAgIHRoaXMuc3RvcENsb2NrKCk7XG4gICAgICB0aGlzLnRpbWVTdGFydCA9IERhdGUubm93KCk7XG4gICAgICB0aGlzLnRpbWVJdHYgPSBzZXRJbnRlcnZhbCggdGhpcy51cGRhdGVDbG9jaywgMTAwMCApO1xuICAgICAgdGhpcy51cGRhdGVDbG9jaygpO1xuICAgIH0sXG5cbiAgICAvLyB1cGRhdGUgdHJhY2tpbmcgcGxheWJhY2sgdGltZVxuICAgIHVwZGF0ZUNsb2NrKCkge1xuICAgICAgbGV0IHAgPSBuID0+ICggbiA8IDEwICkgPyAnMCcrbiA6ICcnK247XG4gICAgICBsZXQgZWxhcHNlZCA9ICggRGF0ZS5ub3coKSAtIHRoaXMudGltZVN0YXJ0ICkgLyAxMDAwO1xuICAgICAgbGV0IHNlY29uZHMgPSBNYXRoLmZsb29yKCBlbGFwc2VkICUgNjAgKTtcbiAgICAgIGxldCBtaW51dGVzID0gTWF0aC5mbG9vciggZWxhcHNlZCAvIDYwICUgNjAgKTtcbiAgICAgIGxldCBob3VycyAgID0gTWF0aC5mbG9vciggZWxhcHNlZCAvIDM2MDAgKTtcbiAgICAgIHRoaXMudGltZURpc3BsYXkgPSBwKCBob3VycyApICsnOicrIHAoIG1pbnV0ZXMgKSArJzonKyBwKCBzZWNvbmRzICk7XG4gICAgfSxcblxuICAgIC8vIHN0b3AgdHJhY2tpbmcgcGxheWJhY2sgdGltZVxuICAgIHN0b3BDbG9jaygpIHtcbiAgICAgIGlmICggdGhpcy50aW1lSXR2ICkgY2xlYXJJbnRlcnZhbCggdGhpcy50aW1lSXR2ICk7XG4gICAgICB0aGlzLnRpbWVJdHYgPSBudWxsO1xuICAgIH0sXG5cbiAgICAvLyBjbGVhciB0aW1lciByZWZzXG4gICAgY2xlYXJUaW1lcnMoKSB7XG4gICAgICBpZiAoIHRoaXMuc3RvICkgY2xlYXJUaW1lb3V0KCB0aGlzLnN0byApO1xuICAgICAgaWYgKCB0aGlzLml0diApIGNsZWFySW50ZXJ2YWwoIHRoaXMuaXR2ICk7XG4gICAgICBpZiAoIHRoaXMuYW5mICkgY2FuY2VsQW5pbWF0aW9uRnJhbWUoIHRoaXMuYW5mICk7XG4gICAgfSxcbiAgfSxcblxuICAvLyBvbiBhcHAgbW91bnRlZFxuICBtb3VudGVkKCkge1xuICAgIHRoaXMubG9hZFNvcnRPcHRpb25zKCk7XG4gICAgdGhpcy5sb2FkRmF2b3JpdGVzKCk7XG4gICAgdGhpcy5nZXRDaGFubmVscyggdHJ1ZSApO1xuICAgIHRoaXMuc2V0dXBBdWRpbygpO1xuICAgIHRoaXMuc2V0dXBDYW52YXMoKTtcbiAgICB0aGlzLnVwZGF0ZUNhbnZhcygpO1xuICAgIHRoaXMuc2V0dXBNYWludGVuYW5jZSgpO1xuICAgIHRoaXMuaW5pdFBsYXllcigpO1xuICB9LFxuXG4gIC8vIG9uIGFwcCBkZXN0cm95ZWRcbiAgZGVzdHJveWVkKCkge1xuICAgIHRoaXMuY2xvc2VBdWRpbygpO1xuICAgIHRoaXMuY2xlYXJUaW1lcnMoKTtcbiAgfVxufSk7Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///2\n')},function(module,exports){eval("// removed by extract-text-webpack-plugin\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvc2Nzcy9hcHAuc2Nzcz85ZTBlIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBIiwiZmlsZSI6IjMuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvLyByZW1vdmVkIGJ5IGV4dHJhY3QtdGV4dC13ZWJwYWNrLXBsdWdpbiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///3\n")}]);