(function(F){var B={};function g(I){if(B[I]){return B[I].exports}var Q=B[I]={i:I,l:false,exports:{}};F[I].call(Q.exports,Q,Q.exports,g);Q.l=true;return Q.exports}g.m=F;g.c=B;g.d=function(I,Q,F){if(!g.o(I,Q)){Object.defineProperty(I,Q,{enumerable:true,get:F})}};g.r=function(I){if(typeof Symbol!=="undefined"&&Symbol.toStringTag){Object.defineProperty(I,Symbol.toStringTag,{value:"Module"})}Object.defineProperty(I,"__esModule",{value:true})};g.t=function(Q,I){if(I&1)Q=g(Q);if(I&8)return Q;if(I&4&&typeof Q==="object"&&Q&&Q.__esModule)return Q;var F=Object.create(null);g.r(F);Object.defineProperty(F,"default",{enumerable:true,value:Q});if(I&2&&typeof Q!="string")for(var B in Q)g.d(F,B,function(I){return Q[I]}.bind(null,B));return F};g.n=function(Q){var I=Q&&Q.__esModule?function I(){return Q["default"]}:function I(){return Q};g.d(I,"a",I);return I};g.o=function(I,Q){return Object.prototype.hasOwnProperty.call(I,Q)};g.p="";return g(g.s=2)})([function(module,exports){eval("/**\n * Vue custom filters\n */\n\n// comma separate long numerical values\nVue.filter('toCommas', function (num, decimals) {\n  var o = { style: 'decimal', minimumFractionDigits: decimals, maximumFractionDigits: decimals };\n  return new Intl.NumberFormat('en-US', o).format(num);\n});\n\n// sanitize text data by only allowing alnums and some symbols\nVue.filter('toText', function (str, def) {\n  str = String(str || '').replace(/[^\\w\\`\\'\\-\\,\\.\\!\\?]+/g, ' ').replace(/\\s\\s+/g, ' ').trim();\n  return str || String(def || '');\n});\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvanMvZmlsdGVycy5qcz85OTI2Il0sIm5hbWVzIjpbIlZ1ZSIsImZpbHRlciIsIm51bSIsImRlY2ltYWxzIiwibyIsInN0eWxlIiwibWluaW11bUZyYWN0aW9uRGlnaXRzIiwibWF4aW11bUZyYWN0aW9uRGlnaXRzIiwiSW50bCIsIk51bWJlckZvcm1hdCIsImZvcm1hdCIsInN0ciIsImRlZiIsIlN0cmluZyIsInJlcGxhY2UiLCJ0cmltIl0sIm1hcHBpbmdzIjoiQUFBQTs7OztBQUlBO0FBQ0FBLElBQUlDLE1BQUosQ0FBWSxVQUFaLEVBQXdCLFVBQUVDLEdBQUYsRUFBT0MsUUFBUCxFQUFxQjtBQUMzQyxNQUFJQyxJQUFJLEVBQUVDLE9BQU8sU0FBVCxFQUFvQkMsdUJBQXVCSCxRQUEzQyxFQUFxREksdUJBQXVCSixRQUE1RSxFQUFSO0FBQ0EsU0FBTyxJQUFJSyxLQUFLQyxZQUFULENBQXVCLE9BQXZCLEVBQWdDTCxDQUFoQyxFQUFvQ00sTUFBcEMsQ0FBNENSLEdBQTVDLENBQVA7QUFDRCxDQUhEOztBQUtBO0FBQ0FGLElBQUlDLE1BQUosQ0FBWSxRQUFaLEVBQXNCLFVBQUVVLEdBQUYsRUFBT0MsR0FBUCxFQUFnQjtBQUNwQ0QsUUFBTUUsT0FBUUYsT0FBTyxFQUFmLEVBQW9CRyxPQUFwQixDQUE2Qix1QkFBN0IsRUFBc0QsR0FBdEQsRUFBNERBLE9BQTVELENBQXFFLFFBQXJFLEVBQStFLEdBQS9FLEVBQXFGQyxJQUFyRixFQUFOO0FBQ0EsU0FBT0osT0FBT0UsT0FBUUQsT0FBTyxFQUFmLENBQWQ7QUFDRCxDQUhEIiwiZmlsZSI6IjAuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIFZ1ZSBjdXN0b20gZmlsdGVyc1xuICovXG5cbi8vIGNvbW1hIHNlcGFyYXRlIGxvbmcgbnVtZXJpY2FsIHZhbHVlc1xuVnVlLmZpbHRlciggJ3RvQ29tbWFzJywgKCBudW0sIGRlY2ltYWxzICkgPT4ge1xuICBsZXQgbyA9IHsgc3R5bGU6ICdkZWNpbWFsJywgbWluaW11bUZyYWN0aW9uRGlnaXRzOiBkZWNpbWFscywgbWF4aW11bUZyYWN0aW9uRGlnaXRzOiBkZWNpbWFscyB9O1xuICByZXR1cm4gbmV3IEludGwuTnVtYmVyRm9ybWF0KCAnZW4tVVMnLCBvICkuZm9ybWF0KCBudW0gKTtcbn0pO1xuXG4vLyBzYW5pdGl6ZSB0ZXh0IGRhdGEgYnkgb25seSBhbGxvd2luZyBhbG51bXMgYW5kIHNvbWUgc3ltYm9sc1xuVnVlLmZpbHRlciggJ3RvVGV4dCcsICggc3RyLCBkZWYgKSA9PiB7XG4gIHN0ciA9IFN0cmluZyggc3RyIHx8ICcnICkucmVwbGFjZSggL1teXFx3XFxgXFwnXFwtXFwsXFwuXFwhXFw/XSsvZywgJyAnICkucmVwbGFjZSggL1xcc1xccysvZywgJyAnICkudHJpbSgpO1xuICByZXR1cm4gc3RyIHx8IFN0cmluZyggZGVmIHx8ICcnICk7XG59KTtcbiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///0\n")},function(module,exports){eval('/**\n * Vue component used to toggle channel favorite\n */\nVue.component(\'fav-btn\', {\n  props: {\n    id: { type: String, default: \'\', required: true },\n    active: { type: Boolean, default: false }\n  },\n  template: \'\\n    <button class="fav-btn" @click.stop="$emit( \\\'change\\\', id, !active )">\\n      <i v-if="active" class="fa fa-heart text-primary fx fx-drop-in" key="on"></i>\\n      <i v-else class="fa fa-heart-o fx fx-drop-in" key="off"></i>\\n    </button>\'\n});\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvanMvZmF2b3JpdGUuanM/ZmI3ZSJdLCJuYW1lcyI6WyJWdWUiLCJjb21wb25lbnQiLCJwcm9wcyIsImlkIiwidHlwZSIsIlN0cmluZyIsImRlZmF1bHQiLCJyZXF1aXJlZCIsImFjdGl2ZSIsIkJvb2xlYW4iLCJ0ZW1wbGF0ZSJdLCJtYXBwaW5ncyI6IkFBQUE7OztBQUdBQSxJQUFJQyxTQUFKLENBQWUsU0FBZixFQUEwQjtBQUN4QkMsU0FBTztBQUNMQyxRQUFJLEVBQUVDLE1BQU1DLE1BQVIsRUFBZ0JDLFNBQVMsRUFBekIsRUFBNkJDLFVBQVUsSUFBdkMsRUFEQztBQUVMQyxZQUFRLEVBQUVKLE1BQU1LLE9BQVIsRUFBaUJILFNBQVMsS0FBMUI7QUFGSCxHQURpQjtBQUt4Qkk7QUFMd0IsQ0FBMUIiLCJmaWxlIjoiMS5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogVnVlIGNvbXBvbmVudCB1c2VkIHRvIHRvZ2dsZSBjaGFubmVsIGZhdm9yaXRlXG4gKi9cblZ1ZS5jb21wb25lbnQoICdmYXYtYnRuJywge1xuICBwcm9wczoge1xuICAgIGlkOiB7IHR5cGU6IFN0cmluZywgZGVmYXVsdDogJycsIHJlcXVpcmVkOiB0cnVlIH0sXG4gICAgYWN0aXZlOiB7IHR5cGU6IEJvb2xlYW4sIGRlZmF1bHQ6IGZhbHNlIH0sXG4gIH0sXG4gIHRlbXBsYXRlOiBgXG4gICAgPGJ1dHRvbiBjbGFzcz1cImZhdi1idG5cIiBAY2xpY2suc3RvcD1cIiRlbWl0KCAnY2hhbmdlJywgaWQsICFhY3RpdmUgKVwiPlxuICAgICAgPGkgdi1pZj1cImFjdGl2ZVwiIGNsYXNzPVwiZmEgZmEtaGVhcnQgdGV4dC1wcmltYXJ5IGZ4IGZ4LWRyb3AtaW5cIiBrZXk9XCJvblwiPjwvaT5cbiAgICAgIDxpIHYtZWxzZSBjbGFzcz1cImZhIGZhLWhlYXJ0LW8gZnggZngtZHJvcC1pblwiIGtleT1cIm9mZlwiPjwvaT5cbiAgICA8L2J1dHRvbj5gLFxufSk7XG4iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///1\n')},function(module,__webpack_exports__,__webpack_require__){"use strict";eval('// ESM COMPAT FLAG\n__webpack_require__.r(__webpack_exports__);\n\n// EXTERNAL MODULE: ./src/scss/app.scss\nvar app = __webpack_require__(3);\n\n// EXTERNAL MODULE: ./src/js/filters.js\nvar filters = __webpack_require__(0);\n\n// EXTERNAL MODULE: ./src/js/favorite.js\nvar favorite = __webpack_require__(1);\n\n// CONCATENATED MODULE: ./src/js/station.js\n/**\n * Radio stations handler\n */\n/* harmony default export */ var station = ({\n\n  // get channels data from api\n  getChannels: function getChannels(callback) {\n    // const apiurl = \'https://somafm.com/channels.json\';\n    // const error  = \'There was a problem fetching the latest list of music channels from SomaFM.\';\n\n    var channels = { "channels": [\n      // {\n      //   "id": "ardan-radio-bandung",\n      //   "country_display": "Indonesia",\n      //   "city_display": "Bandung",\n      //   "frequency": "105.9 FM",\n      //   "title": "Ardan Radio",\n      //   "stream_uri": "http://listento.ardanradio.com:1059/stream/1/",\n      //   "description": "Ardan is a favorite radio for young people in Bandung.",\n      //   "genre": "pop",\n      //   "largeimage": "/img/stations/3.jpg"\n      // },\n      // {\n      //   "id": "bens-radio-jakarta",\n      //   "country_display": "Indonesia",\n      //   "city_display": "Jakarta",\n      //   "frequency": "106.2 FM",\n      //   "title": "Bens Radio",\n      //   "stream_uri": "http://175.103.58.72:8000/;stream.mp3",\n      //   "description": "The radio which has the tagline \'Betawi Punye Gaye Sele Aje Aje\' was created by the ideals of its founder to continue preserving the cultural traditions of the ancestors.",\n      //   "genre": "dangdut",\n      //   "largeimage": "/img/stations/4.jpg"\n      // },\n      {\n        "id": "thebeat-radio-plus-bali",\n        "country_display": "Indonesia",\n        "city_display": "Denpasar, Bali",\n        "frequency": "98.5 FM",\n        "title": "The Beat Radio Plus",\n        "stream_uri": "https://streaming.radio.co/sf61c46912/listen",\n        "description": "Broadcasted from Bali with the finest electronic music and more.",\n        "genre": "pop",\n        "largeimage": "/img/stations/5.jpg"\n      }, {\n        "id": "brava-radio-jakarta",\n        "country_display": "Indonesia",\n        "city_display": "Jakarta",\n        "frequency": "103.8 FM",\n        "title": "Brava Radio",\n        "stream_uri": "https://stream.radiojar.com/5k7t0rq3bnzuv",\n        "description": "Business radio station for business people and decision makers.",\n        "genre": "pop",\n        "largeimage": "/img/stations/2.jpg"\n      }, {\n        "id": "cosmopolitan-fm-jakarta",\n        "country_display": "Indonesia",\n        "city_display": "Jakarta",\n        "frequency": "90.4 FM",\n        "title": "Cosmopolitan FM",\n        "stream_uri": "https://stream.radiojar.com/u7d8heq3bnzuv",\n        "description": "Aimed at active, dynamic, expressive, and broad-minded women.",\n        "genre": "pop",\n        "largeimage": "/img/stations/2.png"\n      },\n      // {\n      //   "id": "delta-fm-jakarta",\n      //   "country_display": "Indonesia",\n      //   "city_display": "Jakarta",\n      //   "frequency": "99.1 FM",\n      //   "title": "Delta FM",\n      //   "stream_uri": "http://live.deltafm.net:9002/stream",\n      //   "description": "Delta FM is a radio station for young adults with a contemporary hot adult music format that plays the most delicious songs.",\n      //   "genre": "pop",\n      //   "largeimage": "/img/stations/3.png"\n      // },\n      {\n        "id": "hardrock-fm-jakarta",\n        "country_display": "Indonesia",\n        "city_display": "Jakarta",\n        "frequency": "87.6 FM",\n        "title": "Hard Rock FM",\n        "stream_uri": "https://stream.radiojar.com/7csmg90fuqruv",\n        "description": "Plays music of all genres and provides information about lifestyle and entertainment.",\n        "genre": "pop",\n        "largeimage": "/img/stations/3.jpeg"\n      }, {\n        "id": "indika-fm-jakarta",\n        "country_display": "Indonesia",\n        "city_display": "Jakarta",\n        "frequency": "91.6 FM",\n        "title": "Indika FM",\n        "stream_uri": "https://s2.radio.co/sf58a82d7d/listen",\n        "description": "Known as clubbing radio, their tagline is \\"Sounds of Jakarta\\".",\n        "genre": "pop|club",\n        "largeimage": "/img/stations/2.jpeg"\n      }, {\n        "id": "i-radio-jakarta",\n        "country_display": "Indonesia",\n        "city_display": "Jakarta",\n        "frequency": "89.6 FM",\n        "title": "I-Radio",\n        "stream_uri": "https://stream.radiojar.com/4ywdgup3bnzuv",\n        "description": "Only plays 100 percent of Indonesian music with entertaining and inspirational content.",\n        "genre": "pop",\n        "largeimage": "/img/stations/1.jpeg"\n      }, {\n        "id": "prambors-jakarta",\n        "country_display": "Indonesia",\n        "city_display": "Jakarta",\n        "frequency": "102.2 FM",\n        "title": "Prambors",\n        "stream_uri": "http://masima.rastream.com/masima-pramborsjakarta",\n        "description": "Indonesia No.1 Hit Music Station that play pop music for teenagers and young adults.",\n        "genre": "pop",\n        "largeimage": "/img/stations/1.png"\n      },\n      // {\n      //   "id": "suarasurabaya-surabaya",\n      //   "country_display": "Indonesia",\n      //   "city_display": "Surabaya",\n      //   "frequency": "100 FM",\n      //   "title": "Suara Surabaya",\n      //   "stream_uri": "http://s9.viastreaming.net:7020/stream/1/",\n      //   "description": "Suara Surabaya FM is a radio that provides news about Surabaya and national news.",\n      //   "genre": "pop",\n      //   "largeimage": "/img/stations/4.jpeg"\n      // },\n      {\n        "id": "trax-fm-jakarta",\n        "country_display": "Indonesia",\n        "city_display": "Jakarta",\n        "frequency": "104.1 FM",\n        "title": "Trax FM",\n        "stream_uri": "https://stream.radiojar.com/rrqf78p3bnzuv",\n        "description": "Youth radio station that carries the campaign \\"Hits What You Like\\"",\n        "genre": "pop",\n        "largeimage": "/img/stations/1.jpg"\n      }] };\n\n    var list = this._parseChannels(channels.channels);\n    if (!list.length) return callback(error, []);\n    return callback(null, list);\n\n    // axios.get( apiurl ).then( res => {\n    //   const list = this._parseChannels( res.data.channels );      \n    //   if ( !list.length ) return callback( error, [] );\n    //   return callback( null, list );\n    // })\n    // .catch( e => {\n    //   return callback( error + String( e.message || \'\' ), [] );\n    // });\n  },\n\n\n  // fetch songs for a channel\n  getSongs: function getSongs(channel, callback) {\n    // const apiurl = \'\';\n    // const title  = channel.title || \'...\';\n    // const error  = \'There was a problem loading the list of songs for channel \'+ title +\' from SomaFM.\';\n\n    // axios.get( apiurl ).then( res => {\n    //   if ( !res.data.songs ) return callback( error, [] );\n    //   return callback( null, res.data.songs );\n    // })\n    // .catch( e => {\n    //   return callback( error + String( e.message || \'\' ), [] );\n    // });\n  },\n\n\n  // parse channels list from api response\n  _parseChannels: function _parseChannels(channels) {\n    var output = [];\n    if (Array.isArray(channels)) {\n      var _iteratorNormalCompletion = true;\n      var _didIteratorError = false;\n      var _iteratorError = undefined;\n\n      try {\n        for (var _iterator = channels[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n          var c = _step.value;\n\n          // if ( !Array.isArray( c.playlists ) ) continue;\n          c.stream_uri = c.stream_uri;\n          c.plsfile = \'\';\n          c.mp3file = \'\';\n          c.songsurl = \'\';\n          c.infourl = \'\';\n          c.twitter = \'\';\n          c.route = \'/channel/\' + c.id;\n          c.listeners = 0;\n          c.updated = 0;\n          c.favorite = false;\n          c.active = false;\n          output.push(c);\n        }\n      } catch (err) {\n        _didIteratorError = true;\n        _iteratorError = err;\n      } finally {\n        try {\n          if (!_iteratorNormalCompletion && _iterator.return) {\n            _iterator.return();\n          }\n        } finally {\n          if (_didIteratorError) {\n            throw _iteratorError;\n          }\n        }\n      }\n    }\n    return output;\n  }\n});\n// CONCATENATED MODULE: ./src/js/audio.js\n/**\n * Audio handler object\n */\n/* harmony default export */ var audio = ({\n  _audio: new Audio(),\n  _context: null,\n  _freq: new Uint8Array(),\n  _source: null,\n  _gain: null,\n  _analyser: null,\n  _error_status: 0,\n\n  // setup audio routing\n  setupAudio: function setupAudio() {\n    // this._audio.addEventListener( \'canplaythrough\', e => {\n    //   // this._audio.play();\n    // });\n    return this._audio;\n  },\n\n\n  // update and return analyser frequency data\n  getFreqData: function getFreqData() {\n    return this._freq;\n  },\n\n\n  // set audio volume\n  setVolume: function setVolume(volume) {\n    // if ( !this._gain ) return;\n    volume = parseFloat(volume) || 0.0;\n    volume = volume < 0 ? 0 : volume;\n    volume = volume > 1 ? 1 : volume;\n    this._audio.volume = volume;\n    // this._gain.gain.value = volume;\n  },\n\n\n  // play audio source url\n  playSource: function playSource(source) {\n    this.stopAudio();\n    // this._audio.src = String( source || \'\' ) + \'?x=\' + Date.now();\n    this._audio.src = String(source || \'\');\n    // this._audio.src = \'http://bogor.nagaswarafm.com:8088/stream\';\n    // this._audio.load();\n    this._audio.volume = 1;\n    this._audio.play();\n  },\n\n\n  // stop playing audio\n  stopAudio: function stopAudio() {\n    try {\n      this._audio.pause();\n    } catch (e) {}\n    try {\n      this._audio.stop();\n    } catch (e) {}\n    try {\n      this._audio.close();\n    } catch (e) {}\n  }\n});\n// CONCATENATED MODULE: ./src/js/light.js\n/**\n * ThreeJS scene light object\n */\n/* harmony default export */ var light = ({\n  color: null,\n  light: null,\n\n  // create and add light to scene\n  create: function create(box, scene) {\n    this.color = new THREE.Color();\n    this.color.setHSL(0, .5, .5);\n\n    this.light = new THREE.PointLight(0xffffff, 4, 400);\n    this.light.position.set(0, 0, 420);\n    this.light.castShadow = false;\n    this.light.target = scene;\n    this.light.color = this.color;\n\n    scene.add(this.light);\n  },\n\n\n  // animate light on frame loop\n  update: function update(box, mouse, freq) {\n    var dist = Math.floor(freq[1] | 0) / 255;\n    var color = Math.floor(freq[16] | 0) / 255;\n\n    this.light.distance = 360 + 140 * dist;\n    this.color.setHSL(color, .5, .5);\n  }\n});\n// CONCATENATED MODULE: ./src/js/sphere.js\n/**\n * ThreeJS scene sphere object\n */\n/* harmony default export */ var sphere = ({\n  group: null,\n  shapes: [],\n  move: new THREE.Vector3(0, 0, 0),\n  ease: 8,\n\n  // create and add sphere to scene\n  create: function create(box, scene) {\n    this.group = new THREE.Object3D();\n    var shape1 = new THREE.CircleGeometry(1, 10);\n    var shape2 = new THREE.CircleGeometry(2, 20);\n    var points = new THREE.SphereGeometry(100, 30, 14).vertices;\n    var material = new THREE.MeshLambertMaterial({ color: 0xffffff, opacity: 0, side: THREE.DoubleSide });\n    var center = new THREE.Vector3(0, 0, 0);\n    var radius = 12;\n\n    for (var i = 0; i < points.length; i++) {\n      var _points$i = points[i],\n          x = _points$i.x,\n          y = _points$i.y,\n          z = _points$i.z;\n\n      var home = { x: x, y: y, z: z };\n      var cycle = THREE.Math.randInt(0, 100);\n      var pace = THREE.Math.randInt(10, 30);\n      var shape = new THREE.Mesh(i % 2 ? shape1 : shape2, material);\n\n      shape.position.set(x, y, z);\n      shape.lookAt(center);\n      shape.userData = { radius: radius, cycle: cycle, pace: pace, home: home };\n      this.group.add(shape);\n    }\n    this.group.position.set(500, 0, 0);\n    this.group.rotation.x = Math.PI / 2 + .6;\n    scene.add(this.group);\n  },\n\n\n  // animate sphere on frame loop\n  update: function update(box, mouse, freq) {\n    var bass = Math.floor(freq[1] | 0) / 255;\n    var xoff = box.width < 1080 ? 0 : 60;\n    var zoff = box.width < 1080 ? -80 : 10;\n\n    this.move.x = xoff + -(mouse.x * 0.015);\n    this.group.position.x += (this.move.x - this.group.position.x) / this.ease;\n    this.group.position.y += (this.move.y - this.group.position.y) / this.ease;\n    this.group.position.z = zoff + bass * 80;\n    this.group.rotation.y -= 0.003;\n\n    for (var i = 0; i < this.group.children.length; i++) {\n      var shape = this.group.children[i];\n      var _shape$userData = shape.userData,\n          radius = _shape$userData.radius,\n          cycle = _shape$userData.cycle,\n          pace = _shape$userData.pace,\n          home = _shape$userData.home;\n\n\n      shape.position.set(home.x, home.y, home.z);\n      shape.translateZ(bass * Math.sin(cycle / pace) * radius);\n      shape.userData.cycle++;\n    }\n  }\n});\n// CONCATENATED MODULE: ./src/js/scene.js\n/**\n * ThreeJS scene handler\n */\n\n\n\n/* harmony default export */ var scene = ({\n  _wrap: null,\n  _canvas: null,\n  _renderer: null,\n  _scene: null,\n  _camera: null,\n  _box: null,\n  _mouse: { x: 0, y: 0 },\n  _objects: [],\n\n  // setup animation canvas\n  setupCanvas: function setupCanvas() {\n    this._wrap = document.querySelector(\'#player-wrap\');\n    this._canvas = document.querySelector(\'#player-canvas\');\n    this._box = this._wrap.getBoundingClientRect();\n\n    // setup scene and renderer\n    this._scene = new THREE.Scene();\n    this._renderer = new THREE.WebGLRenderer({ canvas: this._canvas, alpha: true, antialias: true, precision: \'lowp\' });\n    this._renderer.setClearColor(0x000000, 0);\n    this._renderer.setPixelRatio(window.devicePixelRatio);\n\n    // setup camera\n    this._camera = new THREE.PerspectiveCamera(60, this._box.width / this._box.height, 0.1, 20000);\n    this._camera.lookAt(this._scene.position);\n    this._camera.position.set(0, 0, 300);\n    this._camera.rotation.set(0, 0, 0);\n\n    // add and create objects\n    this._objects.push(light);\n    this._objects.push(sphere);\n    var _iteratorNormalCompletion = true;\n    var _didIteratorError = false;\n    var _iteratorError = undefined;\n\n    try {\n      for (var _iterator = this._objects[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n        var o = _step.value;\n        o.create(this._box, this._scene);\n      } // setup events\n    } catch (err) {\n      _didIteratorError = true;\n      _iteratorError = err;\n    } finally {\n      try {\n        if (!_iteratorNormalCompletion && _iterator.return) {\n          _iterator.return();\n        }\n      } finally {\n        if (_didIteratorError) {\n          throw _iteratorError;\n        }\n      }\n    }\n\n    window.addEventListener(\'mousemove\', this.updateMouse.bind(this));\n    window.addEventListener(\'resize\', this.updateSize.bind(this));\n    this.updateMouse();\n    this.updateSize();\n  },\n\n\n  // update custom objects in 3d scene\n  updateObjects: function updateObjects(freq) {\n    var _iteratorNormalCompletion2 = true;\n    var _didIteratorError2 = false;\n    var _iteratorError2 = undefined;\n\n    try {\n      for (var _iterator2 = this._objects[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {\n        var o = _step2.value;\n        o.update(this._box, this._mouse, freq);\n      }\n    } catch (err) {\n      _didIteratorError2 = true;\n      _iteratorError2 = err;\n    } finally {\n      try {\n        if (!_iteratorNormalCompletion2 && _iterator2.return) {\n          _iterator2.return();\n        }\n      } finally {\n        if (_didIteratorError2) {\n          throw _iteratorError2;\n        }\n      }\n    }\n\n    this._renderer.render(this._scene, this._camera);\n  },\n\n\n  // update canvas size\n  updateSize: function updateSize() {\n    if (!this._wrap || !this._canvas) return;\n    this._box = this._wrap.getBoundingClientRect();\n    this._canvas.width = this._box.width;\n    this._canvas.height = this._box.height;\n    this._camera.aspect = this._box.width / this._box.height;\n    this._camera.updateProjectionMatrix();\n    this._renderer.setSize(this._box.width, this._box.height);\n  },\n\n\n  // update mouse position from center of canvas\n  updateMouse: function updateMouse(e) {\n    if (!this._box) return;\n    var centerX = this._box.left + this._box.width / 2;\n    var centerY = this._box.top + this._box.height / 2;\n\n    if (e) {\n      this._mouse.x = Math.max(0, e.pageX || e.clientX || 0) - centerX;\n      this._mouse.y = Math.max(0, e.pageY || e.clientY || 0) - centerY;\n    } else {\n      this._mouse.x = centerX;\n      this._mouse.y = centerY;\n    }\n  }\n});\n// CONCATENATED MODULE: ./src/js/utils.js\n/**\n * Common utils\n */\n/* harmony default export */ var utils = ({\n\n  // get search results off a list for an obj key\n  search: function search(list, key, _search) {\n    var regxp = new RegExp(\'^(\' + _search + \')\', \'i\');\n    return list.filter(function (item) {\n      return regxp.test(item[key]);\n    });\n  },\n\n\n  // sort objects in an array by a key\n  sort: function sort(list, key, order, ignore) {\n    return list.sort(function (a, b) {\n      if (a.hasOwnProperty(key)) {\n\n        var _a = a[key];\n        var _b = b[key];\n\n        if (ignore) {\n          // sort strings using same case\n          _a = typeof _a === \'string\' ? _a.toUpperCase() : _a;\n          _b = typeof _b === \'string\' ? _b.toUpperCase() : _b;\n        }\n        if (order === \'asc\') {\n          if (_a < _b) return -1;\n          if (_a > _b) return 1;\n        }\n        if (order === \'desc\') {\n          if (_a > _b) return -1;\n          if (_a < _b) return 1;\n        }\n      }\n      return 0;\n    });\n  }\n});\n// CONCATENATED MODULE: ./src/js/store.js\n/**\n * Basic localStorage wrapper\n */\n/* harmony default export */ var store = ({\n\n  // save data\n  set: function set(key, data, ttl) {\n    if (!this._isStr(key)) return;\n    var time = Date.now();\n    var expire = Number(ttl) || 0;\n    var json = JSON.stringify({ time: time, expire: expire, data: data });\n    window.localStorage.setItem(key, json);\n  },\n\n\n  // get saved data\n  get: function get(key) {\n    if (!this._isStr(key)) return;\n    var json = window.localStorage.getItem(key) || \'{}\';\n    var parsed = JSON.parse(json) || {};\n    var time = parsed.time,\n        expire = parsed.expire,\n        data = parsed.data;\n\n    if (this._isExpired(time, expire)) this.delete(key);\n    return data;\n  },\n\n\n  // remove saved data\n  delete: function _delete(key) {\n    if (!this._isStr(key)) return;\n    window.localStorage.removeItem(key);\n  },\n\n\n  // check valid string\n  _isStr: function _isStr(str) {\n    return str && typeof str === \'string\';\n  },\n\n\n  // check if data saved has expired\n  _isExpired: function _isExpired(time, expire) {\n    if (!time || !expire) return false;\n    var now = Date.now();\n    var secs = (now - time) / 1000;\n    return secs >= expire ? true : false;\n  }\n});\n// CONCATENATED MODULE: ./src/app.js\n/**\n * Main app JS entry file.\n */\n\n\n\n// import _soma from \'./js/soma\';\n\n\n\n\n\n\n// main vue app\nnew Vue({\n  el: \'#app\',\n  data: {\n    // toggles\n    init: false,\n    visible: true,\n    playing: false,\n    loading: false,\n    sidebar: false,\n    // volume: 0.5,\n    volume: 1,\n    // channels stuff\n    channels: [],\n    channel: {},\n    songs: [],\n    track: {},\n    favorites: [],\n    errors: {},\n    // timer stuff\n    timeStart: 0,\n    timeDisplay: \'00:00:00\',\n    timeItv: null,\n    // sorting stuff\n    searchText: \'\',\n    sortParam: \'listeners\',\n    sortOrder: \'desc\',\n    // timer stuff\n    anf: null,\n    sto: null,\n    itv: null\n    // gesture_action: false,\n  },\n\n  // watch methods\n  watch: {\n\n    // watch playing status\n    playing: function playing() {\n      if (this.playing) {\n        this.startClock();\n      } else {\n        this.stopClock();\n      }\n    },\n\n\n    // update player volume\n    volume: function volume() {\n      audio.setVolume(this.volume);\n    }\n  },\n\n  // computed methods\n  computed: {\n\n    // filter channels list\n    channelsList: function channelsList() {\n      var _this = this;\n\n      var list = this.channels.slice();\n      var search = this.searchText.replace(/[^\\w\\s\\-]+/g, \'\').replace(/[\\r\\s\\t\\n]+/g, \' \').trim();\n\n      if (search && search.length > 1) {\n        list = utils.search(list, \'title\', search);\n      }\n      if (this.sortParam) {\n        list = utils.sort(list, this.sortParam, this.sortOrder, true);\n      }\n      if (this.channel.id) {\n        list = list.map(function (i) {\n          i.active = _this.channel.id === i.id ? true : false;\n          return i;\n        });\n      }\n      return list;\n    },\n\n\n    // filter songs list\n    songsList: function songsList() {\n      var list = this.songs.slice();\n      return list;\n    },\n\n\n    // sort-by label for buttons, etc\n    sortLabel: function sortLabel() {\n      switch (this.sortParam) {\n        case \'title\':\n          return \'Station Name\';\n        case \'listeners\':\n          return \'Listeners Count\';\n        case \'favorite\':\n          return \'Saved Favorites\';\n        case \'genre\':\n          return \'Music Genre\';\n      }\n    },\n\n\n    // check if audio can be played\n    canPlay: function canPlay() {\n      return this.channel.id && !this.loading ? true : false;\n    },\n\n\n    // check if a channel is selected\n    hasChannel: function hasChannel() {\n      return this.channel.id ? true : false;\n    },\n\n\n    // check if there are tracks loaded\n    hasSongs: function hasSongs() {\n      return this.songs.length ? true : false;\n    },\n\n\n    // check for errors that would affect playback\n    hasError: function hasError() {\n      if (this.errors.channels && !this.channels.length) return true;\n      if (this.errors.stream) return true;\n      return false;\n    }\n  },\n\n  // custom methods\n  methods: {\n\n    // run maintenance tasks on a timer\n    setupMaintenance: function setupMaintenance() {\n      var _this2 = this;\n\n      this.itv = setInterval(function () {\n        _this2.getChannels(); // update channels\n        // this.getSongs( this.channel ); // update channel tracks\n      }, 1000 * 30);\n    },\n\n\n    // set an error message\n    setError: function setError(key, err) {\n      var errors = Object.assign({}, this.errors);\n      errors[key] = String(err || \'\').trim();\n      if (err) console.warn(\'ERROR(\' + key + \'):\', err);\n      this.errors = errors;\n    },\n\n\n    // check if an error has been set for a key\n    checkError: function checkError(key) {\n      return key && this.errors.hasOwnProperty(key) && this.errors[key];\n    },\n\n\n    // clear all error messages\n    clearErrors: function clearErrors() {\n      var _this3 = this;\n\n      Object.keys(this.errors).forEach(function (key) {\n        _this3.errors[key] = \'\';\n      });\n    },\n\n\n    // show player when app is mounted\n    initPlayer: function initPlayer() {\n      var _this4 = this;\n\n      document.querySelector(\'#_spnr\').style.display = \'none\';\n      document.querySelector(\'#player-wrap\').style.opacity = \'1\';\n      document.addEventListener(\'visibilitychange\', function (e) {\n        _this4.visible = document.visibilityState === \'visible\';\n      });\n      window.addEventListener(\'hashchange\', function (e) {\n        return _this4.applyRoute(window.location.hash);\n      });\n      window.addEventListener(\'keydown\', this.onKeyboard);\n      document.getElementById(\'h2header\').addEventListener(\'click\', function (e) {\n        window.location.href = \'/\';\n      });\n      // window.addEventListener(\'click\', e => { this.gesture_action = true; });\n      // document.onclick = e => { this.gesture_action = true; };\n      this.init = true;\n    },\n\n\n    // reset selected channel\n    resetPlayer: function resetPlayer() {\n      this.closeAudio();\n      this.clearErrors();\n      this.channel = {};\n      this.songs = [];\n    },\n\n\n    // try resuming stream problem if possible\n    tryAgain: function tryAgain() {\n      this.clearErrors();\n      this.playChannel(this.channel);\n    },\n\n\n    // show/hide the sidebar\n    toggleSidebar: function toggleSidebar(toggle) {\n      this.sidebar = typeof toggle === \'boolean\' ? toggle : false;\n    },\n\n\n    // show sidebar at startup if there are no errors\n    initSidebar: function initSidebar() {\n      if (this.hasError) return;\n      // this.toggleSidebar( true );\n    },\n\n\n    // toggle stream playback for current selected channel\n    togglePlay: function togglePlay() {\n      if (this.loading) return;\n      if (this.playing) return this.closeAudio();\n      return this.playChannel(this.channel);\n    },\n\n\n    // load last sort options from store\n    loadSortOptions: function loadSortOptions() {\n      var opts = store.get(\'sorting_data\');\n      if (opts && opts.param) this.sortParam = opts.param;\n      if (opts && opts.order) this.sortOrder = opts.order;\n    },\n\n\n    // toggle sort order\n    toggleSortOrder: function toggleSortOrder() {\n      this.sortOrder = this.sortOrder === \'asc\' ? \'desc\' : \'asc\';\n    },\n\n\n    // apply sorting and toggle order\n    sortBy: function sortBy(param, order) {\n      if (this.sortParam === param) {\n        this.toggleSortOrder();\n      } else {\n        this.sortOrder = order || \'asc\';\n      }\n      this.sortParam = param;\n      store.set(\'sorting_data\', { param: this.sortParam, order: this.sortOrder });\n    },\n\n\n    // load saved favs list from store\n    loadFavorites: function loadFavorites() {\n      var favs = store.get(\'favorites_data\');\n      if (!Array.isArray(favs)) return;\n      this.favorites = favs;\n    },\n\n\n    // save favs to a .m3u file\n    saveFavorites: function saveFavorites() {\n      // let data = \'#EXTM3U\';\n      // for ( let id of this.favorites ) {\n      //   const channel = this.channels.filter( c => ( c.id === id ) ).shift();\n      //   if ( !channel ) continue;\n      //   data += \'\\n\\n\';\n      //   data += `#EXTINF:0,${channel.title} [SomaFM]\\n`;\n      //   data += `${channel.mp3file}`;\n      // }\n      // const elm = document.createElement( \'a\' );\n      // elm.setAttribute( \'href\', \'data:audio/mpegurl;charset=utf-8,\'+ encodeURIComponent( data ) );\n      // elm.setAttribute( \'download\', \'somafm_favorites.m3u\' );\n      // elm.setAttribute( \'target\', \'_blank\' );\n      // document.body.appendChild( elm );\n      // setTimeout( () => elm.click(), 100 );\n      // setTimeout( () => elm.remove(), 1000 );\n    },\n\n\n    // toggle favorite channel by id\n    toggleFavorite: function toggleFavorite(id, toggle) {\n      // let favs = this.favorites.slice();\n      // favs = favs.filter( fid => ( fid !== id ) );\n      // if ( toggle ) favs.push( id );\n      // this.favorites = favs;\n      // this.updateCurrentChannel();\n      // _store.set( \'favorites_data\', favs );\n    },\n\n\n    // setup audio routing and stream events\n    setupAudio: function setupAudio() {\n      var _this5 = this;\n\n      var a = audio.setupAudio();\n\n      a.addEventListener(\'waiting\', function (e) {\n        _this5.playing = false;\n        _this5.loading = true;\n\n        var sl = document.getElementById(\'station-logo\');\n        if (sl.classList.contains(\'fx-spin-right-station-logo\')) {\n          sl.classList.remove(\'fx-spin-right-station-logo\');\n        }\n      });\n      a.addEventListener(\'playing\', function (e) {\n        _this5.setError(\'stream\', \'\');\n        _this5.playing = true;\n        _this5.loading = false;\n\n        var sl = document.getElementById(\'station-logo\');\n        sl.classList.remove(\'fx-drop-in\');\n        sl.classList.add(\'fx-spin-right-station-logo\');\n      });\n      a.addEventListener(\'pause\', function (e) {\n        _this5.playing = false;\n        _this5.loading = false;\n\n        var sl = document.getElementById(\'station-logo\');\n        sl.classList.remove(\'fx-spin-right-station-logo\');\n      });\n      a.addEventListener(\'ended\', function (e) {\n        _this5.playing = false;\n        _this5.loading = false;\n      });\n      a.addEventListener(\'error\', function (e) {\n        _this5.closeAudio();\n        _this5.setError(\'stream\', \'The selected stream (\' + _this5.channel.title + \') could not load, or has stopped loading due to a network problem.\');\n        _this5.playing = false;\n        _this5.loading = false;\n      });\n    },\n\n\n    // close active audio\n    closeAudio: function closeAudio() {\n      audio.stopAudio();\n      this.playing = false;\n    },\n\n\n    // setup animation canvas\n    setupCanvas: function setupCanvas() {\n      scene.setupCanvas();\n    },\n\n\n    // audio visualizer animation loop\n    updateCanvas: function updateCanvas() {\n      this.anf = requestAnimationFrame(this.updateCanvas);\n      if (!this.visible) return;\n      var freq = audio.getFreqData();\n      scene.updateObjects(freq);\n    },\n\n\n    // get channels data from api\n    getChannels: function getChannels(sidebar) {\n      var _this6 = this;\n\n      station.getChannels(function (err, channels) {\n        if (err) return _this6.setError(\'channels\', err);\n        // this makes sidebar appear on startup, then I disable it\n        // if ( sidebar ) this.toggleSidebar( true );\n        _this6.channels = channels;\n        _this6.setError(\'channels\', \'\');\n        _this6.updateCurrentChannel();\n        _this6.applyRoute(window.location.hash);\n      });\n    },\n\n\n    // get songs list for a channel from api\n    // getSongs( channel, cb ) {\n    //   if ( !channel || !channel.id || !channel.songsurl ) return;\n    //   if ( !this.isCurrentChannel( channel ) ) { this.songs = []; this.track = {}; }\n\n    //   _soma.getSongs( channel, ( err, songs ) => {\n    //     if ( err ) return this.setError( \'songs\', err );\n    //     if ( typeof cb === \'function\' ) cb( songs );\n    //     this.track = songs.shift();\n    //     this.songs = songs.slice( 0, 3 );\n    //     this.setError( \'songs\', \'\' );\n    //   });\n    // },\n\n    // checks is a channel is currently selected\n    isCurrentChannel: function isCurrentChannel(channel) {\n      if (!channel || !channel.id || !this.channel.id) return false;\n      if (this.channel.id !== channel.id) return false;\n      return true;\n    },\n\n\n    // update data for current selected channel\n    updateCurrentChannel: function updateCurrentChannel() {\n      var _iteratorNormalCompletion = true;\n      var _didIteratorError = false;\n      var _iteratorError = undefined;\n\n      try {\n        for (var _iterator = this.channels[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n          var c = _step.value;\n\n          // see if channel has been saved as a favorite\n          c.favorite = this.favorites.indexOf(c.id) >= 0;\n          // see if channel is currently selected\n          if (this.isCurrentChannel(c)) {\n            this.channel = Object.assign(this.channel, c);\n            c.active = true;\n          }\n        }\n      } catch (err) {\n        _didIteratorError = true;\n        _iteratorError = err;\n      } finally {\n        try {\n          if (!_iteratorNormalCompletion && _iterator.return) {\n            _iterator.return();\n          }\n        } finally {\n          if (_didIteratorError) {\n            throw _iteratorError;\n          }\n        }\n      }\n    },\n\n\n    // play audio stream for a channel\n    playChannel: function playChannel(channel) {\n      // if(this.gesture_action == false) { this.gesture_action = true; return; }\n      // if ( this.playing || !channel || !channel.mp3file ) return;\n      if (this.playing || !channel) return;\n      this.loading = true;\n      this.clearErrors();\n      audio.playSource(channel.stream_uri);\n      audio.setVolume(this.volume);\n    },\n\n\n    // select a channel to play\n    selectChannel: function selectChannel(channel) {\n      if (!channel || !channel.id) return;\n      if (this.isCurrentChannel(channel)) return;\n      this.closeAudio();\n      this.toggleSidebar(false);\n      // this.playChannel( channel );\n      // this.getSongs( channel );\n      this.channel = channel;\n    },\n\n\n    // set station route\n    setRoute: function setRoute(route) {\n      route = \'/\' + String(route || \'\').replace(/^[\\#\\/]+|[\\/]+$/g, \'\').trim();\n      window.location.hash = route;\n    },\n\n\n    // parse url hash route actions\n    applyRoute: function applyRoute(route) {\n      var data = String(route || \'\').replace(/^[\\#\\/]+|[\\/]+$/g, \'\').trim().split(\'/\');\n      var action = data.length ? data.shift() : \'\';\n      var param = data.length ? data.shift() : \'\';\n\n      if (!action) {\n        this.closeAudio();\n        this.resetPlayer();\n        return;\n      }\n      if (action === \'channel\' && param) {\n        var channel = this.channels.filter(function (c) {\n          return c.id === param;\n        }).shift();\n        this.selectChannel(channel);\n        return;\n      }\n    },\n\n\n    // on keyboard events\n    onKeyboard: function onKeyboard(e) {\n      var k = e.key || \'\';\n      if (k === \' \' && this.channel.id) return this.togglePlay();\n      if (k === \'Enter\') return this.toggleSidebar(true);\n      if (k === \'Escape\') return this.toggleSidebar(false);\n    },\n\n\n    // start tracking playback time\n    startClock: function startClock() {\n      this.stopClock();\n      this.timeStart = Date.now();\n      this.timeItv = setInterval(this.updateClock, 1000);\n      this.updateClock();\n    },\n\n\n    // update tracking playback time\n    updateClock: function updateClock() {\n      var p = function p(n) {\n        return n < 10 ? \'0\' + n : \'\' + n;\n      };\n      var elapsed = (Date.now() - this.timeStart) / 1000;\n      var seconds = Math.floor(elapsed % 60);\n      var minutes = Math.floor(elapsed / 60 % 60);\n      var hours = Math.floor(elapsed / 3600);\n      this.timeDisplay = p(hours) + \':\' + p(minutes) + \':\' + p(seconds);\n    },\n\n\n    // stop tracking playback time\n    stopClock: function stopClock() {\n      if (this.timeItv) clearInterval(this.timeItv);\n      this.timeItv = null;\n    },\n\n\n    // clear timer refs\n    clearTimers: function clearTimers() {\n      if (this.sto) clearTimeout(this.sto);\n      if (this.itv) clearInterval(this.itv);\n      if (this.anf) cancelAnimationFrame(this.anf);\n    }\n  },\n\n  // on app mounted\n  mounted: function mounted() {\n    this.loadSortOptions();\n    this.loadFavorites();\n    this.getChannels(true);\n    this.setupAudio();\n    this.setupCanvas();\n    this.updateCanvas();\n    this.setupMaintenance();\n    this.initPlayer();\n  },\n\n\n  // on app destroyed\n  destroyed: function destroyed() {\n    this.closeAudio();\n    this.clearTimers();\n  }\n});\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///2\n')},function(module,exports){eval("// removed by extract-text-webpack-plugin\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvc2Nzcy9hcHAuc2Nzcz85ZTBlIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBIiwiZmlsZSI6IjMuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvLyByZW1vdmVkIGJ5IGV4dHJhY3QtdGV4dC13ZWJwYWNrLXBsdWdpbiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///3\n")}]);