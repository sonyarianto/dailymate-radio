(function(g){var F={};function C(I){if(F[I]){return F[I].exports}var Q=F[I]={i:I,l:false,exports:{}};g[I].call(Q.exports,Q,Q.exports,C);Q.l=true;return Q.exports}C.m=g;C.c=F;C.d=function(I,Q,g){if(!C.o(I,Q)){Object.defineProperty(I,Q,{enumerable:true,get:g})}};C.r=function(I){if(typeof Symbol!=="undefined"&&Symbol.toStringTag){Object.defineProperty(I,Symbol.toStringTag,{value:"Module"})}Object.defineProperty(I,"__esModule",{value:true})};C.t=function(Q,I){if(I&1)Q=C(Q);if(I&8)return Q;if(I&4&&typeof Q==="object"&&Q&&Q.__esModule)return Q;var g=Object.create(null);C.r(g);Object.defineProperty(g,"default",{enumerable:true,value:Q});if(I&2&&typeof Q!="string")for(var F in Q)C.d(g,F,function(I){return Q[I]}.bind(null,F));return g};C.n=function(Q){var I=Q&&Q.__esModule?function I(){return Q["default"]}:function I(){return Q};C.d(I,"a",I);return I};C.o=function(I,Q){return Object.prototype.hasOwnProperty.call(I,Q)};C.p="";return C(C.s=2)})([function(module,exports){eval("/**\n * Vue custom filters\n */\n\n// comma separate long numerical values\nVue.filter('toCommas', function (num, decimals) {\n  var o = { style: 'decimal', minimumFractionDigits: decimals, maximumFractionDigits: decimals };\n  return new Intl.NumberFormat('en-US', o).format(num);\n});\n\n// sanitize text data by only allowing alnums and some symbols\nVue.filter('toText', function (str, def) {\n  str = String(str || '').replace(/[^\\w\\`\\'\\-\\,\\.\\!\\?]+/g, ' ').replace(/\\s\\s+/g, ' ').trim();\n  return str || String(def || '');\n});\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvanMvZmlsdGVycy5qcz85OTI2Il0sIm5hbWVzIjpbIlZ1ZSIsImZpbHRlciIsIm51bSIsImRlY2ltYWxzIiwibyIsInN0eWxlIiwibWluaW11bUZyYWN0aW9uRGlnaXRzIiwibWF4aW11bUZyYWN0aW9uRGlnaXRzIiwiSW50bCIsIk51bWJlckZvcm1hdCIsImZvcm1hdCIsInN0ciIsImRlZiIsIlN0cmluZyIsInJlcGxhY2UiLCJ0cmltIl0sIm1hcHBpbmdzIjoiQUFBQTs7OztBQUlBO0FBQ0FBLElBQUlDLE1BQUosQ0FBWSxVQUFaLEVBQXdCLFVBQUVDLEdBQUYsRUFBT0MsUUFBUCxFQUFxQjtBQUMzQyxNQUFJQyxJQUFJLEVBQUVDLE9BQU8sU0FBVCxFQUFvQkMsdUJBQXVCSCxRQUEzQyxFQUFxREksdUJBQXVCSixRQUE1RSxFQUFSO0FBQ0EsU0FBTyxJQUFJSyxLQUFLQyxZQUFULENBQXVCLE9BQXZCLEVBQWdDTCxDQUFoQyxFQUFvQ00sTUFBcEMsQ0FBNENSLEdBQTVDLENBQVA7QUFDRCxDQUhEOztBQUtBO0FBQ0FGLElBQUlDLE1BQUosQ0FBWSxRQUFaLEVBQXNCLFVBQUVVLEdBQUYsRUFBT0MsR0FBUCxFQUFnQjtBQUNwQ0QsUUFBTUUsT0FBUUYsT0FBTyxFQUFmLEVBQW9CRyxPQUFwQixDQUE2Qix1QkFBN0IsRUFBc0QsR0FBdEQsRUFBNERBLE9BQTVELENBQXFFLFFBQXJFLEVBQStFLEdBQS9FLEVBQXFGQyxJQUFyRixFQUFOO0FBQ0EsU0FBT0osT0FBT0UsT0FBUUQsT0FBTyxFQUFmLENBQWQ7QUFDRCxDQUhEIiwiZmlsZSI6IjAuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIFZ1ZSBjdXN0b20gZmlsdGVyc1xuICovXG5cbi8vIGNvbW1hIHNlcGFyYXRlIGxvbmcgbnVtZXJpY2FsIHZhbHVlc1xuVnVlLmZpbHRlciggJ3RvQ29tbWFzJywgKCBudW0sIGRlY2ltYWxzICkgPT4ge1xuICBsZXQgbyA9IHsgc3R5bGU6ICdkZWNpbWFsJywgbWluaW11bUZyYWN0aW9uRGlnaXRzOiBkZWNpbWFscywgbWF4aW11bUZyYWN0aW9uRGlnaXRzOiBkZWNpbWFscyB9O1xuICByZXR1cm4gbmV3IEludGwuTnVtYmVyRm9ybWF0KCAnZW4tVVMnLCBvICkuZm9ybWF0KCBudW0gKTtcbn0pO1xuXG4vLyBzYW5pdGl6ZSB0ZXh0IGRhdGEgYnkgb25seSBhbGxvd2luZyBhbG51bXMgYW5kIHNvbWUgc3ltYm9sc1xuVnVlLmZpbHRlciggJ3RvVGV4dCcsICggc3RyLCBkZWYgKSA9PiB7XG4gIHN0ciA9IFN0cmluZyggc3RyIHx8ICcnICkucmVwbGFjZSggL1teXFx3XFxgXFwnXFwtXFwsXFwuXFwhXFw/XSsvZywgJyAnICkucmVwbGFjZSggL1xcc1xccysvZywgJyAnICkudHJpbSgpO1xuICByZXR1cm4gc3RyIHx8IFN0cmluZyggZGVmIHx8ICcnICk7XG59KTtcbiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///0\n")},function(module,exports){eval('/**\n * Vue component used to toggle channel favorite\n */\nVue.component(\'fav-btn\', {\n  props: {\n    id: { type: String, default: \'\', required: true },\n    active: { type: Boolean, default: false }\n  },\n  template: \'\\n    <button class="fav-btn" @click.stop="$emit( \\\'change\\\', id, !active )">\\n      <i v-if="active" class="fa fa-heart text-primary fx fx-drop-in" key="on"></i>\\n      <i v-else class="fa fa-heart-o fx fx-drop-in" key="off"></i>\\n    </button>\'\n});\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvanMvZmF2b3JpdGUuanM/ZmI3ZSJdLCJuYW1lcyI6WyJWdWUiLCJjb21wb25lbnQiLCJwcm9wcyIsImlkIiwidHlwZSIsIlN0cmluZyIsImRlZmF1bHQiLCJyZXF1aXJlZCIsImFjdGl2ZSIsIkJvb2xlYW4iLCJ0ZW1wbGF0ZSJdLCJtYXBwaW5ncyI6IkFBQUE7OztBQUdBQSxJQUFJQyxTQUFKLENBQWUsU0FBZixFQUEwQjtBQUN4QkMsU0FBTztBQUNMQyxRQUFJLEVBQUVDLE1BQU1DLE1BQVIsRUFBZ0JDLFNBQVMsRUFBekIsRUFBNkJDLFVBQVUsSUFBdkMsRUFEQztBQUVMQyxZQUFRLEVBQUVKLE1BQU1LLE9BQVIsRUFBaUJILFNBQVMsS0FBMUI7QUFGSCxHQURpQjtBQUt4Qkk7QUFMd0IsQ0FBMUIiLCJmaWxlIjoiMS5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogVnVlIGNvbXBvbmVudCB1c2VkIHRvIHRvZ2dsZSBjaGFubmVsIGZhdm9yaXRlXG4gKi9cblZ1ZS5jb21wb25lbnQoICdmYXYtYnRuJywge1xuICBwcm9wczoge1xuICAgIGlkOiB7IHR5cGU6IFN0cmluZywgZGVmYXVsdDogJycsIHJlcXVpcmVkOiB0cnVlIH0sXG4gICAgYWN0aXZlOiB7IHR5cGU6IEJvb2xlYW4sIGRlZmF1bHQ6IGZhbHNlIH0sXG4gIH0sXG4gIHRlbXBsYXRlOiBgXG4gICAgPGJ1dHRvbiBjbGFzcz1cImZhdi1idG5cIiBAY2xpY2suc3RvcD1cIiRlbWl0KCAnY2hhbmdlJywgaWQsICFhY3RpdmUgKVwiPlxuICAgICAgPGkgdi1pZj1cImFjdGl2ZVwiIGNsYXNzPVwiZmEgZmEtaGVhcnQgdGV4dC1wcmltYXJ5IGZ4IGZ4LWRyb3AtaW5cIiBrZXk9XCJvblwiPjwvaT5cbiAgICAgIDxpIHYtZWxzZSBjbGFzcz1cImZhIGZhLWhlYXJ0LW8gZnggZngtZHJvcC1pblwiIGtleT1cIm9mZlwiPjwvaT5cbiAgICA8L2J1dHRvbj5gLFxufSk7XG4iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///1\n')},function(module,__webpack_exports__,__webpack_require__){"use strict";eval('// ESM COMPAT FLAG\n__webpack_require__.r(__webpack_exports__);\n\n// EXTERNAL MODULE: ./src/scss/app.scss\nvar app = __webpack_require__(3);\n\n// EXTERNAL MODULE: ./src/js/filters.js\nvar filters = __webpack_require__(0);\n\n// EXTERNAL MODULE: ./src/js/favorite.js\nvar favorite = __webpack_require__(1);\n\n// CONCATENATED MODULE: ./src/js/station.js\n/**\n * Radio stations handler\n */\n/* harmony default export */ var station = ({\n\n  // get channels data from api\n  getChannels: function getChannels(callback) {\n    var _this = this;\n\n    var apiurl = \'/apis-radio/station.id.json\';\n    var error = \'There was a problem fetching the latest list of radio stations from Dailymate Radio.\';\n\n    // const channels = {"channels": [\n    //                   // {\n    //                   //   "id": "ardan-radio-bandung",\n    //                   //   "country": "id",\n    //                   //   "country_display": "Indonesia",\n    //                   //   "city_display": "Bandung",\n    //                   //   "frequency": "105.9 FM",\n    //                   //   "title": "Ardan Radio",\n    //                   //   "stream_uri": "http://listento.ardanradio.com:1059/stream/1/",\n    //                   //   "description": "Ardan is a favorite radio for young people in Bandung.",\n    //                   //   "genre": "pop",\n    //                   //   "largeimage": "3.jpg",\n    //                   //   "secure": 0\n    //                   // },\n    //                   // {\n    //                   //   "id": "bens-radio-jakarta",\n    //                   //   "country": "id",\n    //                   //   "country_display": "Indonesia",\n    //                   //   "city_display": "Jakarta",\n    //                   //   "frequency": "106.2 FM",\n    //                   //   "title": "Bens Radio",\n    //                   //   "stream_uri": "http://175.103.58.72:8000/;stream.mp3",\n    //                   //   "description": "The radio which has the tagline \'Betawi Punye Gaye Sele Aje Aje\' was created by the ideals of its founder to continue preserving the cultural traditions of the ancestors.",\n    //                   //   "genre": "dangdut",\n    //                   //   "largeimage": "4.jpg",\n    //                   //   "secure": 0\n    //                   // },\n    //                   {\n    //                     "id": "thebeat-radio-plus-bali",\n    //                     "country": "id",\n    //                     "country_display": "Indonesia",\n    //                     "city_display": "Denpasar, Bali",\n    //                     "frequency": "98.5 FM",\n    //                     "title": "The Beat Radio Plus",\n    //                     "stream_uri": "https://streaming.radio.co/sf61c46912/listen",\n    //                     "description": "Broadcasted from Bali with the finest electronic music and more.",\n    //                     "genre": "pop",\n    //                     "largeimage": "5.jpg",\n    //                     "secure": 1\n    //                   },\n    //                   {\n    //                     "id": "brava-radio-jakarta",\n    //                     "country": "id",\n    //                     "country_display": "Indonesia",\n    //                     "city_display": "Jakarta",\n    //                     "frequency": "103.8 FM",\n    //                     "title": "Brava Radio",\n    //                     "stream_uri": "https://stream.radiojar.com/5k7t0rq3bnzuv",\n    //                     "description": "Business radio station for business people and decision makers.",\n    //                     "genre": "pop",\n    //                     "largeimage": "2.jpg",\n    //                     "secure": 1\n    //                   },\n    //                   {\n    //                     "id": "cosmopolitan-fm-jakarta",\n    //                     "country": "id",\n    //                     "country_display": "Indonesia",\n    //                     "city_display": "Jakarta",\n    //                     "frequency": "90.4 FM",\n    //                     "title": "Cosmopolitan FM",\n    //                     "stream_uri": "https://stream.radiojar.com/u7d8heq3bnzuv",\n    //                     "description": "Aimed at active, dynamic, expressive, and broad-minded women.",\n    //                     "genre": "pop",\n    //                     "largeimage": "2.png",\n    //                     "secure": 1\n    //                   },\n    //                   // {\n    //                   //   "id": "delta-fm-jakarta",\n    //                   //   "country": "id",\n    //                   //   "country_display": "Indonesia",\n    //                   //   "city_display": "Jakarta",\n    //                   //   "frequency": "99.1 FM",\n    //                   //   "title": "Delta FM",\n    //                   //   "stream_uri": "http://live.deltafm.net:9002/stream",\n    //                   //   "description": "Delta FM is a radio station for young adults with a contemporary hot adult music format that plays the most delicious songs.",\n    //                   //   "genre": "pop",\n    //                   //   "largeimage": "3.png",\n    //                   //   "secure": 0\n    //                   // },\n    //                   {\n    //                     "id": "hardrock-fm-jakarta",\n    //                     "country": "id",\n    //                     "country_display": "Indonesia",\n    //                     "city_display": "Jakarta",\n    //                     "frequency": "87.6 FM",\n    //                     "title": "Hard Rock FM",\n    //                     "stream_uri": "https://stream.radiojar.com/7csmg90fuqruv",\n    //                     "description": "Plays music of all genres and provides information about lifestyle and entertainment.",\n    //                     "genre": "pop",\n    //                     "largeimage": "3.jpeg",\n    //                     "secure": 1\n    //                   },\n    //                   {\n    //                     "id": "indika-fm-jakarta",\n    //                     "country": "id",\n    //                     "country_display": "Indonesia",\n    //                     "city_display": "Jakarta",\n    //                     "frequency": "91.6 FM",\n    //                     "title": "Indika FM",\n    //                     "stream_uri": "https://s2.radio.co/sf58a82d7d/listen",\n    //                     "description": "Known as clubbing radio, their tagline is \\"Sounds of Jakarta\\".",\n    //                     "genre": "pop|club",\n    //                     "largeimage": "2.jpeg",\n    //                     "secure": 1\n    //                   },\n    //                   {\n    //                     "id": "i-radio-jakarta",\n    //                     "country": "id",\n    //                     "country_display": "Indonesia",\n    //                     "city_display": "Jakarta",\n    //                     "frequency": "89.6 FM",\n    //                     "title": "I-Radio",\n    //                     "stream_uri": "https://stream.radiojar.com/4ywdgup3bnzuv",\n    //                     "description": "Only plays 100 percent of Indonesian music with entertaining and inspirational content.",\n    //                     "genre": "pop",\n    //                     "largeimage": "1.jpeg",\n    //                     "secure": 1\n    //                   },\n    //                   {\n    //                     "id": "prambors-jakarta",\n    //                     "country": "id",\n    //                     "country_display": "Indonesia",\n    //                     "city_display": "Jakarta",\n    //                     "frequency": "102.2 FM",\n    //                     "title": "Prambors",\n    //                     "stream_uri": "http://masima.rastream.com/masima-pramborsjakarta",\n    //                     "description": "Indonesia No.1 Hit Music Station that play pop music for teenagers and young adults.",\n    //                     "genre": "pop",\n    //                     "largeimage": "1.png",\n    //                     "secure": 1\n    //                   },\n    //                   // {\n    //                   //   "id": "suarasurabaya-surabaya",\n    //                   //   "country": "id",\n    //                   //   "country_display": "Indonesia",\n    //                   //   "city_display": "Surabaya",\n    //                   //   "frequency": "100 FM",\n    //                   //   "title": "Suara Surabaya",\n    //                   //   "stream_uri": "http://s9.viastreaming.net:7020/stream/1/",\n    //                   //   "description": "Suara Surabaya FM is a radio that provides news about Surabaya and national news.",\n    //                   //   "genre": "pop",\n    //                   //   "largeimage": "/img/stations/4.jpeg",\n    //                   //   "secure": 0\n    //                   // },\n    //                   {\n    //                     "id": "trax-fm-jakarta",\n    //                     "country": "id",\n    //                     "country_display": "Indonesia",\n    //                     "city_display": "Jakarta",\n    //                     "frequency": "101.4 FM",\n    //                     "title": "Trax FM",\n    //                     "stream_uri": "https://stream.radiojar.com/rrqf78p3bnzuv",\n    //                     "description": "Youth radio station that carries the campaign \\"Hits What You Like\\"",\n    //                     "genre": "pop",\n    //                     "largeimage": "1.jpg",\n    //                     "secure": 1\n    //                   }                      \n    //                 ]};\n\n    // const list = this._parseChannels( channels.channels );\n    // if ( !list.length ) return callback( error, [] );\n    // return callback( null, list );\n\n    axios.get(apiurl).then(function (res) {\n      var list = _this._parseChannels(res.data.channels);\n      if (!list.length) return callback(error, []);\n      return callback(null, list);\n    }).catch(function (e) {\n      return callback(error + String(e.message || \'\'), []);\n    });\n  },\n\n\n  // fetch songs for a channel\n  getSongs: function getSongs(channel, callback) {\n    // const apiurl = \'\';\n    // const title  = channel.title || \'...\';\n    // const error  = \'There was a problem loading the list of songs for channel \'+ title +\' from SomaFM.\';\n\n    // axios.get( apiurl ).then( res => {\n    //   if ( !res.data.songs ) return callback( error, [] );\n    //   return callback( null, res.data.songs );\n    // })\n    // .catch( e => {\n    //   return callback( error + String( e.message || \'\' ), [] );\n    // });\n  },\n\n\n  // parse channels list from api response\n  _parseChannels: function _parseChannels(channels) {\n    var output = [];\n    if (Array.isArray(channels)) {\n      var _iteratorNormalCompletion = true;\n      var _didIteratorError = false;\n      var _iteratorError = undefined;\n\n      try {\n        for (var _iterator = channels[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n          var c = _step.value;\n\n          c.route = \'/channel/\' + c.country + \'/\' + c.id;\n          output.push(c);\n        }\n      } catch (err) {\n        _didIteratorError = true;\n        _iteratorError = err;\n      } finally {\n        try {\n          if (!_iteratorNormalCompletion && _iterator.return) {\n            _iterator.return();\n          }\n        } finally {\n          if (_didIteratorError) {\n            throw _iteratorError;\n          }\n        }\n      }\n    }\n    return output;\n  }\n});\n// CONCATENATED MODULE: ./src/js/audio.js\n/**\n * Audio handler object\n */\n/* harmony default export */ var audio = ({\n  _audio: new Audio(),\n  _context: null,\n  _freq: new Uint8Array(),\n  _source: null,\n  _gain: null,\n  _analyser: null,\n  _error_status: 0,\n\n  // setup audio routing\n  setupAudio: function setupAudio() {\n    // this._audio.addEventListener( \'canplaythrough\', e => {\n    //   // this._audio.play();\n    // });\n    return this._audio;\n  },\n\n\n  // update and return analyser frequency data\n  getFreqData: function getFreqData() {\n    return this._freq;\n  },\n\n\n  // set audio volume\n  setVolume: function setVolume(volume) {\n    // if ( !this._gain ) return;\n    volume = parseFloat(volume) || 0.0;\n    volume = volume < 0 ? 0 : volume;\n    volume = volume > 1 ? 1 : volume;\n    this._audio.volume = volume;\n    // this._gain.gain.value = volume;\n  },\n\n\n  // play audio source url\n  playSource: function playSource(source) {\n    this.stopAudio();\n    // this._audio.src = String( source || \'\' ) + \'?x=\' + Date.now();\n    this._audio.src = String(source || \'\');\n    // this._audio.src = \'http://bogor.nagaswarafm.com:8088/stream\';\n    // this._audio.load();\n    this._audio.volume = 1;\n    this._audio.play();\n  },\n\n\n  // stop playing audio\n  stopAudio: function stopAudio() {\n    try {\n      this._audio.pause();\n    } catch (e) {}\n    try {\n      this._audio.stop();\n    } catch (e) {}\n    try {\n      this._audio.close();\n    } catch (e) {}\n  }\n});\n// CONCATENATED MODULE: ./src/js/light.js\n/**\n * ThreeJS scene light object\n */\n/* harmony default export */ var light = ({\n  color: null,\n  light: null,\n\n  // create and add light to scene\n  create: function create(box, scene) {\n    this.color = new THREE.Color();\n    this.color.setHSL(0, .5, .5);\n\n    this.light = new THREE.PointLight(0xffffff, 4, 400);\n    this.light.position.set(0, 0, 420);\n    this.light.castShadow = false;\n    this.light.target = scene;\n    this.light.color = this.color;\n\n    scene.add(this.light);\n  },\n\n\n  // animate light on frame loop\n  update: function update(box, mouse, freq) {\n    var dist = Math.floor(freq[1] | 0) / 255;\n    var color = Math.floor(freq[16] | 0) / 255;\n\n    this.light.distance = 360 + 140 * dist;\n    this.color.setHSL(color, .5, .5);\n  }\n});\n// CONCATENATED MODULE: ./src/js/sphere.js\n/**\n * ThreeJS scene sphere object\n */\n/* harmony default export */ var sphere = ({\n  group: null,\n  shapes: [],\n  move: new THREE.Vector3(0, 0, 0),\n  ease: 8,\n\n  // create and add sphere to scene\n  create: function create(box, scene) {\n    this.group = new THREE.Object3D();\n    var shape1 = new THREE.CircleGeometry(1, 10);\n    var shape2 = new THREE.CircleGeometry(2, 20);\n    var points = new THREE.SphereGeometry(100, 30, 14).vertices;\n    var material = new THREE.MeshLambertMaterial({ color: 0xffffff, opacity: 0, side: THREE.DoubleSide });\n    var center = new THREE.Vector3(0, 0, 0);\n    var radius = 12;\n\n    for (var i = 0; i < points.length; i++) {\n      var _points$i = points[i],\n          x = _points$i.x,\n          y = _points$i.y,\n          z = _points$i.z;\n\n      var home = { x: x, y: y, z: z };\n      var cycle = THREE.Math.randInt(0, 100);\n      var pace = THREE.Math.randInt(10, 30);\n      var shape = new THREE.Mesh(i % 2 ? shape1 : shape2, material);\n\n      shape.position.set(x, y, z);\n      shape.lookAt(center);\n      shape.userData = { radius: radius, cycle: cycle, pace: pace, home: home };\n      this.group.add(shape);\n    }\n    this.group.position.set(500, 0, 0);\n    this.group.rotation.x = Math.PI / 2 + .6;\n    scene.add(this.group);\n  },\n\n\n  // animate sphere on frame loop\n  update: function update(box, mouse, freq) {\n    var bass = Math.floor(freq[1] | 0) / 255;\n    var xoff = box.width < 1080 ? 0 : 60;\n    var zoff = box.width < 1080 ? -80 : 10;\n\n    this.move.x = xoff + -(mouse.x * 0.015);\n    this.group.position.x += (this.move.x - this.group.position.x) / this.ease;\n    this.group.position.y += (this.move.y - this.group.position.y) / this.ease;\n    this.group.position.z = zoff + bass * 80;\n    this.group.rotation.y -= 0.003;\n\n    for (var i = 0; i < this.group.children.length; i++) {\n      var shape = this.group.children[i];\n      var _shape$userData = shape.userData,\n          radius = _shape$userData.radius,\n          cycle = _shape$userData.cycle,\n          pace = _shape$userData.pace,\n          home = _shape$userData.home;\n\n\n      shape.position.set(home.x, home.y, home.z);\n      shape.translateZ(bass * Math.sin(cycle / pace) * radius);\n      shape.userData.cycle++;\n    }\n  }\n});\n// CONCATENATED MODULE: ./src/js/scene.js\n/**\n * ThreeJS scene handler\n */\n\n\n\n/* harmony default export */ var scene = ({\n  _wrap: null,\n  _canvas: null,\n  _renderer: null,\n  _scene: null,\n  _camera: null,\n  _box: null,\n  _mouse: { x: 0, y: 0 },\n  _objects: [],\n\n  // setup animation canvas\n  setupCanvas: function setupCanvas() {\n    this._wrap = document.querySelector(\'#player-wrap\');\n    this._canvas = document.querySelector(\'#player-canvas\');\n    this._box = this._wrap.getBoundingClientRect();\n\n    // setup scene and renderer\n    this._scene = new THREE.Scene();\n    this._renderer = new THREE.WebGLRenderer({ canvas: this._canvas, alpha: true, antialias: true, precision: \'lowp\' });\n    this._renderer.setClearColor(0x000000, 0);\n    this._renderer.setPixelRatio(window.devicePixelRatio);\n\n    // setup camera\n    this._camera = new THREE.PerspectiveCamera(60, this._box.width / this._box.height, 0.1, 20000);\n    this._camera.lookAt(this._scene.position);\n    this._camera.position.set(0, 0, 300);\n    this._camera.rotation.set(0, 0, 0);\n\n    // add and create objects\n    this._objects.push(light);\n    this._objects.push(sphere);\n    var _iteratorNormalCompletion = true;\n    var _didIteratorError = false;\n    var _iteratorError = undefined;\n\n    try {\n      for (var _iterator = this._objects[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n        var o = _step.value;\n        o.create(this._box, this._scene);\n      } // setup events\n    } catch (err) {\n      _didIteratorError = true;\n      _iteratorError = err;\n    } finally {\n      try {\n        if (!_iteratorNormalCompletion && _iterator.return) {\n          _iterator.return();\n        }\n      } finally {\n        if (_didIteratorError) {\n          throw _iteratorError;\n        }\n      }\n    }\n\n    window.addEventListener(\'mousemove\', this.updateMouse.bind(this));\n    window.addEventListener(\'resize\', this.updateSize.bind(this));\n    this.updateMouse();\n    this.updateSize();\n  },\n\n\n  // update custom objects in 3d scene\n  updateObjects: function updateObjects(freq) {\n    var _iteratorNormalCompletion2 = true;\n    var _didIteratorError2 = false;\n    var _iteratorError2 = undefined;\n\n    try {\n      for (var _iterator2 = this._objects[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {\n        var o = _step2.value;\n        o.update(this._box, this._mouse, freq);\n      }\n    } catch (err) {\n      _didIteratorError2 = true;\n      _iteratorError2 = err;\n    } finally {\n      try {\n        if (!_iteratorNormalCompletion2 && _iterator2.return) {\n          _iterator2.return();\n        }\n      } finally {\n        if (_didIteratorError2) {\n          throw _iteratorError2;\n        }\n      }\n    }\n\n    this._renderer.render(this._scene, this._camera);\n  },\n\n\n  // update canvas size\n  updateSize: function updateSize() {\n    if (!this._wrap || !this._canvas) return;\n    this._box = this._wrap.getBoundingClientRect();\n    this._canvas.width = this._box.width;\n    this._canvas.height = this._box.height;\n    this._camera.aspect = this._box.width / this._box.height;\n    this._camera.updateProjectionMatrix();\n    this._renderer.setSize(this._box.width, this._box.height);\n  },\n\n\n  // update mouse position from center of canvas\n  updateMouse: function updateMouse(e) {\n    if (!this._box) return;\n    var centerX = this._box.left + this._box.width / 2;\n    var centerY = this._box.top + this._box.height / 2;\n\n    if (e) {\n      this._mouse.x = Math.max(0, e.pageX || e.clientX || 0) - centerX;\n      this._mouse.y = Math.max(0, e.pageY || e.clientY || 0) - centerY;\n    } else {\n      this._mouse.x = centerX;\n      this._mouse.y = centerY;\n    }\n  }\n});\n// CONCATENATED MODULE: ./src/js/utils.js\n/**\n * Common utils\n */\n/* harmony default export */ var utils = ({\n\n  // get search results off a list for an obj key\n  search: function search(list, key, _search) {\n    var regxp = new RegExp(\'^(\' + _search + \')\', \'i\');\n    return list.filter(function (item) {\n      return regxp.test(item[key]);\n    });\n  },\n\n\n  // sort objects in an array by a key\n  sort: function sort(list, key, order, ignore) {\n    return list.sort(function (a, b) {\n      if (a.hasOwnProperty(key)) {\n\n        var _a = a[key];\n        var _b = b[key];\n\n        if (ignore) {\n          // sort strings using same case\n          _a = typeof _a === \'string\' ? _a.toUpperCase() : _a;\n          _b = typeof _b === \'string\' ? _b.toUpperCase() : _b;\n        }\n        if (order === \'asc\') {\n          if (_a < _b) return -1;\n          if (_a > _b) return 1;\n        }\n        if (order === \'desc\') {\n          if (_a > _b) return -1;\n          if (_a < _b) return 1;\n        }\n      }\n      return 0;\n    });\n  }\n});\n// CONCATENATED MODULE: ./src/js/store.js\n/**\n * Basic localStorage wrapper\n */\n/* harmony default export */ var store = ({\n\n  // save data\n  set: function set(key, data, ttl) {\n    if (!this._isStr(key)) return;\n    var time = Date.now();\n    var expire = Number(ttl) || 0;\n    var json = JSON.stringify({ time: time, expire: expire, data: data });\n    window.localStorage.setItem(key, json);\n  },\n\n\n  // get saved data\n  get: function get(key) {\n    if (!this._isStr(key)) return;\n    var json = window.localStorage.getItem(key) || \'{}\';\n    var parsed = JSON.parse(json) || {};\n    var time = parsed.time,\n        expire = parsed.expire,\n        data = parsed.data;\n\n    if (this._isExpired(time, expire)) this.delete(key);\n    return data;\n  },\n\n\n  // remove saved data\n  delete: function _delete(key) {\n    if (!this._isStr(key)) return;\n    window.localStorage.removeItem(key);\n  },\n\n\n  // check valid string\n  _isStr: function _isStr(str) {\n    return str && typeof str === \'string\';\n  },\n\n\n  // check if data saved has expired\n  _isExpired: function _isExpired(time, expire) {\n    if (!time || !expire) return false;\n    var now = Date.now();\n    var secs = (now - time) / 1000;\n    return secs >= expire ? true : false;\n  }\n});\n// CONCATENATED MODULE: ./src/app.js\n/**\n * Main app JS entry file.\n */\n\n\n\n// import _soma from \'./js/soma\';\n\n\n\n\n\n\n// main vue app\nnew Vue({\n  el: \'#app\',\n  data: {\n    // toggles\n    init: false,\n    visible: true,\n    playing: false,\n    loading: false,\n    sidebar: false,\n    // volume: 0.5,\n    volume: 1,\n    // channels stuff\n    channels: [],\n    channel: {},\n    songs: [],\n    track: {},\n    favorites: [],\n    errors: {},\n    // timer stuff\n    timeStart: 0,\n    timeDisplay: \'00:00:00\',\n    timeItv: null,\n    // sorting stuff\n    searchText: \'\',\n    sortParam: \'listeners\',\n    sortOrder: \'desc\',\n    // timer stuff\n    anf: null,\n    sto: null,\n    itv: null\n    // gesture_action: false,\n  },\n\n  // watch methods\n  watch: {\n\n    // watch playing status\n    playing: function playing() {\n      if (this.playing) {\n        this.startClock();\n      } else {\n        this.stopClock();\n      }\n    },\n\n\n    // update player volume\n    volume: function volume() {\n      audio.setVolume(this.volume);\n    }\n  },\n\n  // computed methods\n  computed: {\n\n    // filter channels list\n    channelsList: function channelsList() {\n      var _this = this;\n\n      var list = this.channels.slice();\n      var search = this.searchText.replace(/[^\\w\\s\\-]+/g, \'\').replace(/[\\r\\s\\t\\n]+/g, \' \').trim();\n\n      if (search && search.length > 1) {\n        list = utils.search(list, \'title\', search);\n      }\n      if (this.sortParam) {\n        list = utils.sort(list, this.sortParam, this.sortOrder, true);\n      }\n      if (this.channel.id) {\n        list = list.map(function (i) {\n          i.active = _this.channel.id === i.id ? true : false;\n          return i;\n        });\n      }\n      return list;\n    },\n\n\n    // filter songs list\n    songsList: function songsList() {\n      var list = this.songs.slice();\n      return list;\n    },\n\n\n    // sort-by label for buttons, etc\n    sortLabel: function sortLabel() {\n      switch (this.sortParam) {\n        case \'title\':\n          return \'Station Name\';\n        case \'listeners\':\n          return \'Listeners Count\';\n        case \'favorite\':\n          return \'Saved Favorites\';\n        case \'genre\':\n          return \'Music Genre\';\n      }\n    },\n\n\n    // check if audio can be played\n    canPlay: function canPlay() {\n      return this.channel.id && !this.loading ? true : false;\n    },\n\n\n    // check if a channel is selected\n    hasChannel: function hasChannel() {\n      return this.channel.id ? true : false;\n    },\n\n\n    // check if there are tracks loaded\n    hasSongs: function hasSongs() {\n      return this.songs.length ? true : false;\n    },\n\n\n    // check for errors that would affect playback\n    hasError: function hasError() {\n      if (this.errors.channels && !this.channels.length) return true;\n      if (this.errors.stream) return true;\n      return false;\n    }\n  },\n\n  // custom methods\n  methods: {\n\n    // run maintenance tasks on a timer\n    setupMaintenance: function setupMaintenance() {\n      var _this2 = this;\n\n      this.itv = setInterval(function () {\n        _this2.getChannels(); // update channels\n        // this.getSongs( this.channel ); // update channel tracks\n      }, 1000 * 30);\n    },\n\n\n    // set an error message\n    setError: function setError(key, err) {\n      var errors = Object.assign({}, this.errors);\n      errors[key] = String(err || \'\').trim();\n      if (err) console.warn(\'ERROR(\' + key + \'):\', err);\n      this.errors = errors;\n    },\n\n\n    // check if an error has been set for a key\n    checkError: function checkError(key) {\n      return key && this.errors.hasOwnProperty(key) && this.errors[key];\n    },\n\n\n    // clear all error messages\n    clearErrors: function clearErrors() {\n      var _this3 = this;\n\n      Object.keys(this.errors).forEach(function (key) {\n        _this3.errors[key] = \'\';\n      });\n    },\n\n\n    // show player when app is mounted\n    initPlayer: function initPlayer() {\n      var _this4 = this;\n\n      document.querySelector(\'#_spnr\').style.display = \'none\';\n      document.querySelector(\'#player-wrap\').style.opacity = \'1\';\n      document.addEventListener(\'visibilitychange\', function (e) {\n        _this4.visible = document.visibilityState === \'visible\';\n      });\n      window.addEventListener(\'hashchange\', function (e) {\n        return _this4.applyRoute(window.location.hash);\n      });\n      window.addEventListener(\'keydown\', this.onKeyboard);\n      // window.addEventListener(\'click\', e => { this.gesture_action = true; });\n      // document.onclick = e => { this.gesture_action = true; };\n      this.init = true;\n    },\n\n\n    // reset selected channel\n    resetPlayer: function resetPlayer() {\n      this.closeAudio();\n      this.clearErrors();\n      this.channel = {};\n      this.songs = [];\n    },\n\n\n    // try resuming stream problem if possible\n    tryAgain: function tryAgain() {\n      this.clearErrors();\n      this.playChannel(this.channel);\n    },\n\n\n    // show/hide the sidebar\n    toggleSidebar: function toggleSidebar(toggle) {\n      this.sidebar = typeof toggle === \'boolean\' ? toggle : false;\n    },\n\n\n    // show sidebar at startup if there are no errors\n    initSidebar: function initSidebar() {\n      if (this.hasError) return;\n      // this.toggleSidebar( true );\n    },\n\n\n    // toggle stream playback for current selected channel\n    togglePlay: function togglePlay() {\n      if (this.loading) return;\n      if (this.playing) return this.closeAudio();\n      return this.playChannel(this.channel);\n    },\n\n\n    // load last sort options from store\n    loadSortOptions: function loadSortOptions() {\n      var opts = store.get(\'sorting_data\');\n      if (opts && opts.param) this.sortParam = opts.param;\n      if (opts && opts.order) this.sortOrder = opts.order;\n    },\n\n\n    // toggle sort order\n    toggleSortOrder: function toggleSortOrder() {\n      this.sortOrder = this.sortOrder === \'asc\' ? \'desc\' : \'asc\';\n    },\n\n\n    // apply sorting and toggle order\n    sortBy: function sortBy(param, order) {\n      if (this.sortParam === param) {\n        this.toggleSortOrder();\n      } else {\n        this.sortOrder = order || \'asc\';\n      }\n      this.sortParam = param;\n      store.set(\'sorting_data\', { param: this.sortParam, order: this.sortOrder });\n    },\n    goToHome: function goToHome() {\n      this.setRoute(\'/\');\n    },\n\n\n    // load saved favs list from store\n    loadFavorites: function loadFavorites() {\n      var favs = store.get(\'favorites_data\');\n      if (!Array.isArray(favs)) return;\n      this.favorites = favs;\n    },\n\n\n    // save favs to a .m3u file\n    saveFavorites: function saveFavorites() {\n      // let data = \'#EXTM3U\';\n      // for ( let id of this.favorites ) {\n      //   const channel = this.channels.filter( c => ( c.id === id ) ).shift();\n      //   if ( !channel ) continue;\n      //   data += \'\\n\\n\';\n      //   data += `#EXTINF:0,${channel.title} [SomaFM]\\n`;\n      //   data += `${channel.mp3file}`;\n      // }\n      // const elm = document.createElement( \'a\' );\n      // elm.setAttribute( \'href\', \'data:audio/mpegurl;charset=utf-8,\'+ encodeURIComponent( data ) );\n      // elm.setAttribute( \'download\', \'somafm_favorites.m3u\' );\n      // elm.setAttribute( \'target\', \'_blank\' );\n      // document.body.appendChild( elm );\n      // setTimeout( () => elm.click(), 100 );\n      // setTimeout( () => elm.remove(), 1000 );\n    },\n\n\n    // toggle favorite channel by id\n    toggleFavorite: function toggleFavorite(id, toggle) {\n      // let favs = this.favorites.slice();\n      // favs = favs.filter( fid => ( fid !== id ) );\n      // if ( toggle ) favs.push( id );\n      // this.favorites = favs;\n      // this.updateCurrentChannel();\n      // _store.set( \'favorites_data\', favs );\n    },\n\n\n    // setup audio routing and stream events\n    setupAudio: function setupAudio() {\n      var _this5 = this;\n\n      var a = audio.setupAudio();\n\n      a.addEventListener(\'waiting\', function (e) {\n        _this5.playing = false;\n        _this5.loading = true;\n\n        var sl = document.getElementById(\'station-logo\');\n        if (sl.classList.contains(\'fx-spin-right-station-logo\')) {\n          sl.classList.remove(\'fx-spin-right-station-logo\');\n        }\n      });\n      a.addEventListener(\'playing\', function (e) {\n        _this5.setError(\'stream\', \'\');\n        _this5.playing = true;\n        _this5.loading = false;\n\n        var sl = document.getElementById(\'station-logo\');\n        sl.classList.remove(\'fx-drop-in\');\n        sl.classList.add(\'fx-spin-right-station-logo\');\n      });\n      a.addEventListener(\'pause\', function (e) {\n        _this5.playing = false;\n        _this5.loading = false;\n\n        var sl = document.getElementById(\'station-logo\');\n        sl.classList.remove(\'fx-spin-right-station-logo\');\n      });\n      a.addEventListener(\'ended\', function (e) {\n        _this5.playing = false;\n        _this5.loading = false;\n      });\n      a.addEventListener(\'error\', function (e) {\n        _this5.closeAudio();\n        _this5.setError(\'stream\', \'The selected stream (\' + _this5.channel.title + \') could not load, or has stopped loading due to a network problem.\');\n        _this5.playing = false;\n        _this5.loading = false;\n      });\n    },\n\n\n    // close active audio\n    closeAudio: function closeAudio() {\n      audio.stopAudio();\n      this.playing = false;\n    },\n\n\n    // setup animation canvas\n    setupCanvas: function setupCanvas() {\n      scene.setupCanvas();\n    },\n\n\n    // audio visualizer animation loop\n    updateCanvas: function updateCanvas() {\n      this.anf = requestAnimationFrame(this.updateCanvas);\n      if (!this.visible) return;\n      var freq = audio.getFreqData();\n      scene.updateObjects(freq);\n    },\n\n\n    // get channels data from api\n    getChannels: function getChannels(sidebar) {\n      var _this6 = this;\n\n      station.getChannels(function (err, channels) {\n        if (err) return _this6.setError(\'channels\', err);\n        // this makes sidebar appear on startup, then I disable it\n        // if ( sidebar ) this.toggleSidebar( true );\n        _this6.channels = channels;\n        _this6.setError(\'channels\', \'\');\n        _this6.updateCurrentChannel();\n        _this6.applyRoute(window.location.hash);\n      });\n    },\n\n\n    // get songs list for a channel from api\n    // getSongs( channel, cb ) {\n    //   if ( !channel || !channel.id || !channel.songsurl ) return;\n    //   if ( !this.isCurrentChannel( channel ) ) { this.songs = []; this.track = {}; }\n\n    //   _soma.getSongs( channel, ( err, songs ) => {\n    //     if ( err ) return this.setError( \'songs\', err );\n    //     if ( typeof cb === \'function\' ) cb( songs );\n    //     this.track = songs.shift();\n    //     this.songs = songs.slice( 0, 3 );\n    //     this.setError( \'songs\', \'\' );\n    //   });\n    // },\n\n    // checks is a channel is currently selected\n    isCurrentChannel: function isCurrentChannel(channel) {\n      if (!channel || !channel.id || !this.channel.id) return false;\n      if (this.channel.id !== channel.id) return false;\n      return true;\n    },\n\n\n    // update data for current selected channel\n    updateCurrentChannel: function updateCurrentChannel() {\n      var _iteratorNormalCompletion = true;\n      var _didIteratorError = false;\n      var _iteratorError = undefined;\n\n      try {\n        for (var _iterator = this.channels[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n          var c = _step.value;\n\n          // see if channel has been saved as a favorite\n          c.favorite = this.favorites.indexOf(c.id) >= 0;\n          // see if channel is currently selected\n          if (this.isCurrentChannel(c)) {\n            this.channel = Object.assign(this.channel, c);\n            c.active = true;\n          }\n        }\n      } catch (err) {\n        _didIteratorError = true;\n        _iteratorError = err;\n      } finally {\n        try {\n          if (!_iteratorNormalCompletion && _iterator.return) {\n            _iterator.return();\n          }\n        } finally {\n          if (_didIteratorError) {\n            throw _iteratorError;\n          }\n        }\n      }\n    },\n\n\n    // play audio stream for a channel\n    playChannel: function playChannel(channel) {\n      // if(this.gesture_action == false) { this.gesture_action = true; return; }\n      // if ( this.playing || !channel || !channel.mp3file ) return;\n      if (this.playing || !channel) return;\n      this.loading = true;\n      this.clearErrors();\n      audio.playSource(channel.stream_uri);\n      audio.setVolume(this.volume);\n    },\n\n\n    // select a channel to play\n    selectChannel: function selectChannel(channel) {\n      if (!channel || !channel.id) return;\n      if (this.isCurrentChannel(channel)) return;\n      this.closeAudio();\n      this.toggleSidebar(false);\n      // this.playChannel( channel );\n      // this.getSongs( channel );\n      this.channel = channel;\n    },\n\n\n    // set station route\n    setRoute: function setRoute(route) {\n      route = \'/\' + String(route || \'\').replace(/^[\\#\\/]+|[\\/]+$/g, \'\').trim();\n      window.location.hash = route;\n    },\n\n\n    // parse url hash route actions\n    applyRoute: function applyRoute(route) {\n      var data = String(route || \'\').replace(/^[\\#\\/]+|[\\/]+$/g, \'\').trim().split(\'/\');\n      var action = data.length ? data.shift() : \'\';\n      var country = data.length ? data.shift() : \'\';\n      var param = data.length ? data.shift() : \'\';\n\n      if (!action) {\n        this.closeAudio();\n        this.resetPlayer();\n        return;\n      }\n      if (action === \'channel\' && param) {\n        var channel = this.channels.filter(function (c) {\n          return c.id === param;\n        }).shift();\n        this.selectChannel(channel);\n        return;\n      }\n    },\n\n\n    // on keyboard events\n    onKeyboard: function onKeyboard(e) {\n      var k = e.key || \'\';\n      if (k === \' \' && this.channel.id) return this.togglePlay();\n      if (k === \'Enter\') return this.toggleSidebar(true);\n      if (k === \'Escape\') return this.toggleSidebar(false);\n    },\n\n\n    // start tracking playback time\n    startClock: function startClock() {\n      this.stopClock();\n      this.timeStart = Date.now();\n      this.timeItv = setInterval(this.updateClock, 1000);\n      this.updateClock();\n    },\n\n\n    // update tracking playback time\n    updateClock: function updateClock() {\n      var p = function p(n) {\n        return n < 10 ? \'0\' + n : \'\' + n;\n      };\n      var elapsed = (Date.now() - this.timeStart) / 1000;\n      var seconds = Math.floor(elapsed % 60);\n      var minutes = Math.floor(elapsed / 60 % 60);\n      var hours = Math.floor(elapsed / 3600);\n      this.timeDisplay = p(hours) + \':\' + p(minutes) + \':\' + p(seconds);\n    },\n\n\n    // stop tracking playback time\n    stopClock: function stopClock() {\n      if (this.timeItv) clearInterval(this.timeItv);\n      this.timeItv = null;\n    },\n\n\n    // clear timer refs\n    clearTimers: function clearTimers() {\n      if (this.sto) clearTimeout(this.sto);\n      if (this.itv) clearInterval(this.itv);\n      if (this.anf) cancelAnimationFrame(this.anf);\n    }\n  },\n\n  // on app mounted\n  mounted: function mounted() {\n    this.loadSortOptions();\n    this.loadFavorites();\n    this.getChannels(true);\n    this.setupAudio();\n    this.setupCanvas();\n    this.updateCanvas();\n    this.setupMaintenance();\n    this.initPlayer();\n  },\n\n\n  // on app destroyed\n  destroyed: function destroyed() {\n    this.closeAudio();\n    this.clearTimers();\n  }\n});\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvanMvc3RhdGlvbi5qcz9mMGRmIiwid2VicGFjazovLy8uL3NyYy9qcy9hdWRpby5qcz9iODQyIiwid2VicGFjazovLy8uL3NyYy9qcy9saWdodC5qcz8yYWZlIiwid2VicGFjazovLy8uL3NyYy9qcy9zcGhlcmUuanM/YTgzMSIsIndlYnBhY2s6Ly8vLi9zcmMvanMvc2NlbmUuanM/OWY5YSIsIndlYnBhY2s6Ly8vLi9zcmMvanMvdXRpbHMuanM/OTk0NCIsIndlYnBhY2s6Ly8vLi9zcmMvanMvc3RvcmUuanM/NmFiMSIsIndlYnBhY2s6Ly8vLi9zcmMvYXBwLmpzPzExMTIiXSwibmFtZXMiOlsiZ2V0Q2hhbm5lbHMiLCJjYWxsYmFjayIsImFwaXVybCIsImVycm9yIiwiYXhpb3MiLCJnZXQiLCJ0aGVuIiwibGlzdCIsIl9wYXJzZUNoYW5uZWxzIiwicmVzIiwiZGF0YSIsImNoYW5uZWxzIiwibGVuZ3RoIiwiY2F0Y2giLCJTdHJpbmciLCJlIiwibWVzc2FnZSIsImdldFNvbmdzIiwiY2hhbm5lbCIsIm91dHB1dCIsIkFycmF5IiwiaXNBcnJheSIsImMiLCJyb3V0ZSIsImNvdW50cnkiLCJpZCIsInB1c2giLCJfYXVkaW8iLCJBdWRpbyIsIl9jb250ZXh0IiwiX2ZyZXEiLCJVaW50OEFycmF5IiwiX3NvdXJjZSIsIl9nYWluIiwiX2FuYWx5c2VyIiwiX2Vycm9yX3N0YXR1cyIsInNldHVwQXVkaW8iLCJnZXRGcmVxRGF0YSIsInNldFZvbHVtZSIsInZvbHVtZSIsInBhcnNlRmxvYXQiLCJwbGF5U291cmNlIiwic291cmNlIiwic3RvcEF1ZGlvIiwic3JjIiwicGxheSIsInBhdXNlIiwic3RvcCIsImNsb3NlIiwiY29sb3IiLCJsaWdodCIsImNyZWF0ZSIsImJveCIsInNjZW5lIiwiVEhSRUUiLCJDb2xvciIsInNldEhTTCIsIlBvaW50TGlnaHQiLCJwb3NpdGlvbiIsInNldCIsImNhc3RTaGFkb3ciLCJ0YXJnZXQiLCJhZGQiLCJ1cGRhdGUiLCJtb3VzZSIsImZyZXEiLCJkaXN0IiwiTWF0aCIsImZsb29yIiwiZGlzdGFuY2UiLCJncm91cCIsInNoYXBlcyIsIm1vdmUiLCJWZWN0b3IzIiwiZWFzZSIsIk9iamVjdDNEIiwic2hhcGUxIiwiQ2lyY2xlR2VvbWV0cnkiLCJzaGFwZTIiLCJwb2ludHMiLCJTcGhlcmVHZW9tZXRyeSIsInZlcnRpY2VzIiwibWF0ZXJpYWwiLCJNZXNoTGFtYmVydE1hdGVyaWFsIiwib3BhY2l0eSIsInNpZGUiLCJEb3VibGVTaWRlIiwiY2VudGVyIiwicmFkaXVzIiwiaSIsIngiLCJ5IiwieiIsImhvbWUiLCJjeWNsZSIsInJhbmRJbnQiLCJwYWNlIiwic2hhcGUiLCJNZXNoIiwibG9va0F0IiwidXNlckRhdGEiLCJyb3RhdGlvbiIsIlBJIiwiYmFzcyIsInhvZmYiLCJ3aWR0aCIsInpvZmYiLCJjaGlsZHJlbiIsInRyYW5zbGF0ZVoiLCJzaW4iLCJfd3JhcCIsIl9jYW52YXMiLCJfcmVuZGVyZXIiLCJfc2NlbmUiLCJfY2FtZXJhIiwiX2JveCIsIl9tb3VzZSIsIl9vYmplY3RzIiwic2V0dXBDYW52YXMiLCJkb2N1bWVudCIsInF1ZXJ5U2VsZWN0b3IiLCJnZXRCb3VuZGluZ0NsaWVudFJlY3QiLCJTY2VuZSIsIldlYkdMUmVuZGVyZXIiLCJjYW52YXMiLCJhbHBoYSIsImFudGlhbGlhcyIsInByZWNpc2lvbiIsInNldENsZWFyQ29sb3IiLCJzZXRQaXhlbFJhdGlvIiwid2luZG93IiwiZGV2aWNlUGl4ZWxSYXRpbyIsIlBlcnNwZWN0aXZlQ2FtZXJhIiwiaGVpZ2h0IiwiTGlnaHQiLCJTcGhlcmUiLCJvIiwiYWRkRXZlbnRMaXN0ZW5lciIsInVwZGF0ZU1vdXNlIiwiYmluZCIsInVwZGF0ZVNpemUiLCJ1cGRhdGVPYmplY3RzIiwicmVuZGVyIiwiYXNwZWN0IiwidXBkYXRlUHJvamVjdGlvbk1hdHJpeCIsInNldFNpemUiLCJjZW50ZXJYIiwibGVmdCIsImNlbnRlclkiLCJ0b3AiLCJtYXgiLCJwYWdlWCIsImNsaWVudFgiLCJwYWdlWSIsImNsaWVudFkiLCJzZWFyY2giLCJrZXkiLCJyZWd4cCIsIlJlZ0V4cCIsImZpbHRlciIsInRlc3QiLCJpdGVtIiwic29ydCIsIm9yZGVyIiwiaWdub3JlIiwiYSIsImIiLCJoYXNPd25Qcm9wZXJ0eSIsIl9hIiwiX2IiLCJ0b1VwcGVyQ2FzZSIsInR0bCIsIl9pc1N0ciIsInRpbWUiLCJEYXRlIiwibm93IiwiZXhwaXJlIiwiTnVtYmVyIiwianNvbiIsIkpTT04iLCJzdHJpbmdpZnkiLCJsb2NhbFN0b3JhZ2UiLCJzZXRJdGVtIiwiZ2V0SXRlbSIsInBhcnNlZCIsInBhcnNlIiwiX2lzRXhwaXJlZCIsImRlbGV0ZSIsInJlbW92ZUl0ZW0iLCJzdHIiLCJzZWNzIiwiVnVlIiwiZWwiLCJpbml0IiwidmlzaWJsZSIsInBsYXlpbmciLCJsb2FkaW5nIiwic2lkZWJhciIsInNvbmdzIiwidHJhY2siLCJmYXZvcml0ZXMiLCJlcnJvcnMiLCJ0aW1lU3RhcnQiLCJ0aW1lRGlzcGxheSIsInRpbWVJdHYiLCJzZWFyY2hUZXh0Iiwic29ydFBhcmFtIiwic29ydE9yZGVyIiwiYW5mIiwic3RvIiwiaXR2Iiwid2F0Y2giLCJzdGFydENsb2NrIiwic3RvcENsb2NrIiwiY29tcHV0ZWQiLCJjaGFubmVsc0xpc3QiLCJzbGljZSIsInJlcGxhY2UiLCJ0cmltIiwiX3V0aWxzIiwibWFwIiwiYWN0aXZlIiwic29uZ3NMaXN0Iiwic29ydExhYmVsIiwiY2FuUGxheSIsImhhc0NoYW5uZWwiLCJoYXNTb25ncyIsImhhc0Vycm9yIiwic3RyZWFtIiwibWV0aG9kcyIsInNldHVwTWFpbnRlbmFuY2UiLCJzZXRJbnRlcnZhbCIsInNldEVycm9yIiwiZXJyIiwiT2JqZWN0IiwiYXNzaWduIiwiY29uc29sZSIsIndhcm4iLCJjaGVja0Vycm9yIiwiY2xlYXJFcnJvcnMiLCJrZXlzIiwiZm9yRWFjaCIsImluaXRQbGF5ZXIiLCJzdHlsZSIsImRpc3BsYXkiLCJ2aXNpYmlsaXR5U3RhdGUiLCJhcHBseVJvdXRlIiwibG9jYXRpb24iLCJoYXNoIiwib25LZXlib2FyZCIsInJlc2V0UGxheWVyIiwiY2xvc2VBdWRpbyIsInRyeUFnYWluIiwicGxheUNoYW5uZWwiLCJ0b2dnbGVTaWRlYmFyIiwidG9nZ2xlIiwiaW5pdFNpZGViYXIiLCJ0b2dnbGVQbGF5IiwibG9hZFNvcnRPcHRpb25zIiwib3B0cyIsIl9zdG9yZSIsInBhcmFtIiwidG9nZ2xlU29ydE9yZGVyIiwic29ydEJ5IiwiZ29Ub0hvbWUiLCJzZXRSb3V0ZSIsImxvYWRGYXZvcml0ZXMiLCJmYXZzIiwic2F2ZUZhdm9yaXRlcyIsInRvZ2dsZUZhdm9yaXRlIiwic2wiLCJnZXRFbGVtZW50QnlJZCIsImNsYXNzTGlzdCIsImNvbnRhaW5zIiwicmVtb3ZlIiwidGl0bGUiLCJ1cGRhdGVDYW52YXMiLCJyZXF1ZXN0QW5pbWF0aW9uRnJhbWUiLCJfc3RhdGlvbiIsInVwZGF0ZUN1cnJlbnRDaGFubmVsIiwiaXNDdXJyZW50Q2hhbm5lbCIsImZhdm9yaXRlIiwiaW5kZXhPZiIsInN0cmVhbV91cmkiLCJzZWxlY3RDaGFubmVsIiwic3BsaXQiLCJhY3Rpb24iLCJzaGlmdCIsImsiLCJ1cGRhdGVDbG9jayIsInAiLCJuIiwiZWxhcHNlZCIsInNlY29uZHMiLCJtaW51dGVzIiwiaG91cnMiLCJjbGVhckludGVydmFsIiwiY2xlYXJUaW1lcnMiLCJjbGVhclRpbWVvdXQiLCJjYW5jZWxBbmltYXRpb25GcmFtZSIsIm1vdW50ZWQiLCJkZXN0cm95ZWQiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7QUFBQTs7O0FBR2U7O0FBRWI7QUFDQUEsYUFIYSx1QkFHQUMsUUFIQSxFQUdXO0FBQUE7O0FBQ3RCLFFBQU1DLFNBQVMsNkJBQWY7QUFDQSxRQUFNQyxRQUFTLHNGQUFmOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FB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LEdBQXBCO0FBQ2hCLFVBQUssS0FBS0YsR0FBVixFQUFnQjJGLHFCQUFzQixLQUFLM0YsR0FBM0I7QUFDakI7QUFyVU0sR0EvR0g7O0FBdWJOO0FBQ0E0RixTQXhiTSxxQkF3Ykk7QUFDUixTQUFLMUMsZUFBTDtBQUNBLFNBQUtRLGFBQUw7QUFDQSxTQUFLMVEsV0FBTCxDQUFrQixJQUFsQjtBQUNBLFNBQUtvQyxVQUFMO0FBQ0EsU0FBS2tGLFdBQUw7QUFDQSxTQUFLOEosWUFBTDtBQUNBLFNBQUs5QyxnQkFBTDtBQUNBLFNBQUtZLFVBQUw7QUFDRCxHQWpjSzs7O0FBbWNOO0FBQ0EyRCxXQXBjTSx1QkFvY007QUFDVixTQUFLbEQsVUFBTDtBQUNBLFNBQUs4QyxXQUFMO0FBQ0Q7QUF2Y0ssQ0FBUiIsImZpbGUiOiIyLmpzIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBSYWRpbyBzdGF0aW9ucyBoYW5kbGVyXG4gKi9cbmV4cG9ydCBkZWZhdWx0IHtcblxuICAvLyBnZXQgY2hhbm5lbHMgZGF0YSBmcm9tIGFwaVxuICBnZXRDaGFubmVscyggY2FsbGJhY2sgKSB7XG4gICAgY29uc3QgYXBpdXJsID0gJy9hcGlzLXJhZGlvL3N0YXRpb24uaWQuanNvbic7XG4gICAgY29uc3QgZXJyb3IgID0gJ1RoZXJlIHdhcyBhIHByb2JsZW0gZmV0Y2hpbmcgdGhlIGxhdGVzdCBsaXN0IG9mIHJhZGlvIHN0YXRpb25zIGZyb20gRGFpbHltYXRlIFJhZGlvLic7XG5cbiAgICAvLyBjb25zdCBjaGFubmVscyA9IHtcImNoYW5uZWxzXCI6IFtcbiAgICAvLyAgICAgICAgICAgICAgICAgICAvLyB7XG4gICAgLy8gICAgICAgICAgICAgICAgICAgLy8gICBcImlkXCI6IFwiYXJkYW4tcmFkaW8tYmFuZHVuZ1wiLFxuICAgIC8vICAgICAgICAgICAgICAgICAgIC8vICAgXCJjb3VudHJ5XCI6IFwiaWRcIixcbiAgICAvLyAgICAgICAgICAgICAgICAgICAvLyAgIFwiY291bnRyeV9kaXNwbGF5XCI6IFwiSW5kb25lc2lhXCIsXG4gICAgLy8gICAgICAgICAgICAgICAgICAgLy8gICBcImNpdHlfZGlzcGxheVwiOiBcIkJhbmR1bmdcIixcbiAgICAvLyAgICAgICAgICAgICAgICAgICAvLyAgIFwiZnJlcXVlbmN5XCI6IFwiMTA1LjkgRk1cIixcbiAgICAvLyAgICAgICAgICAgICAgICAgICAvLyAgIFwidGl0bGVcIjogXCJBcmRhbiBSYWRpb1wiLFxuICAgIC8vICAgICAgICAgICAgICAgICAgIC8vICAgXCJzdHJlYW1fdXJpXCI6IFwiaHR0cDovL2xpc3RlbnRvLmFyZGFucmFkaW8uY29tOjEwNTkvc3RyZWFtLzEvXCIsXG4gICAgLy8gICAgICAgICAgICAgICAgICAgLy8gICBcImRlc2NyaXB0aW9uXCI6IFwiQXJkYW4gaXMgYSBmYXZvcml0ZSByYWRpbyBmb3IgeW91bmcgcGVvcGxlIGluIEJhbmR1bmcuXCIsXG4gICAgLy8gICAgICAgICAgICAgICAgICAgLy8gICBcImdlbnJlXCI6IFwicG9wXCIsXG4gICAgLy8gICAgICAgICAgICAgICAgICAgLy8gICBcImxhcmdlaW1hZ2VcIjogXCIzLmpwZ1wiLFxuICAgIC8vICAgICAgICAgICAgICAgICAgIC8vICAgXCJzZWN1cmVcIjogMFxuICAgIC8vICAgICAgICAgICAgICAgICAgIC8vIH0sXG4gICAgLy8gICAgICAgICAgICAgICAgICAgLy8ge1xuICAgIC8vICAgICAgICAgICAgICAgICAgIC8vICAgXCJpZFwiOiBcImJlbnMtcmFkaW8tamFrYXJ0YVwiLFxuICAgIC8vICAgICAgICAgICAgICAgICAgIC8vICAgXCJjb3VudHJ5XCI6IFwiaWRcIixcbiAgICAvLyAgICAgICAgICAgICAgICAgICAvLyAgIFwiY291bnRyeV9kaXNwbGF5XCI6IFwiSW5kb25lc2lhXCIsXG4gICAgLy8gICAgICAgICAgICAgICAgICAgLy8gICBcImNpdHlfZGlzcGxheVwiOiBcIkpha2FydGFcIixcbiAgICAvLyAgICAgICAgICAgICAgICAgICAvLyAgIFwiZnJlcXVlbmN5XCI6IFwiMTA2LjIgRk1cIixcbiAgICAvLyAgICAgICAgICAgICAgICAgICAvLyAgIFwidGl0bGVcIjogXCJCZW5zIFJhZGlvXCIsXG4gICAgLy8gICAgICAgICAgICAgICAgICAgLy8gICBcInN0cmVhbV91cmlcIjogXCJodHRwOi8vMTc1LjEwMy41OC43Mjo4MDAwLztzdHJlYW0ubXAzXCIsXG4gICAgLy8gICAgICAgICAgICAgICAgICAgLy8gICBcImRlc2NyaXB0aW9uXCI6IFwiVGhlIHJhZGlvIHdoaWNoIGhhcyB0aGUgdGFnbGluZSAnQmV0YXdpIFB1bnllIEdheWUgU2VsZSBBamUgQWplJyB3YXMgY3JlYXRlZCBieSB0aGUgaWRlYWxzIG9mIGl0cyBmb3VuZGVyIHRvIGNvbnRpbnVlIHByZXNlcnZpbmcgdGhlIGN1bHR1cmFsIHRyYWRpdGlvbnMgb2YgdGhlIGFuY2VzdG9ycy5cIixcbiAgICAvLyAgICAgICAgICAgICAgICAgICAvLyAgIFwiZ2VucmVcIjogXCJkYW5nZHV0XCIsXG4gICAgLy8gICAgICAgICAgICAgICAgICAgLy8gICBcImxhcmdlaW1hZ2VcIjogXCI0LmpwZ1wiLFxuICAgIC8vICAgICAgICAgICAgICAgICAgIC8vICAgXCJzZWN1cmVcIjogMFxuICAgIC8vICAgICAgICAgICAgICAgICAgIC8vIH0sXG4gICAgLy8gICAgICAgICAgICAgICAgICAge1xuICAgIC8vICAgICAgICAgICAgICAgICAgICAgXCJpZFwiOiBcInRoZWJlYXQtcmFkaW8tcGx1cy1iYWxpXCIsXG4gICAgLy8gICAgICAgICAgICAgICAgICAgICBcImNvdW50cnlcIjogXCJpZFwiLFxuICAgIC8vICAgICAgICAgICAgICAgICAgICAgXCJjb3VudHJ5X2Rpc3BsYXlcIjogXCJJbmRvbmVzaWFcIixcbiAgICAvLyAgICAgICAgICAgICAgICAgICAgIFwiY2l0eV9kaXNwbGF5XCI6IFwiRGVucGFzYXIsIEJhbGlcIixcbiAgICAvLyAgICAgICAgICAgICAgICAgICAgIFwiZnJlcXVlbmN5XCI6IFwiOTguNSBGTVwiLFxuICAgIC8vICAgICAgICAgICAgICAgICAgICAgXCJ0aXRsZVwiOiBcIlRoZSBCZWF0IFJhZGlvIFBsdXNcIixcbiAgICAvLyAgICAgICAgICAgICAgICAgICAgIFwic3RyZWFtX3VyaVwiOiBcImh0dHBzOi8vc3RyZWFtaW5nLnJhZGlvLmNvL3NmNjFjNDY5MTIvbGlzdGVuXCIsXG4gICAgLy8gICAgICAgICAgICAgICAgICAgICBcImRlc2NyaXB0aW9uXCI6IFwiQnJvYWRjYXN0ZWQgZnJvbSBCYWxpIHdpdGggdGhlIGZpbmVzdCBlbGVjdHJvbmljIG11c2ljIGFuZCBtb3JlLlwiLFxuICAgIC8vICAgICAgICAgICAgICAgICAgICAgXCJnZW5yZVwiOiBcInBvcFwiLFxuICAgIC8vICAgICAgICAgICAgICAgICAgICAgXCJsYXJnZWltYWdlXCI6IFwiNS5qcGdcIixcbiAgICAvLyAgICAgICAgICAgICAgICAgICAgIFwic2VjdXJlXCI6IDFcbiAgICAvLyAgICAgICAgICAgICAgICAgICB9LFxuICAgIC8vICAgICAgICAgICAgICAgICAgIHtcbiAgICAvLyAgICAgICAgICAgICAgICAgICAgIFwiaWRcIjogXCJicmF2YS1yYWRpby1qYWthcnRhXCIsXG4gICAgLy8gICAgICAgICAgICAgICAgICAgICBcImNvdW50cnlcIjogXCJpZFwiLFxuICAgIC8vICAgICAgICAgICAgICAgICAgICAgXCJjb3VudHJ5X2Rpc3BsYXlcIjogXCJJbmRvbmVzaWFcIixcbiAgICAvLyAgICAgICAgICAgICAgICAgICAgIFwiY2l0eV9kaXNwbGF5XCI6IFwiSmFrYXJ0YVwiLFxuICAgIC8vICAgICAgICAgICAgICAgICAgICAgXCJmcmVxdWVuY3lcIjogXCIxMDMuOCBGTVwiLFxuICAgIC8vICAgICAgICAgICAgICAgICAgICAgXCJ0aXRsZVwiOiBcIkJyYXZhIFJhZGlvXCIsXG4gICAgLy8gICAgICAgICAgICAgICAgICAgICBcInN0cmVhbV91cmlcIjogXCJodHRwczovL3N0cmVhbS5yYWRpb2phci5jb20vNWs3dDBycTNibnp1dlwiLFxuICAgIC8vICAgICAgICAgICAgICAgICAgICAgXCJkZXNjcmlwdGlvblwiOiBcIkJ1c2luZXNzIHJhZGlvIHN0YXRpb24gZm9yIGJ1c2luZXNzIHBlb3BsZSBhbmQgZGVjaXNpb24gbWFrZXJzLlwiLFxuICAgIC8vICAgICAgICAgICAgICAgICAgICAgXCJnZW5yZVwiOiBcInBvcFwiLFxuICAgIC8vICAgICAgICAgICAgICAgICAgICAgXCJsYXJnZWltYWdlXCI6IFwiMi5qcGdcIixcbiAgICAvLyAgICAgICAgICAgICAgICAgICAgIFwic2VjdXJlXCI6IDFcbiAgICAvLyAgICAgICAgICAgICAgICAgICB9LFxuICAgIC8vICAgICAgICAgICAgICAgICAgIHtcbiAgICAvLyAgICAgICAgICAgICAgICAgICAgIFwiaWRcIjogXCJjb3Ntb3BvbGl0YW4tZm0tamFrYXJ0YVwiLFxuICAgIC8vICAgICAgICAgICAgICAgICAgICAgXCJjb3VudHJ5XCI6IFwiaWRcIixcbiAgICAvLyAgICAgICAgICAgICAgICAgICAgIFwiY291bnRyeV9kaXNwbGF5XCI6IFwiSW5kb25lc2lhXCIsXG4gICAgLy8gICAgICAgICAgICAgICAgICAgICBcImNpdHlfZGlzcGxheVwiOiBcIkpha2FydGFcIixcbiAgICAvLyAgICAgICAgICAgICAgICAgICAgIFwiZnJlcXVlbmN5XCI6IFwiOTAuNCBGTVwiLFxuICAgIC8vICAgICAgICAgICAgICAgICAgICAgXCJ0aXRsZVwiOiBcIkNvc21vcG9saXRhbiBGTVwiLFxuICAgIC8vICAgICAgICAgICAgICAgICAgICAgXCJzdHJlYW1fdXJpXCI6IFwiaHR0cHM6Ly9zdHJlYW0ucmFkaW9qYXIuY29tL3U3ZDhoZXEzYm56dXZcIixcbiAgICAvLyAgICAgICAgICAgICAgICAgICAgIFwiZGVzY3JpcHRpb25cIjogXCJBaW1lZCBhdCBhY3RpdmUsIGR5bmFtaWMsIGV4cHJlc3NpdmUsIGFuZCBicm9hZC1taW5kZWQgd29tZW4uXCIsXG4gICAgLy8gICAgICAgICAgICAgICAgICAgICBcImdlbnJlXCI6IFwicG9wXCIsXG4gICAgLy8gICAgICAgICAgICAgICAgICAgICBcImxhcmdlaW1hZ2VcIjogXCIyLnBuZ1wiLFxuICAgIC8vICAgICAgICAgICAgICAgICAgICAgXCJzZWN1cmVcIjogMVxuICAgIC8vICAgICAgICAgICAgICAgICAgIH0sXG4gICAgLy8gICAgICAgICAgICAgICAgICAgLy8ge1xuICAgIC8vICAgICAgICAgICAgICAgICAgIC8vICAgXCJpZFwiOiBcImRlbHRhLWZtLWpha2FydGFcIixcbiAgICAvLyAgICAgICAgICAgICAgICAgICAvLyAgIFwiY291bnRyeVwiOiBcImlkXCIsXG4gICAgLy8gICAgICAgICAgICAgICAgICAgLy8gICBcImNvdW50cnlfZGlzcGxheVwiOiBcIkluZG9uZXNpYVwiLFxuICAgIC8vICAgICAgICAgICAgICAgICAgIC8vICAgXCJjaXR5X2Rpc3BsYXlcIjogXCJKYWthcnRhXCIsXG4gICAgLy8gICAgICAgICAgICAgICAgICAgLy8gICBcImZyZXF1ZW5jeVwiOiBcIjk5LjEgRk1cIixcbiAgICAvLyAgICAgICAgICAgICAgICAgICAvLyAgIFwidGl0bGVcIjogXCJEZWx0YSBGTVwiLFxuICAgIC8vICAgICAgICAgICAgICAgICAgIC8vICAgXCJzdHJlYW1fdXJpXCI6IFwiaHR0cDovL2xpdmUuZGVsdGFmbS5uZXQ6OTAwMi9zdHJlYW1cIixcbiAgICAvLyAgICAgICAgICAgICAgICAgICAvLyAgIFwiZGVzY3JpcHRpb25cIjogXCJEZWx0YSBGTSBpcyBhIHJhZGlvIHN0YXRpb24gZm9yIHlvdW5nIGFkdWx0cyB3aXRoIGEgY29udGVtcG9yYXJ5IGhvdCBhZHVsdCBtdXNpYyBmb3JtYXQgdGhhdCBwbGF5cyB0aGUgbW9zdCBkZWxpY2lvdXMgc29uZ3MuXCIsXG4gICAgLy8gICAgICAgICAgICAgICAgICAgLy8gICBcImdlbnJlXCI6IFwicG9wXCIsXG4gICAgLy8gICAgICAgICAgICAgICAgICAgLy8gICBcImxhcmdlaW1hZ2VcIjogXCIzLnBuZ1wiLFxuICAgIC8vICAgICAgICAgICAgICAgICAgIC8vICAgXCJzZWN1cmVcIjogMFxuICAgIC8vICAgICAgICAgICAgICAgICAgIC8vIH0sXG4gICAgLy8gICAgICAgICAgICAgICAgICAge1xuICAgIC8vICAgICAgICAgICAgICAgICAgICAgXCJpZFwiOiBcImhhcmRyb2NrLWZtLWpha2FydGFcIixcbiAgICAvLyAgICAgICAgICAgICAgICAgICAgIFwiY291bnRyeVwiOiBcImlkXCIsXG4gICAgLy8gICAgICAgICAgICAgICAgICAgICBcImNvdW50cnlfZGlzcGxheVwiOiBcIkluZG9uZXNpYVwiLFxuICAgIC8vICAgICAgICAgICAgICAgICAgICAgXCJjaXR5X2Rpc3BsYXlcIjogXCJKYWthcnRhXCIsXG4gICAgLy8gICAgICAgICAgICAgICAgICAgICBcImZyZXF1ZW5jeVwiOiBcIjg3LjYgRk1cIixcbiAgICAvLyAgICAgICAgICAgICAgICAgICAgIFwidGl0bGVcIjogXCJIYXJkIFJvY2sgRk1cIixcbiAgICAvLyAgICAgICAgICAgICAgICAgICAgIFwic3RyZWFtX3VyaVwiOiBcImh0dHBzOi8vc3RyZWFtLnJhZGlvamFyLmNvbS83Y3NtZzkwZnVxcnV2XCIsXG4gICAgLy8gICAgICAgICAgICAgICAgICAgICBcImRlc2NyaXB0aW9uXCI6IFwiUGxheXMgbXVzaWMgb2YgYWxsIGdlbnJlcyBhbmQgcHJvdmlkZXMgaW5mb3JtYXRpb24gYWJvdXQgbGlmZXN0eWxlIGFuZCBlbnRlcnRhaW5tZW50LlwiLFxuICAgIC8vICAgICAgICAgICAgICAgICAgICAgXCJnZW5yZVwiOiBcInBvcFwiLFxuICAgIC8vICAgICAgICAgICAgICAgICAgICAgXCJsYXJnZWltYWdlXCI6IFwiMy5qcGVnXCIsXG4gICAgLy8gICAgICAgICAgICAgICAgICAgICBcInNlY3VyZVwiOiAxXG4gICAgLy8gICAgICAgICAgICAgICAgICAgfSxcbiAgICAvLyAgICAgICAgICAgICAgICAgICB7XG4gICAgLy8gICAgICAgICAgICAgICAgICAgICBcImlkXCI6IFwiaW5kaWthLWZtLWpha2FydGFcIixcbiAgICAvLyAgICAgICAgICAgICAgICAgICAgIFwiY291bnRyeVwiOiBcImlkXCIsXG4gICAgLy8gICAgICAgICAgICAgICAgICAgICBcImNvdW50cnlfZGlzcGxheVwiOiBcIkluZG9uZXNpYVwiLFxuICAgIC8vICAgICAgICAgICAgICAgICAgICAgXCJjaXR5X2Rpc3BsYXlcIjogXCJKYWthcnRhXCIsXG4gICAgLy8gICAgICAgICAgICAgICAgICAgICBcImZyZXF1ZW5jeVwiOiBcIjkxLjYgRk1cIixcbiAgICAvLyAgICAgICAgICAgICAgICAgICAgIFwidGl0bGVcIjogXCJJbmRpa2EgRk1cIixcbiAgICAvLyAgICAgICAgICAgICAgICAgICAgIFwic3RyZWFtX3VyaVwiOiBcImh0dHBzOi8vczIucmFkaW8uY28vc2Y1OGE4MmQ3ZC9saXN0ZW5cIixcbiAgICAvLyAgICAgICAgICAgICAgICAgICAgIFwiZGVzY3JpcHRpb25cIjogXCJLbm93biBhcyBjbHViYmluZyByYWRpbywgdGhlaXIgdGFnbGluZSBpcyBcXFwiU291bmRzIG9mIEpha2FydGFcXFwiLlwiLFxuICAgIC8vICAgICAgICAgICAgICAgICAgICAgXCJnZW5yZVwiOiBcInBvcHxjbHViXCIsXG4gICAgLy8gICAgICAgICAgICAgICAgICAgICBcImxhcmdlaW1hZ2VcIjogXCIyLmpwZWdcIixcbiAgICAvLyAgICAgICAgICAgICAgICAgICAgIFwic2VjdXJlXCI6IDFcbiAgICAvLyAgICAgICAgICAgICAgICAgICB9LFxuICAgIC8vICAgICAgICAgICAgICAgICAgIHtcbiAgICAvLyAgICAgICAgICAgICAgICAgICAgIFwiaWRcIjogXCJpLXJhZGlvLWpha2FydGFcIixcbiAgICAvLyAgICAgICAgICAgICAgICAgICAgIFwiY291bnRyeVwiOiBcImlkXCIsXG4gICAgLy8gICAgICAgICAgICAgICAgICAgICBcImNvdW50cnlfZGlzcGxheVwiOiBcIkluZG9uZXNpYVwiLFxuICAgIC8vICAgICAgICAgICAgICAgICAgICAgXCJjaXR5X2Rpc3BsYXlcIjogXCJKYWthcnRhXCIsXG4gICAgLy8gICAgICAgICAgICAgICAgICAgICBcImZyZXF1ZW5jeVwiOiBcIjg5LjYgRk1cIixcbiAgICAvLyAgICAgICAgICAgICAgICAgICAgIFwidGl0bGVcIjogXCJJLVJhZGlvXCIsXG4gICAgLy8gICAgICAgICAgICAgICAgICAgICBcInN0cmVhbV91cmlcIjogXCJodHRwczovL3N0cmVhbS5yYWRpb2phci5jb20vNHl3ZGd1cDNibnp1dlwiLFxuICAgIC8vICAgICAgICAgICAgICAgICAgICAgXCJkZXNjcmlwdGlvblwiOiBcIk9ubHkgcGxheXMgMTAwIHBlcmNlbnQgb2YgSW5kb25lc2lhbiBtdXNpYyB3aXRoIGVudGVydGFpbmluZyBhbmQgaW5zcGlyYXRpb25hbCBjb250ZW50LlwiLFxuICAgIC8vICAgICAgICAgICAgICAgICAgICAgXCJnZW5yZVwiOiBcInBvcFwiLFxuICAgIC8vICAgICAgICAgICAgICAgICAgICAgXCJsYXJnZWltYWdlXCI6IFwiMS5qcGVnXCIsXG4gICAgLy8gICAgICAgICAgICAgICAgICAgICBcInNlY3VyZVwiOiAxXG4gICAgLy8gICAgICAgICAgICAgICAgICAgfSxcbiAgICAvLyAgICAgICAgICAgICAgICAgICB7XG4gICAgLy8gICAgICAgICAgICAgICAgICAgICBcImlkXCI6IFwicHJhbWJvcnMtamFrYXJ0YVwiLFxuICAgIC8vICAgICAgICAgICAgICAgICAgICAgXCJjb3VudHJ5XCI6IFwiaWRcIixcbiAgICAvLyAgICAgICAgICAgICAgICAgICAgIFwiY291bnRyeV9kaXNwbGF5XCI6IFwiSW5kb25lc2lhXCIsXG4gICAgLy8gICAgICAgICAgICAgICAgICAgICBcImNpdHlfZGlzcGxheVwiOiBcIkpha2FydGFcIixcbiAgICAvLyAgICAgICAgICAgICAgICAgICAgIFwiZnJlcXVlbmN5XCI6IFwiMTAyLjIgRk1cIixcbiAgICAvLyAgICAgICAgICAgICAgICAgICAgIFwidGl0bGVcIjogXCJQcmFtYm9yc1wiLFxuICAgIC8vICAgICAgICAgICAgICAgICAgICAgXCJzdHJlYW1fdXJpXCI6IFwiaHR0cDovL21hc2ltYS5yYXN0cmVhbS5jb20vbWFzaW1hLXByYW1ib3JzamFrYXJ0YVwiLFxuICAgIC8vICAgICAgICAgICAgICAgICAgICAgXCJkZXNjcmlwdGlvblwiOiBcIkluZG9uZXNpYSBOby4xIEhpdCBNdXNpYyBTdGF0aW9uIHRoYXQgcGxheSBwb3AgbXVzaWMgZm9yIHRlZW5hZ2VycyBhbmQgeW91bmcgYWR1bHRzLlwiLFxuICAgIC8vICAgICAgICAgICAgICAgICAgICAgXCJnZW5yZVwiOiBcInBvcFwiLFxuICAgIC8vICAgICAgICAgICAgICAgICAgICAgXCJsYXJnZWltYWdlXCI6IFwiMS5wbmdcIixcbiAgICAvLyAgICAgICAgICAgICAgICAgICAgIFwic2VjdXJlXCI6IDFcbiAgICAvLyAgICAgICAgICAgICAgICAgICB9LFxuICAgIC8vICAgICAgICAgICAgICAgICAgIC8vIHtcbiAgICAvLyAgICAgICAgICAgICAgICAgICAvLyAgIFwiaWRcIjogXCJzdWFyYXN1cmFiYXlhLXN1cmFiYXlhXCIsXG4gICAgLy8gICAgICAgICAgICAgICAgICAgLy8gICBcImNvdW50cnlcIjogXCJpZFwiLFxuICAgIC8vICAgICAgICAgICAgICAgICAgIC8vICAgXCJjb3VudHJ5X2Rpc3BsYXlcIjogXCJJbmRvbmVzaWFcIixcbiAgICAvLyAgICAgICAgICAgICAgICAgICAvLyAgIFwiY2l0eV9kaXNwbGF5XCI6IFwiU3VyYWJheWFcIixcbiAgICAvLyAgICAgICAgICAgICAgICAgICAvLyAgIFwiZnJlcXVlbmN5XCI6IFwiMTAwIEZNXCIsXG4gICAgLy8gICAgICAgICAgICAgICAgICAgLy8gICBcInRpdGxlXCI6IFwiU3VhcmEgU3VyYWJheWFcIixcbiAgICAvLyAgICAgICAgICAgICAgICAgICAvLyAgIFwic3RyZWFtX3VyaVwiOiBcImh0dHA6Ly9zOS52aWFzdHJlYW1pbmcubmV0OjcwMjAvc3RyZWFtLzEvXCIsXG4gICAgLy8gICAgICAgICAgICAgICAgICAgLy8gICBcImRlc2NyaXB0aW9uXCI6IFwiU3VhcmEgU3VyYWJheWEgRk0gaXMgYSByYWRpbyB0aGF0IHByb3ZpZGVzIG5ld3MgYWJvdXQgU3VyYWJheWEgYW5kIG5hdGlvbmFsIG5ld3MuXCIsXG4gICAgLy8gICAgICAgICAgICAgICAgICAgLy8gICBcImdlbnJlXCI6IFwicG9wXCIsXG4gICAgLy8gICAgICAgICAgICAgICAgICAgLy8gICBcImxhcmdlaW1hZ2VcIjogXCIvaW1nL3N0YXRpb25zLzQuanBlZ1wiLFxuICAgIC8vICAgICAgICAgICAgICAgICAgIC8vICAgXCJzZWN1cmVcIjogMFxuICAgIC8vICAgICAgICAgICAgICAgICAgIC8vIH0sXG4gICAgLy8gICAgICAgICAgICAgICAgICAge1xuICAgIC8vICAgICAgICAgICAgICAgICAgICAgXCJpZFwiOiBcInRyYXgtZm0tamFrYXJ0YVwiLFxuICAgIC8vICAgICAgICAgICAgICAgICAgICAgXCJjb3VudHJ5XCI6IFwiaWRcIixcbiAgICAvLyAgICAgICAgICAgICAgICAgICAgIFwiY291bnRyeV9kaXNwbGF5XCI6IFwiSW5kb25lc2lhXCIsXG4gICAgLy8gICAgICAgICAgICAgICAgICAgICBcImNpdHlfZGlzcGxheVwiOiBcIkpha2FydGFcIixcbiAgICAvLyAgICAgICAgICAgICAgICAgICAgIFwiZnJlcXVlbmN5XCI6IFwiMTAxLjQgRk1cIixcbiAgICAvLyAgICAgICAgICAgICAgICAgICAgIFwidGl0bGVcIjogXCJUcmF4IEZNXCIsXG4gICAgLy8gICAgICAgICAgICAgICAgICAgICBcInN0cmVhbV91cmlcIjogXCJodHRwczovL3N0cmVhbS5yYWRpb2phci5jb20vcnJxZjc4cDNibnp1dlwiLFxuICAgIC8vICAgICAgICAgICAgICAgICAgICAgXCJkZXNjcmlwdGlvblwiOiBcIllvdXRoIHJhZGlvIHN0YXRpb24gdGhhdCBjYXJyaWVzIHRoZSBjYW1wYWlnbiBcXFwiSGl0cyBXaGF0IFlvdSBMaWtlXFxcIlwiLFxuICAgIC8vICAgICAgICAgICAgICAgICAgICAgXCJnZW5yZVwiOiBcInBvcFwiLFxuICAgIC8vICAgICAgICAgICAgICAgICAgICAgXCJsYXJnZWltYWdlXCI6IFwiMS5qcGdcIixcbiAgICAvLyAgICAgICAgICAgICAgICAgICAgIFwic2VjdXJlXCI6IDFcbiAgICAvLyAgICAgICAgICAgICAgICAgICB9ICAgICAgICAgICAgICAgICAgICAgIFxuICAgIC8vICAgICAgICAgICAgICAgICBdfTtcblxuICAgIC8vIGNvbnN0IGxpc3QgPSB0aGlzLl9wYXJzZUNoYW5uZWxzKCBjaGFubmVscy5jaGFubmVscyApO1xuICAgIC8vIGlmICggIWxpc3QubGVuZ3RoICkgcmV0dXJuIGNhbGxiYWNrKCBlcnJvciwgW10gKTtcbiAgICAvLyByZXR1cm4gY2FsbGJhY2soIG51bGwsIGxpc3QgKTtcblxuICAgIGF4aW9zLmdldCggYXBpdXJsICkudGhlbiggcmVzID0+IHtcbiAgICAgIGNvbnN0IGxpc3QgPSB0aGlzLl9wYXJzZUNoYW5uZWxzKCByZXMuZGF0YS5jaGFubmVscyApOyAgICAgIFxuICAgICAgaWYgKCAhbGlzdC5sZW5ndGggKSByZXR1cm4gY2FsbGJhY2soIGVycm9yLCBbXSApO1xuICAgICAgcmV0dXJuIGNhbGxiYWNrKCBudWxsLCBsaXN0ICk7XG4gICAgfSlcbiAgICAuY2F0Y2goIGUgPT4ge1xuICAgICAgcmV0dXJuIGNhbGxiYWNrKCBlcnJvciArIFN0cmluZyggZS5tZXNzYWdlIHx8ICcnICksIFtdICk7XG4gICAgfSk7XG4gIH0sXG5cbiAgLy8gZmV0Y2ggc29uZ3MgZm9yIGEgY2hhbm5lbFxuICBnZXRTb25ncyggY2hhbm5lbCwgY2FsbGJhY2sgKSB7XG4gICAgLy8gY29uc3QgYXBpdXJsID0gJyc7XG4gICAgLy8gY29uc3QgdGl0bGUgID0gY2hhbm5lbC50aXRsZSB8fCAnLi4uJztcbiAgICAvLyBjb25zdCBlcnJvciAgPSAnVGhlcmUgd2FzIGEgcHJvYmxlbSBsb2FkaW5nIHRoZSBsaXN0IG9mIHNvbmdzIGZvciBjaGFubmVsICcrIHRpdGxlICsnIGZyb20gU29tYUZNLic7XG5cbiAgICAvLyBheGlvcy5nZXQoIGFwaXVybCApLnRoZW4oIHJlcyA9PiB7XG4gICAgLy8gICBpZiAoICFyZXMuZGF0YS5zb25ncyApIHJldHVybiBjYWxsYmFjayggZXJyb3IsIFtdICk7XG4gICAgLy8gICByZXR1cm4gY2FsbGJhY2soIG51bGwsIHJlcy5kYXRhLnNvbmdzICk7XG4gICAgLy8gfSlcbiAgICAvLyAuY2F0Y2goIGUgPT4ge1xuICAgIC8vICAgcmV0dXJuIGNhbGxiYWNrKCBlcnJvciArIFN0cmluZyggZS5tZXNzYWdlIHx8ICcnICksIFtdICk7XG4gICAgLy8gfSk7XG4gIH0sXG5cbiAgLy8gcGFyc2UgY2hhbm5lbHMgbGlzdCBmcm9tIGFwaSByZXNwb25zZVxuICBfcGFyc2VDaGFubmVscyggY2hhbm5lbHMgKSB7XG4gICAgbGV0IG91dHB1dCA9IFtdO1xuICAgIGlmICggQXJyYXkuaXNBcnJheSggY2hhbm5lbHMgKSApIHtcbiAgICAgIGZvciAoIGxldCBjIG9mIGNoYW5uZWxzICkge1xuICAgICAgICBjLnJvdXRlID0gJy9jaGFubmVsLycgKyBjLmNvdW50cnkgKyAnLycgKyBjLmlkO1xuICAgICAgICBvdXRwdXQucHVzaCggYyApO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gb3V0cHV0O1xuICB9XG59XG4iLCIvKipcbiAqIEF1ZGlvIGhhbmRsZXIgb2JqZWN0XG4gKi9cbmV4cG9ydCBkZWZhdWx0IHtcbiAgX2F1ZGlvOiBuZXcgQXVkaW8oKSxcbiAgX2NvbnRleHQ6IG51bGwsXG4gIF9mcmVxOiBuZXcgVWludDhBcnJheSgpLFxuICBfc291cmNlOiBudWxsLFxuICBfZ2FpbjogbnVsbCxcbiAgX2FuYWx5c2VyOiBudWxsLFxuICBfZXJyb3Jfc3RhdHVzOiAwLFxuXG4gIC8vIHNldHVwIGF1ZGlvIHJvdXRpbmdcbiAgc2V0dXBBdWRpbygpIHtcbiAgICAvLyB0aGlzLl9hdWRpby5hZGRFdmVudExpc3RlbmVyKCAnY2FucGxheXRocm91Z2gnLCBlID0+IHtcbiAgICAvLyAgIC8vIHRoaXMuX2F1ZGlvLnBsYXkoKTtcbiAgICAvLyB9KTtcbiAgICByZXR1cm4gdGhpcy5fYXVkaW87XG4gIH0sXG5cbiAgLy8gdXBkYXRlIGFuZCByZXR1cm4gYW5hbHlzZXIgZnJlcXVlbmN5IGRhdGFcbiAgZ2V0RnJlcURhdGEoKSB7XG4gICAgcmV0dXJuIHRoaXMuX2ZyZXE7XG4gIH0sXG5cbiAgLy8gc2V0IGF1ZGlvIHZvbHVtZVxuICBzZXRWb2x1bWUoIHZvbHVtZSApIHtcbiAgICAvLyBpZiAoICF0aGlzLl9nYWluICkgcmV0dXJuO1xuICAgIHZvbHVtZSA9IHBhcnNlRmxvYXQoIHZvbHVtZSApIHx8IDAuMDtcbiAgICB2b2x1bWUgPSAoIHZvbHVtZSA8IDAgKSA/IDAgOiB2b2x1bWU7XG4gICAgdm9sdW1lID0gKCB2b2x1bWUgPiAxICkgPyAxIDogdm9sdW1lO1xuICAgIHRoaXMuX2F1ZGlvLnZvbHVtZSA9IHZvbHVtZTtcbiAgICAvLyB0aGlzLl9nYWluLmdhaW4udmFsdWUgPSB2b2x1bWU7XG4gIH0sXG5cbiAgLy8gcGxheSBhdWRpbyBzb3VyY2UgdXJsXG4gIHBsYXlTb3VyY2UoIHNvdXJjZSApIHtcbiAgICB0aGlzLnN0b3BBdWRpbygpO1xuICAgIC8vIHRoaXMuX2F1ZGlvLnNyYyA9IFN0cmluZyggc291cmNlIHx8ICcnICkgKyAnP3g9JyArIERhdGUubm93KCk7XG4gICAgdGhpcy5fYXVkaW8uc3JjID0gU3RyaW5nKCBzb3VyY2UgfHwgJycgKTtcbiAgICAvLyB0aGlzLl9hdWRpby5zcmMgPSAnaHR0cDovL2JvZ29yLm5hZ2Fzd2FyYWZtLmNvbTo4MDg4L3N0cmVhbSc7XG4gICAgLy8gdGhpcy5fYXVkaW8ubG9hZCgpO1xuICAgIHRoaXMuX2F1ZGlvLnZvbHVtZSA9IDE7XG4gICAgdGhpcy5fYXVkaW8ucGxheSgpO1xuICB9LFxuXG4gIC8vIHN0b3AgcGxheWluZyBhdWRpb1xuICBzdG9wQXVkaW8oKSB7XG4gICAgdHJ5IHsgdGhpcy5fYXVkaW8ucGF1c2UoKTsgfSBjYXRjaCAoIGUgKSB7fVxuICAgIHRyeSB7IHRoaXMuX2F1ZGlvLnN0b3AoKTsgfSBjYXRjaCAoIGUgKSB7fVxuICAgIHRyeSB7IHRoaXMuX2F1ZGlvLmNsb3NlKCk7IH0gY2F0Y2ggKCBlICkge31cbiAgfSxcbn1cbiIsIi8qKlxuICogVGhyZWVKUyBzY2VuZSBsaWdodCBvYmplY3RcbiAqL1xuZXhwb3J0IGRlZmF1bHQge1xuICBjb2xvcjogbnVsbCxcbiAgbGlnaHQ6IG51bGwsXG5cbiAgLy8gY3JlYXRlIGFuZCBhZGQgbGlnaHQgdG8gc2NlbmVcbiAgY3JlYXRlKCBib3gsIHNjZW5lICkge1xuICAgIHRoaXMuY29sb3IgPSBuZXcgVEhSRUUuQ29sb3IoKTtcbiAgICB0aGlzLmNvbG9yLnNldEhTTCggMCwgLjUsIC41ICk7XG5cbiAgICB0aGlzLmxpZ2h0ID0gbmV3IFRIUkVFLlBvaW50TGlnaHQoIDB4ZmZmZmZmLCA0LCA0MDAgKTtcbiAgICB0aGlzLmxpZ2h0LnBvc2l0aW9uLnNldCggMCwgMCwgNDIwICk7XG4gICAgdGhpcy5saWdodC5jYXN0U2hhZG93ID0gZmFsc2U7XG4gICAgdGhpcy5saWdodC50YXJnZXQgPSBzY2VuZTtcbiAgICB0aGlzLmxpZ2h0LmNvbG9yID0gdGhpcy5jb2xvcjtcblxuICAgIHNjZW5lLmFkZCggdGhpcy5saWdodCApO1xuICB9LFxuXG4gIC8vIGFuaW1hdGUgbGlnaHQgb24gZnJhbWUgbG9vcFxuICB1cGRhdGUoIGJveCwgbW91c2UsIGZyZXEgKSB7XG4gICAgbGV0IGRpc3QgID0gTWF0aC5mbG9vciggZnJlcVsgMSBdIHwgMCApIC8gMjU1O1xuICAgIGxldCBjb2xvciA9IE1hdGguZmxvb3IoIGZyZXFbIDE2IF0gfCAwICkgLyAyNTU7XG5cbiAgICB0aGlzLmxpZ2h0LmRpc3RhbmNlID0gMzYwICsgKCAxNDAgKiBkaXN0ICk7XG4gICAgdGhpcy5jb2xvci5zZXRIU0woIGNvbG9yLCAuNSwgLjUgKTtcbiAgfSxcbn1cbiIsIi8qKlxuICogVGhyZWVKUyBzY2VuZSBzcGhlcmUgb2JqZWN0XG4gKi9cbmV4cG9ydCBkZWZhdWx0IHtcbiAgZ3JvdXA6IG51bGwsXG4gIHNoYXBlczogW10sXG4gIG1vdmU6IG5ldyBUSFJFRS5WZWN0b3IzKCAwLCAwLCAwICksXG4gIGVhc2U6IDgsXG5cbiAgLy8gY3JlYXRlIGFuZCBhZGQgc3BoZXJlIHRvIHNjZW5lXG4gIGNyZWF0ZSggYm94LCBzY2VuZSApIHtcbiAgICB0aGlzLmdyb3VwICAgPSBuZXcgVEhSRUUuT2JqZWN0M0QoKTtcbiAgICBsZXQgc2hhcGUxICAgPSBuZXcgVEhSRUUuQ2lyY2xlR2VvbWV0cnkoIDEsIDEwICk7XG4gICAgbGV0IHNoYXBlMiAgID0gbmV3IFRIUkVFLkNpcmNsZUdlb21ldHJ5KCAyLCAyMCApO1xuICAgIGxldCBwb2ludHMgICA9IG5ldyBUSFJFRS5TcGhlcmVHZW9tZXRyeSggMTAwLCAzMCwgMTQgKS52ZXJ0aWNlcztcbiAgICBsZXQgbWF0ZXJpYWwgPSBuZXcgVEhSRUUuTWVzaExhbWJlcnRNYXRlcmlhbCggeyBjb2xvcjogMHhmZmZmZmYsIG9wYWNpdHk6IDAsIHNpZGU6IFRIUkVFLkRvdWJsZVNpZGUgfSApO1xuICAgIGxldCBjZW50ZXIgICA9IG5ldyBUSFJFRS5WZWN0b3IzKCAwLCAwLCAwICk7XG4gICAgbGV0IHJhZGl1cyAgID0gMTI7XG5cbiAgICBmb3IgKCBsZXQgaSA9IDA7IGkgPCBwb2ludHMubGVuZ3RoOyBpKysgKSB7XG4gICAgICBsZXQgeyB4LCB5LCB6IH0gPSBwb2ludHNbIGkgXTtcbiAgICAgIGxldCBob21lICA9IHsgeCwgeSwgeiB9O1xuICAgICAgbGV0IGN5Y2xlID0gVEhSRUUuTWF0aC5yYW5kSW50KCAwLCAxMDAgKTtcbiAgICAgIGxldCBwYWNlICA9IFRIUkVFLk1hdGgucmFuZEludCggMTAsIDMwICk7XG4gICAgICBsZXQgc2hhcGUgPSBuZXcgVEhSRUUuTWVzaCggKCBpICUgMiApID8gc2hhcGUxIDogc2hhcGUyLCBtYXRlcmlhbCApO1xuXG4gICAgICBzaGFwZS5wb3NpdGlvbi5zZXQoIHgsIHksIHogKTtcbiAgICAgIHNoYXBlLmxvb2tBdCggY2VudGVyICk7XG4gICAgICBzaGFwZS51c2VyRGF0YSA9IHsgcmFkaXVzLCBjeWNsZSwgcGFjZSwgaG9tZSB9O1xuICAgICAgdGhpcy5ncm91cC5hZGQoIHNoYXBlICk7XG4gICAgfVxuICAgIHRoaXMuZ3JvdXAucG9zaXRpb24uc2V0KCA1MDAsIDAsIDAgKTtcbiAgICB0aGlzLmdyb3VwLnJvdGF0aW9uLnggPSAoIE1hdGguUEkgLyAyICkgKyAuNjtcbiAgICBzY2VuZS5hZGQoIHRoaXMuZ3JvdXAgKTtcbiAgfSxcblxuICAvLyBhbmltYXRlIHNwaGVyZSBvbiBmcmFtZSBsb29wXG4gIHVwZGF0ZSggYm94LCBtb3VzZSwgZnJlcSApIHtcbiAgICBsZXQgYmFzcyA9ICggTWF0aC5mbG9vciggZnJlcVsgMSBdIHwgMCApIC8gMjU1ICk7XG4gICAgbGV0IHhvZmYgPSAoIGJveC53aWR0aCA8IDEwODAgKSA/IDAgOiA2MDtcbiAgICBsZXQgem9mZiA9ICggYm94LndpZHRoIDwgMTA4MCApID8gLTgwIDogMTA7XG5cbiAgICB0aGlzLm1vdmUueCA9IHhvZmYgKyAtKCBtb3VzZS54ICogMC4wMTUgKTtcbiAgICB0aGlzLmdyb3VwLnBvc2l0aW9uLnggKz0gKCB0aGlzLm1vdmUueCAtIHRoaXMuZ3JvdXAucG9zaXRpb24ueCApIC8gdGhpcy5lYXNlO1xuICAgIHRoaXMuZ3JvdXAucG9zaXRpb24ueSArPSAoIHRoaXMubW92ZS55IC0gdGhpcy5ncm91cC5wb3NpdGlvbi55ICkgLyB0aGlzLmVhc2U7XG4gICAgdGhpcy5ncm91cC5wb3NpdGlvbi56ID0gem9mZiArICggYmFzcyAqIDgwICk7XG4gICAgdGhpcy5ncm91cC5yb3RhdGlvbi55IC09IDAuMDAzO1xuXG4gICAgZm9yICggbGV0IGkgPSAwOyBpIDwgdGhpcy5ncm91cC5jaGlsZHJlbi5sZW5ndGg7IGkrKyApIHtcbiAgICAgIGxldCBzaGFwZSA9IHRoaXMuZ3JvdXAuY2hpbGRyZW5bIGkgXTtcbiAgICAgIGxldCB7IHJhZGl1cywgY3ljbGUsIHBhY2UsIGhvbWUgfSA9IHNoYXBlLnVzZXJEYXRhO1xuXG4gICAgICBzaGFwZS5wb3NpdGlvbi5zZXQoIGhvbWUueCwgaG9tZS55LCBob21lLnogKTtcbiAgICAgIHNoYXBlLnRyYW5zbGF0ZVooIGJhc3MgKiBNYXRoLnNpbiggY3ljbGUgLyBwYWNlICkgKiByYWRpdXMgKTtcbiAgICAgIHNoYXBlLnVzZXJEYXRhLmN5Y2xlKys7XG4gICAgfVxuICB9LFxufVxuIiwiLyoqXG4gKiBUaHJlZUpTIHNjZW5lIGhhbmRsZXJcbiAqL1xuaW1wb3J0IExpZ2h0IGZyb20gJy4vbGlnaHQnO1xuaW1wb3J0IFNwaGVyZSBmcm9tICcuL3NwaGVyZSc7XG5cbmV4cG9ydCBkZWZhdWx0IHtcbiAgX3dyYXA6IG51bGwsXG4gIF9jYW52YXM6IG51bGwsXG4gIF9yZW5kZXJlcjogbnVsbCxcbiAgX3NjZW5lOiBudWxsLFxuICBfY2FtZXJhOiBudWxsLFxuICBfYm94OiBudWxsLFxuICBfbW91c2U6IHsgeDogMCwgeTogMCB9LFxuICBfb2JqZWN0czogW10sXG5cbiAgLy8gc2V0dXAgYW5pbWF0aW9uIGNhbnZhc1xuICBzZXR1cENhbnZhcygpIHtcbiAgICB0aGlzLl93cmFwID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvciggJyNwbGF5ZXItd3JhcCcgKTtcbiAgICB0aGlzLl9jYW52YXMgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCAnI3BsYXllci1jYW52YXMnICk7XG4gICAgdGhpcy5fYm94ID0gdGhpcy5fd3JhcC5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKTtcblxuICAgIC8vIHNldHVwIHNjZW5lIGFuZCByZW5kZXJlclxuICAgIHRoaXMuX3NjZW5lID0gbmV3IFRIUkVFLlNjZW5lKCk7XG4gICAgdGhpcy5fcmVuZGVyZXIgPSBuZXcgVEhSRUUuV2ViR0xSZW5kZXJlciggeyBjYW52YXM6IHRoaXMuX2NhbnZhcywgYWxwaGE6IHRydWUsIGFudGlhbGlhczogdHJ1ZSwgcHJlY2lzaW9uOiAnbG93cCcgfSApO1xuICAgIHRoaXMuX3JlbmRlcmVyLnNldENsZWFyQ29sb3IoIDB4MDAwMDAwLCAwICk7XG4gICAgdGhpcy5fcmVuZGVyZXIuc2V0UGl4ZWxSYXRpbyggd2luZG93LmRldmljZVBpeGVsUmF0aW8gKTtcblxuICAgIC8vIHNldHVwIGNhbWVyYVxuICAgIHRoaXMuX2NhbWVyYSA9IG5ldyBUSFJFRS5QZXJzcGVjdGl2ZUNhbWVyYSggNjAsICggdGhpcy5fYm94LndpZHRoIC8gdGhpcy5fYm94LmhlaWdodCApLCAwLjEsIDIwMDAwICk7XG4gICAgdGhpcy5fY2FtZXJhLmxvb2tBdCggdGhpcy5fc2NlbmUucG9zaXRpb24gKTtcbiAgICB0aGlzLl9jYW1lcmEucG9zaXRpb24uc2V0KCAwLCAwLCAzMDAgKTtcbiAgICB0aGlzLl9jYW1lcmEucm90YXRpb24uc2V0KCAwLCAwLCAwICk7XG5cbiAgICAvLyBhZGQgYW5kIGNyZWF0ZSBvYmplY3RzXG4gICAgdGhpcy5fb2JqZWN0cy5wdXNoKCBMaWdodCApO1xuICAgIHRoaXMuX29iamVjdHMucHVzaCggU3BoZXJlICk7XG4gICAgZm9yICggbGV0IG8gb2YgdGhpcy5fb2JqZWN0cyApIG8uY3JlYXRlKCB0aGlzLl9ib3gsIHRoaXMuX3NjZW5lICk7XG5cbiAgICAvLyBzZXR1cCBldmVudHNcbiAgICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lciggJ21vdXNlbW92ZScsIHRoaXMudXBkYXRlTW91c2UuYmluZCggdGhpcyApICk7XG4gICAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoICdyZXNpemUnLCB0aGlzLnVwZGF0ZVNpemUuYmluZCggdGhpcyApICk7XG4gICAgdGhpcy51cGRhdGVNb3VzZSgpO1xuICAgIHRoaXMudXBkYXRlU2l6ZSgpO1xuICB9LFxuXG4gIC8vIHVwZGF0ZSBjdXN0b20gb2JqZWN0cyBpbiAzZCBzY2VuZVxuICB1cGRhdGVPYmplY3RzKCBmcmVxICkge1xuICAgIGZvciAoIGxldCBvIG9mIHRoaXMuX29iamVjdHMgKSBvLnVwZGF0ZSggdGhpcy5fYm94LCB0aGlzLl9tb3VzZSwgZnJlcSApO1xuICAgIHRoaXMuX3JlbmRlcmVyLnJlbmRlciggdGhpcy5fc2NlbmUsIHRoaXMuX2NhbWVyYSApO1xuICB9LFxuXG4gIC8vIHVwZGF0ZSBjYW52YXMgc2l6ZVxuICB1cGRhdGVTaXplKCkge1xuICAgIGlmICggIXRoaXMuX3dyYXAgfHwgIXRoaXMuX2NhbnZhcyApIHJldHVybjtcbiAgICB0aGlzLl9ib3ggPSB0aGlzLl93cmFwLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpO1xuICAgIHRoaXMuX2NhbnZhcy53aWR0aCA9IHRoaXMuX2JveC53aWR0aDtcbiAgICB0aGlzLl9jYW52YXMuaGVpZ2h0ID0gdGhpcy5fYm94LmhlaWdodDtcbiAgICB0aGlzLl9jYW1lcmEuYXNwZWN0ID0gKCB0aGlzLl9ib3gud2lkdGggLyB0aGlzLl9ib3guaGVpZ2h0ICk7XG4gICAgdGhpcy5fY2FtZXJhLnVwZGF0ZVByb2plY3Rpb25NYXRyaXgoKTtcbiAgICB0aGlzLl9yZW5kZXJlci5zZXRTaXplKCB0aGlzLl9ib3gud2lkdGgsIHRoaXMuX2JveC5oZWlnaHQgKTtcbiAgfSxcblxuICAvLyB1cGRhdGUgbW91c2UgcG9zaXRpb24gZnJvbSBjZW50ZXIgb2YgY2FudmFzXG4gIHVwZGF0ZU1vdXNlKCBlICkge1xuICAgIGlmICggIXRoaXMuX2JveCApIHJldHVybjtcbiAgICBjb25zdCBjZW50ZXJYID0gdGhpcy5fYm94LmxlZnQgKyAoIHRoaXMuX2JveC53aWR0aCAvIDIgKTtcbiAgICBjb25zdCBjZW50ZXJZID0gdGhpcy5fYm94LnRvcCArICggdGhpcy5fYm94LmhlaWdodCAvIDIgKTtcblxuICAgIGlmICggZSApIHtcbiAgICAgIHRoaXMuX21vdXNlLnggPSBNYXRoLm1heCggMCwgZS5wYWdlWCB8fCBlLmNsaWVudFggfHwgMCApIC0gY2VudGVyWDtcbiAgICAgIHRoaXMuX21vdXNlLnkgPSBNYXRoLm1heCggMCwgZS5wYWdlWSB8fCBlLmNsaWVudFkgfHwgMCApIC0gY2VudGVyWTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5fbW91c2UueCA9IGNlbnRlclg7XG4gICAgICB0aGlzLl9tb3VzZS55ID0gY2VudGVyWTtcbiAgICB9XG4gIH0sXG59XG4iLCIvKipcbiAqIENvbW1vbiB1dGlsc1xuICovXG5leHBvcnQgZGVmYXVsdCB7XG5cbiAgLy8gZ2V0IHNlYXJjaCByZXN1bHRzIG9mZiBhIGxpc3QgZm9yIGFuIG9iaiBrZXlcbiAgc2VhcmNoKCBsaXN0LCBrZXksIHNlYXJjaCApIHtcbiAgICBjb25zdCByZWd4cCA9IG5ldyBSZWdFeHAoICdeKCcrIHNlYXJjaCArJyknLCAnaScgKTtcbiAgICByZXR1cm4gbGlzdC5maWx0ZXIoIGl0ZW0gPT4gcmVneHAudGVzdCggaXRlbVsga2V5IF0gKSApO1xuICB9LFxuXG4gIC8vIHNvcnQgb2JqZWN0cyBpbiBhbiBhcnJheSBieSBhIGtleVxuICBzb3J0KCBsaXN0LCBrZXksIG9yZGVyLCBpZ25vcmUgKSB7XG4gICAgcmV0dXJuIGxpc3Quc29ydCggKCBhLCBiICkgPT4ge1xuICAgICAgaWYgKCBhLmhhc093blByb3BlcnR5KCBrZXkgKSApIHtcblxuICAgICAgICBsZXQgX2EgPSBhWyBrZXkgXTtcbiAgICAgICAgbGV0IF9iID0gYlsga2V5IF07XG5cbiAgICAgICAgaWYgKCBpZ25vcmUgKSB7IC8vIHNvcnQgc3RyaW5ncyB1c2luZyBzYW1lIGNhc2VcbiAgICAgICAgICBfYSA9ICggdHlwZW9mIF9hID09PSAnc3RyaW5nJyApID8gX2EudG9VcHBlckNhc2UoKSA6IF9hO1xuICAgICAgICAgIF9iID0gKCB0eXBlb2YgX2IgPT09ICdzdHJpbmcnICkgPyBfYi50b1VwcGVyQ2FzZSgpIDogX2I7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKCBvcmRlciA9PT0gJ2FzYycgKSB7XG4gICAgICAgICAgaWYgKCBfYSA8IF9iICkgcmV0dXJuIC0xO1xuICAgICAgICAgIGlmICggX2EgPiBfYiApIHJldHVybiAxO1xuICAgICAgICB9XG4gICAgICAgIGlmICggb3JkZXIgPT09ICdkZXNjJyApIHtcbiAgICAgICAgICBpZiAoIF9hID4gX2IgKSByZXR1cm4gLTE7XG4gICAgICAgICAgaWYgKCBfYSA8IF9iICkgcmV0dXJuIDE7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHJldHVybiAwO1xuICAgIH0pO1xuICB9LFxuXG59XG4iLCIvKipcbiAqIEJhc2ljIGxvY2FsU3RvcmFnZSB3cmFwcGVyXG4gKi9cbmV4cG9ydCBkZWZhdWx0IHtcblxuICAvLyBzYXZlIGRhdGFcbiAgc2V0KCBrZXksIGRhdGEsIHR0bCApIHtcbiAgICBpZiAoICF0aGlzLl9pc1N0cigga2V5ICkgKSByZXR1cm47XG4gICAgY29uc3QgdGltZSA9IERhdGUubm93KCk7XG4gICAgY29uc3QgZXhwaXJlID0gTnVtYmVyKCB0dGwgKSB8fCAwO1xuICAgIGNvbnN0IGpzb24gPSBKU09OLnN0cmluZ2lmeSggeyB0aW1lLCBleHBpcmUsIGRhdGEgfSApO1xuICAgIHdpbmRvdy5sb2NhbFN0b3JhZ2Uuc2V0SXRlbSgga2V5LCBqc29uICk7XG4gIH0sXG5cbiAgLy8gZ2V0IHNhdmVkIGRhdGFcbiAgZ2V0KCBrZXkgKSB7XG4gICAgaWYgKCAhdGhpcy5faXNTdHIoIGtleSApICkgcmV0dXJuO1xuICAgIGNvbnN0IGpzb24gPSB3aW5kb3cubG9jYWxTdG9yYWdlLmdldEl0ZW0oIGtleSApIHx8ICd7fSc7XG4gICAgY29uc3QgcGFyc2VkID0gSlNPTi5wYXJzZSgganNvbiApIHx8IHt9O1xuICAgIGNvbnN0IHsgdGltZSwgZXhwaXJlLCBkYXRhIH0gPSBwYXJzZWQ7XG4gICAgaWYgKCB0aGlzLl9pc0V4cGlyZWQoIHRpbWUsIGV4cGlyZSApICkgdGhpcy5kZWxldGUoIGtleSApO1xuICAgIHJldHVybiBkYXRhO1xuICB9LFxuXG4gIC8vIHJlbW92ZSBzYXZlZCBkYXRhXG4gIGRlbGV0ZSgga2V5ICkge1xuICAgIGlmICggIXRoaXMuX2lzU3RyKCBrZXkgKSApIHJldHVybjtcbiAgICB3aW5kb3cubG9jYWxTdG9yYWdlLnJlbW92ZUl0ZW0oIGtleSApO1xuICB9LFxuXG4gIC8vIGNoZWNrIHZhbGlkIHN0cmluZ1xuICBfaXNTdHIoIHN0ciApIHtcbiAgICByZXR1cm4gKCBzdHIgJiYgdHlwZW9mIHN0ciA9PT0gJ3N0cmluZycgKTtcbiAgfSxcblxuICAvLyBjaGVjayBpZiBkYXRhIHNhdmVkIGhhcyBleHBpcmVkXG4gIF9pc0V4cGlyZWQoIHRpbWUsIGV4cGlyZSApIHtcbiAgICBpZiAoICF0aW1lIHx8ICFleHBpcmUgKSByZXR1cm4gZmFsc2U7XG4gICAgY29uc3Qgbm93ID0gRGF0ZS5ub3coKTtcbiAgICBjb25zdCBzZWNzID0gKCBub3cgLSB0aW1lICkgLyAxMDAwO1xuICAgIHJldHVybiAoIHNlY3MgPj0gZXhwaXJlICkgPyB0cnVlIDogZmFsc2U7XG4gIH1cbn1cbiIsIi8qKlxuICogTWFpbiBhcHAgSlMgZW50cnkgZmlsZS5cbiAqL1xuaW1wb3J0ICcuL3Njc3MvYXBwLnNjc3MnO1xuaW1wb3J0ICcuL2pzL2ZpbHRlcnMnO1xuaW1wb3J0ICcuL2pzL2Zhdm9yaXRlJztcbi8vIGltcG9ydCBfc29tYSBmcm9tICcuL2pzL3NvbWEnO1xuaW1wb3J0IF9zdGF0aW9uIGZyb20gJy4vanMvc3RhdGlvbic7XG5pbXBvcnQgX2F1ZGlvIGZyb20gJy4vanMvYXVkaW8nO1xuaW1wb3J0IF9zY2VuZSBmcm9tICcuL2pzL3NjZW5lJztcbmltcG9ydCBfdXRpbHMgZnJvbSAnLi9qcy91dGlscyc7XG5pbXBvcnQgX3N0b3JlIGZyb20gJy4vanMvc3RvcmUnO1xuXG4vLyBtYWluIHZ1ZSBhcHBcbm5ldyBWdWUoe1xuICBlbDogJyNhcHAnLFxuICBkYXRhOiB7XG4gICAgLy8gdG9nZ2xlc1xuICAgIGluaXQ6IGZhbHNlLFxuICAgIHZpc2libGU6IHRydWUsXG4gICAgcGxheWluZzogZmFsc2UsXG4gICAgbG9hZGluZzogZmFsc2UsXG4gICAgc2lkZWJhcjogZmFsc2UsXG4gICAgLy8gdm9sdW1lOiAwLjUsXG4gICAgdm9sdW1lOiAxLFxuICAgIC8vIGNoYW5uZWxzIHN0dWZmXG4gICAgY2hhbm5lbHM6IFtdLFxuICAgIGNoYW5uZWw6IHt9LFxuICAgIHNvbmdzOiBbXSxcbiAgICB0cmFjazoge30sXG4gICAgZmF2b3JpdGVzOiBbXSxcbiAgICBlcnJvcnM6IHt9LFxuICAgIC8vIHRpbWVyIHN0dWZmXG4gICAgdGltZVN0YXJ0OiAwLFxuICAgIHRpbWVEaXNwbGF5OiAnMDA6MDA6MDAnLFxuICAgIHRpbWVJdHY6IG51bGwsXG4gICAgLy8gc29ydGluZyBzdHVmZlxuICAgIHNlYXJjaFRleHQ6ICcnLFxuICAgIHNvcnRQYXJhbTogJ2xpc3RlbmVycycsXG4gICAgc29ydE9yZGVyOiAnZGVzYycsXG4gICAgLy8gdGltZXIgc3R1ZmZcbiAgICBhbmY6IG51bGwsXG4gICAgc3RvOiBudWxsLFxuICAgIGl0djogbnVsbCxcbiAgICAvLyBnZXN0dXJlX2FjdGlvbjogZmFsc2UsXG4gIH0sXG5cbiAgLy8gd2F0Y2ggbWV0aG9kc1xuICB3YXRjaDoge1xuXG4gICAgLy8gd2F0Y2ggcGxheWluZyBzdGF0dXNcbiAgICBwbGF5aW5nKCkge1xuICAgICAgaWYgKCB0aGlzLnBsYXlpbmcgKSB7IHRoaXMuc3RhcnRDbG9jaygpOyB9XG4gICAgICBlbHNlIHsgdGhpcy5zdG9wQ2xvY2soKTsgfVxuICAgIH0sXG5cbiAgICAvLyB1cGRhdGUgcGxheWVyIHZvbHVtZVxuICAgIHZvbHVtZSgpIHtcbiAgICAgIF9hdWRpby5zZXRWb2x1bWUoIHRoaXMudm9sdW1lICk7XG4gICAgfVxuICB9LFxuXG4gIC8vIGNvbXB1dGVkIG1ldGhvZHNcbiAgY29tcHV0ZWQ6IHtcblxuICAgIC8vIGZpbHRlciBjaGFubmVscyBsaXN0XG4gICAgY2hhbm5lbHNMaXN0KCkge1xuICAgICAgbGV0IGxpc3QgPSB0aGlzLmNoYW5uZWxzLnNsaWNlKCk7XG4gICAgICBsZXQgc2VhcmNoID0gdGhpcy5zZWFyY2hUZXh0LnJlcGxhY2UoIC9bXlxcd1xcc1xcLV0rL2csICcnICkucmVwbGFjZSggL1tcXHJcXHNcXHRcXG5dKy9nLCAnICcgKS50cmltKCk7XG5cbiAgICAgIGlmICggc2VhcmNoICYmIHNlYXJjaC5sZW5ndGggPiAxICkge1xuICAgICAgICBsaXN0ID0gX3V0aWxzLnNlYXJjaCggbGlzdCwgJ3RpdGxlJywgc2VhcmNoICk7XG4gICAgICB9XG4gICAgICBpZiAoIHRoaXMuc29ydFBhcmFtICkge1xuICAgICAgICBsaXN0ID0gX3V0aWxzLnNvcnQoIGxpc3QsIHRoaXMuc29ydFBhcmFtLCB0aGlzLnNvcnRPcmRlciwgdHJ1ZSApO1xuICAgICAgfVxuICAgICAgaWYgKCB0aGlzLmNoYW5uZWwuaWQgKSB7XG4gICAgICAgIGxpc3QgPSBsaXN0Lm1hcCggaSA9PiB7XG4gICAgICAgICAgaS5hY3RpdmUgPSAoIHRoaXMuY2hhbm5lbC5pZCA9PT0gaS5pZCApID8gdHJ1ZSA6IGZhbHNlO1xuICAgICAgICAgIHJldHVybiBpO1xuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBsaXN0O1xuICAgIH0sXG5cbiAgICAvLyBmaWx0ZXIgc29uZ3MgbGlzdFxuICAgIHNvbmdzTGlzdCgpIHtcbiAgICAgIGxldCBsaXN0ID0gdGhpcy5zb25ncy5zbGljZSgpO1xuICAgICAgcmV0dXJuIGxpc3Q7XG4gICAgfSxcblxuICAgIC8vIHNvcnQtYnkgbGFiZWwgZm9yIGJ1dHRvbnMsIGV0Y1xuICAgIHNvcnRMYWJlbCgpIHtcbiAgICAgIHN3aXRjaCAoIHRoaXMuc29ydFBhcmFtICkge1xuICAgICAgICBjYXNlICd0aXRsZScgICAgIDogcmV0dXJuICdTdGF0aW9uIE5hbWUnO1xuICAgICAgICBjYXNlICdsaXN0ZW5lcnMnIDogcmV0dXJuICdMaXN0ZW5lcnMgQ291bnQnO1xuICAgICAgICBjYXNlICdmYXZvcml0ZScgIDogcmV0dXJuICdTYXZlZCBGYXZvcml0ZXMnO1xuICAgICAgICBjYXNlICdnZW5yZScgICAgIDogcmV0dXJuICdNdXNpYyBHZW5yZSc7XG4gICAgICB9XG4gICAgfSxcblxuICAgIC8vIGNoZWNrIGlmIGF1ZGlvIGNhbiBiZSBwbGF5ZWRcbiAgICBjYW5QbGF5KCkge1xuICAgICAgcmV0dXJuICggdGhpcy5jaGFubmVsLmlkICYmICF0aGlzLmxvYWRpbmcgKSA/IHRydWUgOiBmYWxzZTtcbiAgICB9LFxuXG4gICAgLy8gY2hlY2sgaWYgYSBjaGFubmVsIGlzIHNlbGVjdGVkXG4gICAgaGFzQ2hhbm5lbCgpIHtcbiAgICAgIHJldHVybiB0aGlzLmNoYW5uZWwuaWQgPyB0cnVlIDogZmFsc2U7XG4gICAgfSxcblxuICAgIC8vIGNoZWNrIGlmIHRoZXJlIGFyZSB0cmFja3MgbG9hZGVkXG4gICAgaGFzU29uZ3MoKSB7XG4gICAgICByZXR1cm4gdGhpcy5zb25ncy5sZW5ndGggPyB0cnVlIDogZmFsc2U7XG4gICAgfSxcblxuICAgIC8vIGNoZWNrIGZvciBlcnJvcnMgdGhhdCB3b3VsZCBhZmZlY3QgcGxheWJhY2tcbiAgICBoYXNFcnJvcigpIHtcbiAgICAgIGlmICggdGhpcy5lcnJvcnMuY2hhbm5lbHMgJiYgIXRoaXMuY2hhbm5lbHMubGVuZ3RoICkgcmV0dXJuIHRydWU7XG4gICAgICBpZiAoIHRoaXMuZXJyb3JzLnN0cmVhbSApIHJldHVybiB0cnVlO1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH0sXG4gIH0sXG5cbiAgLy8gY3VzdG9tIG1ldGhvZHNcbiAgbWV0aG9kczoge1xuXG4gICAgLy8gcnVuIG1haW50ZW5hbmNlIHRhc2tzIG9uIGEgdGltZXJcbiAgICBzZXR1cE1haW50ZW5hbmNlKCkge1xuICAgICAgdGhpcy5pdHYgPSBzZXRJbnRlcnZhbCggKCkgPT4ge1xuICAgICAgICB0aGlzLmdldENoYW5uZWxzKCk7IC8vIHVwZGF0ZSBjaGFubmVsc1xuICAgICAgICAvLyB0aGlzLmdldFNvbmdzKCB0aGlzLmNoYW5uZWwgKTsgLy8gdXBkYXRlIGNoYW5uZWwgdHJhY2tzXG4gICAgICB9LCAxMDAwICogMzAgKTtcbiAgICB9LFxuXG4gICAgLy8gc2V0IGFuIGVycm9yIG1lc3NhZ2VcbiAgICBzZXRFcnJvcigga2V5LCBlcnIgKSB7XG4gICAgICBsZXQgZXJyb3JzID0gT2JqZWN0LmFzc2lnbigge30sIHRoaXMuZXJyb3JzICk7XG4gICAgICBlcnJvcnNbIGtleSBdID0gU3RyaW5nKCBlcnIgfHwgJycgKS50cmltKCk7XG4gICAgICBpZiAoIGVyciApIGNvbnNvbGUud2FybiggJ0VSUk9SKCcrIGtleSArJyk6JywgZXJyICk7XG4gICAgICB0aGlzLmVycm9ycyA9IGVycm9ycztcbiAgICB9LFxuXG4gICAgLy8gY2hlY2sgaWYgYW4gZXJyb3IgaGFzIGJlZW4gc2V0IGZvciBhIGtleVxuICAgIGNoZWNrRXJyb3IoIGtleSApIHtcbiAgICAgIHJldHVybiAoIGtleSAmJiB0aGlzLmVycm9ycy5oYXNPd25Qcm9wZXJ0eSgga2V5ICkgJiYgdGhpcy5lcnJvcnNbIGtleSBdICk7XG4gICAgfSxcblxuICAgIC8vIGNsZWFyIGFsbCBlcnJvciBtZXNzYWdlc1xuICAgIGNsZWFyRXJyb3JzKCkge1xuICAgICAgT2JqZWN0LmtleXMoIHRoaXMuZXJyb3JzICkuZm9yRWFjaCgga2V5ID0+IHtcbiAgICAgICAgdGhpcy5lcnJvcnNbIGtleSBdID0gJyc7XG4gICAgICB9KTtcbiAgICB9LFxuXG4gICAgLy8gc2hvdyBwbGF5ZXIgd2hlbiBhcHAgaXMgbW91bnRlZFxuICAgIGluaXRQbGF5ZXIoKSB7XG4gICAgICBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCAnI19zcG5yJyApLnN0eWxlLmRpc3BsYXkgPSAnbm9uZSc7XG4gICAgICBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCAnI3BsYXllci13cmFwJyApLnN0eWxlLm9wYWNpdHkgPSAnMSc7XG4gICAgICBkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKCAndmlzaWJpbGl0eWNoYW5nZScsIGUgPT4geyB0aGlzLnZpc2libGUgPSAoIGRvY3VtZW50LnZpc2liaWxpdHlTdGF0ZSA9PT0gJ3Zpc2libGUnICkgfSApO1xuICAgICAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoICdoYXNoY2hhbmdlJywgZSA9PiB0aGlzLmFwcGx5Um91dGUoIHdpbmRvdy5sb2NhdGlvbi5oYXNoICkgKTtcbiAgICAgIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKCAna2V5ZG93bicsIHRoaXMub25LZXlib2FyZCApO1xuICAgICAgLy8gd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgZSA9PiB7IHRoaXMuZ2VzdHVyZV9hY3Rpb24gPSB0cnVlOyB9KTtcbiAgICAgIC8vIGRvY3VtZW50Lm9uY2xpY2sgPSBlID0+IHsgdGhpcy5nZXN0dXJlX2FjdGlvbiA9IHRydWU7IH07XG4gICAgICB0aGlzLmluaXQgPSB0cnVlO1xuICAgIH0sXG5cbiAgICAvLyByZXNldCBzZWxlY3RlZCBjaGFubmVsXG4gICAgcmVzZXRQbGF5ZXIoKSB7XG4gICAgICB0aGlzLmNsb3NlQXVkaW8oKTtcbiAgICAgIHRoaXMuY2xlYXJFcnJvcnMoKTtcbiAgICAgIHRoaXMuY2hhbm5lbCA9IHt9O1xuICAgICAgdGhpcy5zb25ncyA9IFtdO1xuICAgIH0sXG5cbiAgICAvLyB0cnkgcmVzdW1pbmcgc3RyZWFtIHByb2JsZW0gaWYgcG9zc2libGVcbiAgICB0cnlBZ2FpbigpIHtcbiAgICAgIHRoaXMuY2xlYXJFcnJvcnMoKTtcbiAgICAgIHRoaXMucGxheUNoYW5uZWwoIHRoaXMuY2hhbm5lbCApO1xuICAgIH0sXG5cbiAgICAvLyBzaG93L2hpZGUgdGhlIHNpZGViYXJcbiAgICB0b2dnbGVTaWRlYmFyKCB0b2dnbGUgKSB7XG4gICAgICB0aGlzLnNpZGViYXIgPSAoIHR5cGVvZiB0b2dnbGUgPT09ICdib29sZWFuJyApID8gdG9nZ2xlIDogZmFsc2U7XG4gICAgfSxcblxuICAgIC8vIHNob3cgc2lkZWJhciBhdCBzdGFydHVwIGlmIHRoZXJlIGFyZSBubyBlcnJvcnNcbiAgICBpbml0U2lkZWJhcigpIHtcbiAgICAgIGlmICggdGhpcy5oYXNFcnJvciApIHJldHVybjtcbiAgICAgIC8vIHRoaXMudG9nZ2xlU2lkZWJhciggdHJ1ZSApO1xuICAgIH0sXG5cbiAgICAvLyB0b2dnbGUgc3RyZWFtIHBsYXliYWNrIGZvciBjdXJyZW50IHNlbGVjdGVkIGNoYW5uZWxcbiAgICB0b2dnbGVQbGF5KCkge1xuICAgICAgaWYgKCB0aGlzLmxvYWRpbmcgKSByZXR1cm47XG4gICAgICBpZiAoIHRoaXMucGxheWluZyApIHJldHVybiB0aGlzLmNsb3NlQXVkaW8oKTtcbiAgICAgIHJldHVybiB0aGlzLnBsYXlDaGFubmVsKCB0aGlzLmNoYW5uZWwgKTtcbiAgICB9LFxuXG4gICAgLy8gbG9hZCBsYXN0IHNvcnQgb3B0aW9ucyBmcm9tIHN0b3JlXG4gICAgbG9hZFNvcnRPcHRpb25zKCkge1xuICAgICAgY29uc3Qgb3B0cyA9IF9zdG9yZS5nZXQoICdzb3J0aW5nX2RhdGEnICk7XG4gICAgICBpZiAoIG9wdHMgJiYgb3B0cy5wYXJhbSApIHRoaXMuc29ydFBhcmFtID0gb3B0cy5wYXJhbTtcbiAgICAgIGlmICggb3B0cyAmJiBvcHRzLm9yZGVyICkgdGhpcy5zb3J0T3JkZXIgPSBvcHRzLm9yZGVyO1xuICAgIH0sXG5cbiAgICAvLyB0b2dnbGUgc29ydCBvcmRlclxuICAgIHRvZ2dsZVNvcnRPcmRlcigpIHtcbiAgICAgIHRoaXMuc29ydE9yZGVyID0gKCB0aGlzLnNvcnRPcmRlciA9PT0gJ2FzYycgKSA/ICdkZXNjJyA6ICdhc2MnO1xuICAgIH0sXG5cbiAgICAvLyBhcHBseSBzb3J0aW5nIGFuZCB0b2dnbGUgb3JkZXJcbiAgICBzb3J0QnkoIHBhcmFtLCBvcmRlciApIHtcbiAgICAgIGlmICggdGhpcy5zb3J0UGFyYW0gPT09IHBhcmFtICkgeyB0aGlzLnRvZ2dsZVNvcnRPcmRlcigpOyB9XG4gICAgICBlbHNlIHsgdGhpcy5zb3J0T3JkZXIgPSBvcmRlciB8fCAnYXNjJzsgfVxuICAgICAgdGhpcy5zb3J0UGFyYW0gPSBwYXJhbTtcbiAgICAgIF9zdG9yZS5zZXQoICdzb3J0aW5nX2RhdGEnLCB7IHBhcmFtOiB0aGlzLnNvcnRQYXJhbSwgb3JkZXI6IHRoaXMuc29ydE9yZGVyIH0gKTtcbiAgICB9LFxuXG4gICAgZ29Ub0hvbWUoKSB7XG4gICAgICB0aGlzLnNldFJvdXRlKCcvJyk7XG4gICAgfSxcblxuICAgIC8vIGxvYWQgc2F2ZWQgZmF2cyBsaXN0IGZyb20gc3RvcmVcbiAgICBsb2FkRmF2b3JpdGVzKCkge1xuICAgICAgY29uc3QgZmF2cyA9IF9zdG9yZS5nZXQoICdmYXZvcml0ZXNfZGF0YScgKTtcbiAgICAgIGlmICggIUFycmF5LmlzQXJyYXkoIGZhdnMgKSApIHJldHVybjtcbiAgICAgIHRoaXMuZmF2b3JpdGVzID0gZmF2cztcbiAgICB9LFxuXG4gICAgLy8gc2F2ZSBmYXZzIHRvIGEgLm0zdSBmaWxlXG4gICAgc2F2ZUZhdm9yaXRlcygpIHtcbiAgICAgIC8vIGxldCBkYXRhID0gJyNFWFRNM1UnO1xuICAgICAgLy8gZm9yICggbGV0IGlkIG9mIHRoaXMuZmF2b3JpdGVzICkge1xuICAgICAgLy8gICBjb25zdCBjaGFubmVsID0gdGhpcy5jaGFubmVscy5maWx0ZXIoIGMgPT4gKCBjLmlkID09PSBpZCApICkuc2hpZnQoKTtcbiAgICAgIC8vICAgaWYgKCAhY2hhbm5lbCApIGNvbnRpbnVlO1xuICAgICAgLy8gICBkYXRhICs9ICdcXG5cXG4nO1xuICAgICAgLy8gICBkYXRhICs9IGAjRVhUSU5GOjAsJHtjaGFubmVsLnRpdGxlfSBbU29tYUZNXVxcbmA7XG4gICAgICAvLyAgIGRhdGEgKz0gYCR7Y2hhbm5lbC5tcDNmaWxlfWA7XG4gICAgICAvLyB9XG4gICAgICAvLyBjb25zdCBlbG0gPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCAnYScgKTtcbiAgICAgIC8vIGVsbS5zZXRBdHRyaWJ1dGUoICdocmVmJywgJ2RhdGE6YXVkaW8vbXBlZ3VybDtjaGFyc2V0PXV0Zi04LCcrIGVuY29kZVVSSUNvbXBvbmVudCggZGF0YSApICk7XG4gICAgICAvLyBlbG0uc2V0QXR0cmlidXRlKCAnZG93bmxvYWQnLCAnc29tYWZtX2Zhdm9yaXRlcy5tM3UnICk7XG4gICAgICAvLyBlbG0uc2V0QXR0cmlidXRlKCAndGFyZ2V0JywgJ19ibGFuaycgKTtcbiAgICAgIC8vIGRvY3VtZW50LmJvZHkuYXBwZW5kQ2hpbGQoIGVsbSApO1xuICAgICAgLy8gc2V0VGltZW91dCggKCkgPT4gZWxtLmNsaWNrKCksIDEwMCApO1xuICAgICAgLy8gc2V0VGltZW91dCggKCkgPT4gZWxtLnJlbW92ZSgpLCAxMDAwICk7XG4gICAgfSxcblxuICAgIC8vIHRvZ2dsZSBmYXZvcml0ZSBjaGFubmVsIGJ5IGlkXG4gICAgdG9nZ2xlRmF2b3JpdGUoIGlkLCB0b2dnbGUgKSB7XG4gICAgICAvLyBsZXQgZmF2cyA9IHRoaXMuZmF2b3JpdGVzLnNsaWNlKCk7XG4gICAgICAvLyBmYXZzID0gZmF2cy5maWx0ZXIoIGZpZCA9PiAoIGZpZCAhPT0gaWQgKSApO1xuICAgICAgLy8gaWYgKCB0b2dnbGUgKSBmYXZzLnB1c2goIGlkICk7XG4gICAgICAvLyB0aGlzLmZhdm9yaXRlcyA9IGZhdnM7XG4gICAgICAvLyB0aGlzLnVwZGF0ZUN1cnJlbnRDaGFubmVsKCk7XG4gICAgICAvLyBfc3RvcmUuc2V0KCAnZmF2b3JpdGVzX2RhdGEnLCBmYXZzICk7XG4gICAgfSxcblxuICAgIC8vIHNldHVwIGF1ZGlvIHJvdXRpbmcgYW5kIHN0cmVhbSBldmVudHNcbiAgICBzZXR1cEF1ZGlvKCkge1xuICAgICAgY29uc3QgYSA9IF9hdWRpby5zZXR1cEF1ZGlvKCk7XG5cbiAgICAgIGEuYWRkRXZlbnRMaXN0ZW5lciggJ3dhaXRpbmcnLCBlID0+IHtcbiAgICAgICAgdGhpcy5wbGF5aW5nID0gZmFsc2U7XG4gICAgICAgIHRoaXMubG9hZGluZyA9IHRydWU7XG5cbiAgICAgICAgY29uc3Qgc2wgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnc3RhdGlvbi1sb2dvJyk7XG4gICAgICAgIGlmKHNsLmNsYXNzTGlzdC5jb250YWlucygnZngtc3Bpbi1yaWdodC1zdGF0aW9uLWxvZ28nKSkge1xuICAgICAgICAgIHNsLmNsYXNzTGlzdC5yZW1vdmUoJ2Z4LXNwaW4tcmlnaHQtc3RhdGlvbi1sb2dvJyk7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgICAgYS5hZGRFdmVudExpc3RlbmVyKCAncGxheWluZycsIGUgPT4ge1xuICAgICAgICB0aGlzLnNldEVycm9yKCAnc3RyZWFtJywgJycgKTtcbiAgICAgICAgdGhpcy5wbGF5aW5nID0gdHJ1ZTtcbiAgICAgICAgdGhpcy5sb2FkaW5nID0gZmFsc2U7XG5cbiAgICAgICAgY29uc3Qgc2wgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnc3RhdGlvbi1sb2dvJyk7XG4gICAgICAgIHNsLmNsYXNzTGlzdC5yZW1vdmUoJ2Z4LWRyb3AtaW4nKTtcbiAgICAgICAgc2wuY2xhc3NMaXN0LmFkZCgnZngtc3Bpbi1yaWdodC1zdGF0aW9uLWxvZ28nKTtcbiAgICAgIH0pO1xuICAgICAgYS5hZGRFdmVudExpc3RlbmVyKCAncGF1c2UnLCBlID0+IHtcbiAgICAgICAgdGhpcy5wbGF5aW5nID0gZmFsc2U7XG4gICAgICAgIHRoaXMubG9hZGluZyA9IGZhbHNlO1xuICAgICAgICBcbiAgICAgICAgY29uc3Qgc2wgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnc3RhdGlvbi1sb2dvJyk7XG4gICAgICAgIHNsLmNsYXNzTGlzdC5yZW1vdmUoJ2Z4LXNwaW4tcmlnaHQtc3RhdGlvbi1sb2dvJyk7XG4gICAgICB9KTtcbiAgICAgIGEuYWRkRXZlbnRMaXN0ZW5lciggJ2VuZGVkJywgZSA9PiB7XG4gICAgICAgIHRoaXMucGxheWluZyA9IGZhbHNlO1xuICAgICAgICB0aGlzLmxvYWRpbmcgPSBmYWxzZTtcbiAgICAgIH0pO1xuICAgICAgYS5hZGRFdmVudExpc3RlbmVyKCAnZXJyb3InLCBlID0+IHtcbiAgICAgICAgdGhpcy5jbG9zZUF1ZGlvKCk7XG4gICAgICAgIHRoaXMuc2V0RXJyb3IoICdzdHJlYW0nLCBgVGhlIHNlbGVjdGVkIHN0cmVhbSAoJHt0aGlzLmNoYW5uZWwudGl0bGV9KSBjb3VsZCBub3QgbG9hZCwgb3IgaGFzIHN0b3BwZWQgbG9hZGluZyBkdWUgdG8gYSBuZXR3b3JrIHByb2JsZW0uYCApO1xuICAgICAgICB0aGlzLnBsYXlpbmcgPSBmYWxzZTtcbiAgICAgICAgdGhpcy5sb2FkaW5nID0gZmFsc2U7XG4gICAgICB9KTtcbiAgICB9LFxuXG4gICAgLy8gY2xvc2UgYWN0aXZlIGF1ZGlvXG4gICAgY2xvc2VBdWRpbygpIHtcbiAgICAgIF9hdWRpby5zdG9wQXVkaW8oKTtcbiAgICAgIHRoaXMucGxheWluZyA9IGZhbHNlO1xuICAgIH0sXG5cbiAgICAvLyBzZXR1cCBhbmltYXRpb24gY2FudmFzXG4gICAgc2V0dXBDYW52YXMoKSB7XG4gICAgICBfc2NlbmUuc2V0dXBDYW52YXMoKTtcbiAgICB9LFxuXG4gICAgLy8gYXVkaW8gdmlzdWFsaXplciBhbmltYXRpb24gbG9vcFxuICAgIHVwZGF0ZUNhbnZhcygpIHtcbiAgICAgIHRoaXMuYW5mID0gcmVxdWVzdEFuaW1hdGlvbkZyYW1lKCB0aGlzLnVwZGF0ZUNhbnZhcyApO1xuICAgICAgaWYgKCAhdGhpcy52aXNpYmxlICkgcmV0dXJuO1xuICAgICAgY29uc3QgZnJlcSA9IF9hdWRpby5nZXRGcmVxRGF0YSgpO1xuICAgICAgX3NjZW5lLnVwZGF0ZU9iamVjdHMoIGZyZXEgKTtcbiAgICB9LFxuXG4gICAgLy8gZ2V0IGNoYW5uZWxzIGRhdGEgZnJvbSBhcGlcbiAgICBnZXRDaGFubmVscyggc2lkZWJhciApIHtcbiAgICAgIF9zdGF0aW9uLmdldENoYW5uZWxzKCAoIGVyciwgY2hhbm5lbHMgKSA9PiB7XG4gICAgICAgIGlmICggZXJyICkgcmV0dXJuIHRoaXMuc2V0RXJyb3IoICdjaGFubmVscycsIGVyciApO1xuICAgICAgICAvLyB0aGlzIG1ha2VzIHNpZGViYXIgYXBwZWFyIG9uIHN0YXJ0dXAsIHRoZW4gSSBkaXNhYmxlIGl0XG4gICAgICAgIC8vIGlmICggc2lkZWJhciApIHRoaXMudG9nZ2xlU2lkZWJhciggdHJ1ZSApO1xuICAgICAgICB0aGlzLmNoYW5uZWxzID0gY2hhbm5lbHM7XG4gICAgICAgIHRoaXMuc2V0RXJyb3IoICdjaGFubmVscycsICcnICk7XG4gICAgICAgIHRoaXMudXBkYXRlQ3VycmVudENoYW5uZWwoKTtcbiAgICAgICAgdGhpcy5hcHBseVJvdXRlKCB3aW5kb3cubG9jYXRpb24uaGFzaCApO1xuICAgICAgfSk7XG4gICAgfSxcblxuICAgIC8vIGdldCBzb25ncyBsaXN0IGZvciBhIGNoYW5uZWwgZnJvbSBhcGlcbiAgICAvLyBnZXRTb25ncyggY2hhbm5lbCwgY2IgKSB7XG4gICAgLy8gICBpZiAoICFjaGFubmVsIHx8ICFjaGFubmVsLmlkIHx8ICFjaGFubmVsLnNvbmdzdXJsICkgcmV0dXJuO1xuICAgIC8vICAgaWYgKCAhdGhpcy5pc0N1cnJlbnRDaGFubmVsKCBjaGFubmVsICkgKSB7IHRoaXMuc29uZ3MgPSBbXTsgdGhpcy50cmFjayA9IHt9OyB9XG5cbiAgICAvLyAgIF9zb21hLmdldFNvbmdzKCBjaGFubmVsLCAoIGVyciwgc29uZ3MgKSA9PiB7XG4gICAgLy8gICAgIGlmICggZXJyICkgcmV0dXJuIHRoaXMuc2V0RXJyb3IoICdzb25ncycsIGVyciApO1xuICAgIC8vICAgICBpZiAoIHR5cGVvZiBjYiA9PT0gJ2Z1bmN0aW9uJyApIGNiKCBzb25ncyApO1xuICAgIC8vICAgICB0aGlzLnRyYWNrID0gc29uZ3Muc2hpZnQoKTtcbiAgICAvLyAgICAgdGhpcy5zb25ncyA9IHNvbmdzLnNsaWNlKCAwLCAzICk7XG4gICAgLy8gICAgIHRoaXMuc2V0RXJyb3IoICdzb25ncycsICcnICk7XG4gICAgLy8gICB9KTtcbiAgICAvLyB9LFxuXG4gICAgLy8gY2hlY2tzIGlzIGEgY2hhbm5lbCBpcyBjdXJyZW50bHkgc2VsZWN0ZWRcbiAgICBpc0N1cnJlbnRDaGFubmVsKCBjaGFubmVsICkge1xuICAgICAgaWYgKCAhY2hhbm5lbCB8fCAhY2hhbm5lbC5pZCB8fCAhdGhpcy5jaGFubmVsLmlkICkgcmV0dXJuIGZhbHNlO1xuICAgICAgaWYgKCB0aGlzLmNoYW5uZWwuaWQgIT09IGNoYW5uZWwuaWQgKSByZXR1cm4gZmFsc2U7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9LFxuXG4gICAgLy8gdXBkYXRlIGRhdGEgZm9yIGN1cnJlbnQgc2VsZWN0ZWQgY2hhbm5lbFxuICAgIHVwZGF0ZUN1cnJlbnRDaGFubmVsKCkge1xuICAgICAgZm9yICggbGV0IGMgb2YgdGhpcy5jaGFubmVscyApIHtcbiAgICAgICAgLy8gc2VlIGlmIGNoYW5uZWwgaGFzIGJlZW4gc2F2ZWQgYXMgYSBmYXZvcml0ZVxuICAgICAgICBjLmZhdm9yaXRlID0gKCB0aGlzLmZhdm9yaXRlcy5pbmRleE9mKCBjLmlkICkgPj0gMCApO1xuICAgICAgICAvLyBzZWUgaWYgY2hhbm5lbCBpcyBjdXJyZW50bHkgc2VsZWN0ZWRcbiAgICAgICAgaWYgKCB0aGlzLmlzQ3VycmVudENoYW5uZWwoIGMgKSApIHtcbiAgICAgICAgICB0aGlzLmNoYW5uZWwgPSBPYmplY3QuYXNzaWduKCB0aGlzLmNoYW5uZWwsIGMgKTtcbiAgICAgICAgICBjLmFjdGl2ZSA9IHRydWU7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9LFxuXG4gICAgLy8gcGxheSBhdWRpbyBzdHJlYW0gZm9yIGEgY2hhbm5lbFxuICAgIHBsYXlDaGFubmVsKCBjaGFubmVsICkge1xuICAgICAgLy8gaWYodGhpcy5nZXN0dXJlX2FjdGlvbiA9PSBmYWxzZSkgeyB0aGlzLmdlc3R1cmVfYWN0aW9uID0gdHJ1ZTsgcmV0dXJuOyB9XG4gICAgICAvLyBpZiAoIHRoaXMucGxheWluZyB8fCAhY2hhbm5lbCB8fCAhY2hhbm5lbC5tcDNmaWxlICkgcmV0dXJuO1xuICAgICAgaWYgKCB0aGlzLnBsYXlpbmcgfHwgIWNoYW5uZWwgKSByZXR1cm47XG4gICAgICB0aGlzLmxvYWRpbmcgPSB0cnVlO1xuICAgICAgdGhpcy5jbGVhckVycm9ycygpO1xuICAgICAgX2F1ZGlvLnBsYXlTb3VyY2UoIGNoYW5uZWwuc3RyZWFtX3VyaSApO1xuICAgICAgX2F1ZGlvLnNldFZvbHVtZSggdGhpcy52b2x1bWUgKTtcbiAgICB9LFxuXG4gICAgLy8gc2VsZWN0IGEgY2hhbm5lbCB0byBwbGF5XG4gICAgc2VsZWN0Q2hhbm5lbCggY2hhbm5lbCApIHtcbiAgICAgIGlmICggIWNoYW5uZWwgfHwgIWNoYW5uZWwuaWQgKSByZXR1cm47XG4gICAgICBpZiAoIHRoaXMuaXNDdXJyZW50Q2hhbm5lbCggY2hhbm5lbCApICkgcmV0dXJuO1xuICAgICAgdGhpcy5jbG9zZUF1ZGlvKCk7XG4gICAgICB0aGlzLnRvZ2dsZVNpZGViYXIoIGZhbHNlICk7XG4gICAgICAvLyB0aGlzLnBsYXlDaGFubmVsKCBjaGFubmVsICk7XG4gICAgICAvLyB0aGlzLmdldFNvbmdzKCBjaGFubmVsICk7XG4gICAgICB0aGlzLmNoYW5uZWwgPSBjaGFubmVsO1xuICAgIH0sXG5cbiAgICAvLyBzZXQgc3RhdGlvbiByb3V0ZVxuICAgIHNldFJvdXRlKCByb3V0ZSApIHtcbiAgICAgIHJvdXRlID0gJy8nKyBTdHJpbmcoIHJvdXRlIHx8ICcnICkucmVwbGFjZSggL15bXFwjXFwvXSt8W1xcL10rJC9nLCAnJyApLnRyaW0oKTtcbiAgICAgIHdpbmRvdy5sb2NhdGlvbi5oYXNoID0gcm91dGU7XG4gICAgfSxcblxuICAgIC8vIHBhcnNlIHVybCBoYXNoIHJvdXRlIGFjdGlvbnNcbiAgICBhcHBseVJvdXRlKCByb3V0ZSApIHtcbiAgICAgIGNvbnN0IGRhdGEgICA9IFN0cmluZyggcm91dGUgfHwgJycgKS5yZXBsYWNlKCAvXltcXCNcXC9dK3xbXFwvXSskL2csICcnICkudHJpbSgpLnNwbGl0KCAnLycgKTtcbiAgICAgIGNvbnN0IGFjdGlvbiA9IGRhdGEubGVuZ3RoID8gZGF0YS5zaGlmdCgpIDogJyc7XG4gICAgICBjb25zdCBjb3VudHJ5ID0gZGF0YS5sZW5ndGggPyBkYXRhLnNoaWZ0KCkgOiAnJztcbiAgICAgIGNvbnN0IHBhcmFtICA9IGRhdGEubGVuZ3RoID8gZGF0YS5zaGlmdCgpIDogJyc7XG5cbiAgICAgIGlmICggIWFjdGlvbiApIHtcbiAgICAgICAgdGhpcy5jbG9zZUF1ZGlvKCk7XG4gICAgICAgIHRoaXMucmVzZXRQbGF5ZXIoKTtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgaWYgKCBhY3Rpb24gPT09ICdjaGFubmVsJyAmJiBwYXJhbSApIHtcbiAgICAgICAgY29uc3QgY2hhbm5lbCA9IHRoaXMuY2hhbm5lbHMuZmlsdGVyKCBjID0+ICggYy5pZCA9PT0gcGFyYW0gKSApLnNoaWZ0KCk7XG4gICAgICAgIHRoaXMuc2VsZWN0Q2hhbm5lbCggY2hhbm5lbCApO1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgfSxcblxuICAgIC8vIG9uIGtleWJvYXJkIGV2ZW50c1xuICAgIG9uS2V5Ym9hcmQoIGUgKSB7XG4gICAgICBjb25zdCBrID0gZS5rZXkgfHwgJyc7XG4gICAgICBpZiAoIGsgPT09ICcgJyAmJiB0aGlzLmNoYW5uZWwuaWQgKSByZXR1cm4gdGhpcy50b2dnbGVQbGF5KCk7XG4gICAgICBpZiAoIGsgPT09ICdFbnRlcicgKSByZXR1cm4gdGhpcy50b2dnbGVTaWRlYmFyKCB0cnVlICk7XG4gICAgICBpZiAoIGsgPT09ICdFc2NhcGUnICkgcmV0dXJuIHRoaXMudG9nZ2xlU2lkZWJhciggZmFsc2UgKTtcbiAgICB9LFxuXG4gICAgLy8gc3RhcnQgdHJhY2tpbmcgcGxheWJhY2sgdGltZVxuICAgIHN0YXJ0Q2xvY2soKSB7XG4gICAgICB0aGlzLnN0b3BDbG9jaygpO1xuICAgICAgdGhpcy50aW1lU3RhcnQgPSBEYXRlLm5vdygpO1xuICAgICAgdGhpcy50aW1lSXR2ID0gc2V0SW50ZXJ2YWwoIHRoaXMudXBkYXRlQ2xvY2ssIDEwMDAgKTtcbiAgICAgIHRoaXMudXBkYXRlQ2xvY2soKTtcbiAgICB9LFxuXG4gICAgLy8gdXBkYXRlIHRyYWNraW5nIHBsYXliYWNrIHRpbWVcbiAgICB1cGRhdGVDbG9jaygpIHtcbiAgICAgIGxldCBwID0gbiA9PiAoIG4gPCAxMCApID8gJzAnK24gOiAnJytuO1xuICAgICAgbGV0IGVsYXBzZWQgPSAoIERhdGUubm93KCkgLSB0aGlzLnRpbWVTdGFydCApIC8gMTAwMDtcbiAgICAgIGxldCBzZWNvbmRzID0gTWF0aC5mbG9vciggZWxhcHNlZCAlIDYwICk7XG4gICAgICBsZXQgbWludXRlcyA9IE1hdGguZmxvb3IoIGVsYXBzZWQgLyA2MCAlIDYwICk7XG4gICAgICBsZXQgaG91cnMgICA9IE1hdGguZmxvb3IoIGVsYXBzZWQgLyAzNjAwICk7XG4gICAgICB0aGlzLnRpbWVEaXNwbGF5ID0gcCggaG91cnMgKSArJzonKyBwKCBtaW51dGVzICkgKyc6JysgcCggc2Vjb25kcyApO1xuICAgIH0sXG5cbiAgICAvLyBzdG9wIHRyYWNraW5nIHBsYXliYWNrIHRpbWVcbiAgICBzdG9wQ2xvY2soKSB7XG4gICAgICBpZiAoIHRoaXMudGltZUl0diApIGNsZWFySW50ZXJ2YWwoIHRoaXMudGltZUl0diApO1xuICAgICAgdGhpcy50aW1lSXR2ID0gbnVsbDtcbiAgICB9LFxuXG4gICAgLy8gY2xlYXIgdGltZXIgcmVmc1xuICAgIGNsZWFyVGltZXJzKCkge1xuICAgICAgaWYgKCB0aGlzLnN0byApIGNsZWFyVGltZW91dCggdGhpcy5zdG8gKTtcbiAgICAgIGlmICggdGhpcy5pdHYgKSBjbGVhckludGVydmFsKCB0aGlzLml0diApO1xuICAgICAgaWYgKCB0aGlzLmFuZiApIGNhbmNlbEFuaW1hdGlvbkZyYW1lKCB0aGlzLmFuZiApO1xuICAgIH0sXG4gIH0sXG5cbiAgLy8gb24gYXBwIG1vdW50ZWRcbiAgbW91bnRlZCgpIHtcbiAgICB0aGlzLmxvYWRTb3J0T3B0aW9ucygpO1xuICAgIHRoaXMubG9hZEZhdm9yaXRlcygpO1xuICAgIHRoaXMuZ2V0Q2hhbm5lbHMoIHRydWUgKTtcbiAgICB0aGlzLnNldHVwQXVkaW8oKTtcbiAgICB0aGlzLnNldHVwQ2FudmFzKCk7XG4gICAgdGhpcy51cGRhdGVDYW52YXMoKTtcbiAgICB0aGlzLnNldHVwTWFpbnRlbmFuY2UoKTtcbiAgICB0aGlzLmluaXRQbGF5ZXIoKTtcbiAgfSxcblxuICAvLyBvbiBhcHAgZGVzdHJveWVkXG4gIGRlc3Ryb3llZCgpIHtcbiAgICB0aGlzLmNsb3NlQXVkaW8oKTtcbiAgICB0aGlzLmNsZWFyVGltZXJzKCk7XG4gIH1cbn0pOyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///2\n')},function(module,exports){eval("// removed by extract-text-webpack-plugin\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvc2Nzcy9hcHAuc2Nzcz85ZTBlIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBIiwiZmlsZSI6IjMuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvLyByZW1vdmVkIGJ5IGV4dHJhY3QtdGV4dC13ZWJwYWNrLXBsdWdpbiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///3\n")}]);